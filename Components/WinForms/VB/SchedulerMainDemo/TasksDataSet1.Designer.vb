'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591


Imports Microsoft.VisualBasic
Imports System
Namespace DevExpress.XtraScheduler.Demos


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>
	<Global.System.Serializable(), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), Global.System.Xml.Serialization.XmlRootAttribute("TasksDataSet"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
	Partial Public Class TasksDataSet
		Inherits System.Data.DataSet

		Private tableResources As ResourcesDataTable

		Private tableTaskDependencies As TaskDependenciesDataTable

		Private tableTasks As TasksDataTable

		Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As New Global.System.Data.DataSet()
				ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
				If (ds.Tables("Resources") IsNot Nothing) Then
					MyBase.Tables.Add(New ResourcesDataTable(ds.Tables("Resources")))
				End If
				If (ds.Tables("TaskDependencies") IsNot Nothing) Then
					MyBase.Tables.Add(New TaskDependenciesDataTable(ds.Tables("TaskDependencies")))
				End If
				If (ds.Tables("Tasks") IsNot Nothing) Then
					MyBase.Tables.Add(New TasksDataTable(ds.Tables("Tasks")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Resources() As ResourcesDataTable
			Get
				Return Me.tableResources
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property TaskDependencies() As TaskDependenciesDataTable
			Get
				Return Me.tableTaskDependencies
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Tasks() As TasksDataTable
			Get
				Return Me.tableTasks
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.BrowsableAttribute(True), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
		Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Overrides Function Clone() As Global.System.Data.DataSet
			Dim cln As TasksDataSet = (CType(MyBase.Clone(), TasksDataSet))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As New Global.System.Data.DataSet()
				ds.ReadXml(reader)
				If (ds.Tables("Resources") IsNot Nothing) Then
					MyBase.Tables.Add(New ResourcesDataTable(ds.Tables("Resources")))
				End If
				If (ds.Tables("TaskDependencies") IsNot Nothing) Then
					MyBase.Tables.Add(New TaskDependenciesDataTable(ds.Tables("TaskDependencies")))
				End If
				If (ds.Tables("Tasks") IsNot Nothing) Then
					MyBase.Tables.Add(New TasksDataTable(ds.Tables("Tasks")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
			Dim stream As New Global.System.IO.MemoryStream()
			Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableResources = (CType(MyBase.Tables("Resources"), ResourcesDataTable))
			If (initTable = True) Then
				If (Me.tableResources IsNot Nothing) Then
					Me.tableResources.InitVars()
				End If
			End If
			Me.tableTaskDependencies = (CType(MyBase.Tables("TaskDependencies"), TaskDependenciesDataTable))
			If (initTable = True) Then
				If (Me.tableTaskDependencies IsNot Nothing) Then
					Me.tableTaskDependencies.InitVars()
				End If
			End If
			Me.tableTasks = (CType(MyBase.Tables("Tasks"), TasksDataTable))
			If (initTable = True) Then
				If (Me.tableTasks IsNot Nothing) Then
					Me.tableTasks.InitVars()
				End If
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitClass()
			Me.DataSetName = "TasksDataSet"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/TasksDataSet1.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableResources = New ResourcesDataTable()
			MyBase.Tables.Add(Me.tableResources)
			Me.tableTaskDependencies = New TaskDependenciesDataTable()
			MyBase.Tables.Add(Me.tableTaskDependencies)
			Me.tableTasks = New TasksDataTable()
			MyBase.Tables.Add(Me.tableTasks)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function ShouldSerializeResources() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function ShouldSerializeTaskDependencies() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function ShouldSerializeTasks() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
			Dim ds As New TasksDataSet()
			Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
			Dim any As New Global.System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
			If xs.Contains(dsSchema.TargetNamespace) Then
				Dim s1 As New Global.System.IO.MemoryStream()
				Dim s2 As New Global.System.IO.MemoryStream()
				Try
					Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
					dsSchema.Write(s1)
					Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
					Do While schemas.MoveNext()
						schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
						s2.SetLength(0)
						schema.Write(s2)
						If (s1.Length = s2.Length) Then
							s1.Position = 0
							s2.Position = 0
							Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

							Loop
							If (s1.Position = s1.Length) Then
								Return type
							End If
						End If
					Loop
				Finally
					If (s1 IsNot Nothing) Then
						s1.Close()
					End If
					If (s2 IsNot Nothing) Then
						s2.Close()
					End If
				End Try
			End If
			xs.Add(dsSchema)
			Return type
		End Function

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Delegate Sub ResourcesRowChangeEventHandler(ByVal sender As Object, ByVal e As ResourcesRowChangeEvent)

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Delegate Sub TaskDependenciesRowChangeEventHandler(ByVal sender As Object, ByVal e As TaskDependenciesRowChangeEvent)

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Delegate Sub TasksRowChangeEventHandler(ByVal sender As Object, ByVal e As TasksRowChangeEvent)

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Partial Public Class ResourcesDataTable
			Inherits System.Data.TypedTableBase(Of ResourcesRow)

			Private columnId As Global.System.Data.DataColumn

			Private columnParentId As Global.System.Data.DataColumn

			Private columnDescription As Global.System.Data.DataColumn

			Private columnDaysPlanned As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New()
				Me.TableName = "Resources"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnId
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property ParentIdColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnParentId
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDescription
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property DaysPlannedColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDaysPlanned
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Default Public ReadOnly Property Item(ByVal index As Integer) As ResourcesRow
				Get
					Return (CType(Me.Rows(index), ResourcesRow))
				End Get
			End Property

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event ResourcesRowChanging As ResourcesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event ResourcesRowChanged As ResourcesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event ResourcesRowDeleting As ResourcesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event ResourcesRowDeleted As ResourcesRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub AddResourcesRow(ByVal row As ResourcesRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function AddResourcesRow(ByVal ParentId As Integer, ByVal Description As String, ByVal DaysPlanned As Integer) As ResourcesRow
				Dim rowResourcesRow As ResourcesRow = (CType(Me.NewRow(), ResourcesRow))
				Dim columnValuesArray() As Object = { Nothing, ParentId, Description, DaysPlanned}
				rowResourcesRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowResourcesRow)
				Return rowResourcesRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function FindById(ByVal Id As Integer) As ResourcesRow
				Return (CType(Me.Rows.Find(New Object() { Id}), ResourcesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As ResourcesDataTable = (CType(MyBase.Clone(), ResourcesDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New ResourcesDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub InitVars()
				Me.columnId = MyBase.Columns("Id")
				Me.columnParentId = MyBase.Columns("ParentId")
				Me.columnDescription = MyBase.Columns("Description")
				Me.columnDaysPlanned = MyBase.Columns("DaysPlanned")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Private Sub InitClass()
				Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnId)
				Me.columnParentId = New Global.System.Data.DataColumn("ParentId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnParentId)
				Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDescription)
				Me.columnDaysPlanned = New Global.System.Data.DataColumn("DaysPlanned", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDaysPlanned)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnId}, True))
				Me.columnId.AutoIncrement = True
				Me.columnId.AutoIncrementSeed = -1
				Me.columnId.AutoIncrementStep = -1
				Me.columnId.AllowDBNull = False
				Me.columnId.Unique = True
				Me.columnDescription.MaxLength = 536870910
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function NewResourcesRow() As ResourcesRow
				Return (CType(Me.NewRow(), ResourcesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New ResourcesRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(ResourcesRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Me.ResourcesRowChangedEvent IsNot Nothing) Then
					RaiseEvent ResourcesRowChanged(Me, New ResourcesRowChangeEvent((CType(e.Row, ResourcesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Me.ResourcesRowChangingEvent IsNot Nothing) Then
					RaiseEvent ResourcesRowChanging(Me, New ResourcesRowChangeEvent((CType(e.Row, ResourcesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Me.ResourcesRowDeletedEvent IsNot Nothing) Then
					RaiseEvent ResourcesRowDeleted(Me, New ResourcesRowChangeEvent((CType(e.Row, ResourcesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Me.ResourcesRowDeletingEvent IsNot Nothing) Then
					RaiseEvent ResourcesRowDeleting(Me, New ResourcesRowChangeEvent((CType(e.Row, ResourcesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub RemoveResourcesRow(ByVal row As ResourcesRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New TasksDataSet()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "ResourcesDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Partial Public Class TaskDependenciesDataTable
			Inherits System.Data.TypedTableBase(Of TaskDependenciesRow)

			Private columnId As Global.System.Data.DataColumn

			Private columnParent As Global.System.Data.DataColumn

			Private columnDependent As Global.System.Data.DataColumn

			Private columnType As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New()
				Me.TableName = "TaskDependencies"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnId
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property ParentColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnParent
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property DependentColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDependent
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnType
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Default Public ReadOnly Property Item(ByVal index As Integer) As TaskDependenciesRow
				Get
					Return (CType(Me.Rows(index), TaskDependenciesRow))
				End Get
			End Property

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event TaskDependenciesRowChanging As TaskDependenciesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event TaskDependenciesRowChanged As TaskDependenciesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event TaskDependenciesRowDeleting As TaskDependenciesRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event TaskDependenciesRowDeleted As TaskDependenciesRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub AddTaskDependenciesRow(ByVal row As TaskDependenciesRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function AddTaskDependenciesRow(ByVal Parent As Integer, ByVal Dependent As Integer, ByVal Type As Integer) As TaskDependenciesRow
				Dim rowTaskDependenciesRow As TaskDependenciesRow = (CType(Me.NewRow(), TaskDependenciesRow))
				Dim columnValuesArray() As Object = { Nothing, Parent, Dependent, Type}
				rowTaskDependenciesRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowTaskDependenciesRow)
				Return rowTaskDependenciesRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function FindById(ByVal Id As Integer) As TaskDependenciesRow
				Return (CType(Me.Rows.Find(New Object() { Id}), TaskDependenciesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As TaskDependenciesDataTable = (CType(MyBase.Clone(), TaskDependenciesDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New TaskDependenciesDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub InitVars()
				Me.columnId = MyBase.Columns("Id")
				Me.columnParent = MyBase.Columns("Parent")
				Me.columnDependent = MyBase.Columns("Dependent")
				Me.columnType = MyBase.Columns("Type")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Private Sub InitClass()
				Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnId)
				Me.columnParent = New Global.System.Data.DataColumn("Parent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnParent)
				Me.columnDependent = New Global.System.Data.DataColumn("Dependent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDependent)
				Me.columnType = New Global.System.Data.DataColumn("Type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnType)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnId}, True))
				Me.columnId.AutoIncrement = True
				Me.columnId.AutoIncrementSeed = -1
				Me.columnId.AutoIncrementStep = -1
				Me.columnId.AllowDBNull = False
				Me.columnId.Unique = True
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function NewTaskDependenciesRow() As TaskDependenciesRow
				Return (CType(Me.NewRow(), TaskDependenciesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New TaskDependenciesRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(TaskDependenciesRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Me.TaskDependenciesRowChangedEvent IsNot Nothing) Then
					RaiseEvent TaskDependenciesRowChanged(Me, New TaskDependenciesRowChangeEvent((CType(e.Row, TaskDependenciesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Me.TaskDependenciesRowChangingEvent IsNot Nothing) Then
					RaiseEvent TaskDependenciesRowChanging(Me, New TaskDependenciesRowChangeEvent((CType(e.Row, TaskDependenciesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Me.TaskDependenciesRowDeletedEvent IsNot Nothing) Then
					RaiseEvent TaskDependenciesRowDeleted(Me, New TaskDependenciesRowChangeEvent((CType(e.Row, TaskDependenciesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Me.TaskDependenciesRowDeletingEvent IsNot Nothing) Then
					RaiseEvent TaskDependenciesRowDeleting(Me, New TaskDependenciesRowChangeEvent((CType(e.Row, TaskDependenciesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub RemoveTaskDependenciesRow(ByVal row As TaskDependenciesRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New TasksDataSet()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "TaskDependenciesDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Partial Public Class TasksDataTable
			Inherits System.Data.TypedTableBase(Of TasksRow)

			Private columnId As Global.System.Data.DataColumn

			Private columnResourceId As Global.System.Data.DataColumn

			Private columnSubject As Global.System.Data.DataColumn

			Private columnDescription As Global.System.Data.DataColumn

			Private columnStartTime As Global.System.Data.DataColumn

			Private columnEndTime As Global.System.Data.DataColumn

			Private columnAllDay As Global.System.Data.DataColumn

			Private columnLabel As Global.System.Data.DataColumn

			Private columnLocation As Global.System.Data.DataColumn

			Private columnPercentComplete As Global.System.Data.DataColumn

			Private columnRecurrenceInfo As Global.System.Data.DataColumn

			Private columnReminderInfo As Global.System.Data.DataColumn

			Private columnEventType As Global.System.Data.DataColumn

			Private columnStatus As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New()
				Me.TableName = "Tasks"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnId
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property ResourceIdColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnResourceId
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property SubjectColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnSubject
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnDescription
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property StartTimeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnStartTime
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property EndTimeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnEndTime
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property AllDayColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnAllDay
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property LabelColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnLabel
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property LocationColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnLocation
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property PercentCompleteColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPercentComplete
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property RecurrenceInfoColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnRecurrenceInfo
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property ReminderInfoColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnReminderInfo
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property EventTypeColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnEventType
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnStatus
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Default Public ReadOnly Property Item(ByVal index As Integer) As TasksRow
				Get
					Return (CType(Me.Rows(index), TasksRow))
				End Get
			End Property

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event TasksRowChanging As TasksRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event TasksRowChanged As TasksRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event TasksRowDeleting As TasksRowChangeEventHandler

			<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Event TasksRowDeleted As TasksRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub AddTasksRow(ByVal row As TasksRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function AddTasksRow(ByVal ResourceId As Integer, ByVal Subject As String, ByVal Description As String, ByVal StartTime As System.DateTime, ByVal EndTime As System.DateTime, ByVal AllDay As Boolean, ByVal Label As Integer, ByVal Location As String, ByVal PercentComplete As Integer, ByVal RecurrenceInfo As String, ByVal ReminderInfo As String, ByVal EventType As Integer, ByVal Status As Integer) As TasksRow
				Dim rowTasksRow As TasksRow = (CType(Me.NewRow(), TasksRow))
				Dim columnValuesArray() As Object = { Nothing, ResourceId, Subject, Description, StartTime, EndTime, AllDay, Label, Location, PercentComplete, RecurrenceInfo, ReminderInfo, EventType, Status}
				rowTasksRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowTasksRow)
				Return rowTasksRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function FindById(ByVal Id As Integer) As TasksRow
				Return (CType(Me.Rows.Find(New Object() { Id}), TasksRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As TasksDataTable = (CType(MyBase.Clone(), TasksDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New TasksDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub InitVars()
				Me.columnId = MyBase.Columns("Id")
				Me.columnResourceId = MyBase.Columns("ResourceId")
				Me.columnSubject = MyBase.Columns("Subject")
				Me.columnDescription = MyBase.Columns("Description")
				Me.columnStartTime = MyBase.Columns("StartTime")
				Me.columnEndTime = MyBase.Columns("EndTime")
				Me.columnAllDay = MyBase.Columns("AllDay")
				Me.columnLabel = MyBase.Columns("Label")
				Me.columnLocation = MyBase.Columns("Location")
				Me.columnPercentComplete = MyBase.Columns("PercentComplete")
				Me.columnRecurrenceInfo = MyBase.Columns("RecurrenceInfo")
				Me.columnReminderInfo = MyBase.Columns("ReminderInfo")
				Me.columnEventType = MyBase.Columns("EventType")
				Me.columnStatus = MyBase.Columns("Status")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Private Sub InitClass()
				Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnId)
				Me.columnResourceId = New Global.System.Data.DataColumn("ResourceId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnResourceId)
				Me.columnSubject = New Global.System.Data.DataColumn("Subject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnSubject)
				Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDescription)
				Me.columnStartTime = New Global.System.Data.DataColumn("StartTime", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnStartTime)
				Me.columnEndTime = New Global.System.Data.DataColumn("EndTime", GetType(Global.System.DateTime), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEndTime)
				Me.columnAllDay = New Global.System.Data.DataColumn("AllDay", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnAllDay)
				Me.columnLabel = New Global.System.Data.DataColumn("Label", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLabel)
				Me.columnLocation = New Global.System.Data.DataColumn("Location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLocation)
				Me.columnPercentComplete = New Global.System.Data.DataColumn("PercentComplete", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPercentComplete)
				Me.columnRecurrenceInfo = New Global.System.Data.DataColumn("RecurrenceInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnRecurrenceInfo)
				Me.columnReminderInfo = New Global.System.Data.DataColumn("ReminderInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnReminderInfo)
				Me.columnEventType = New Global.System.Data.DataColumn("EventType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnEventType)
				Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnStatus)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnId}, True))
				Me.columnId.AutoIncrement = True
				Me.columnId.AutoIncrementSeed = -1
				Me.columnId.AutoIncrementStep = -1
				Me.columnId.AllowDBNull = False
				Me.columnId.Unique = True
				Me.columnSubject.MaxLength = 255
				Me.columnDescription.MaxLength = 536870910
				Me.columnLocation.MaxLength = 255
				Me.columnRecurrenceInfo.MaxLength = 536870910
				Me.columnReminderInfo.MaxLength = 536870910
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function NewTasksRow() As TasksRow
				Return (CType(Me.NewRow(), TasksRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New TasksRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(TasksRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Me.TasksRowChangedEvent IsNot Nothing) Then
					RaiseEvent TasksRowChanged(Me, New TasksRowChangeEvent((CType(e.Row, TasksRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Me.TasksRowChangingEvent IsNot Nothing) Then
					RaiseEvent TasksRowChanging(Me, New TasksRowChangeEvent((CType(e.Row, TasksRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Me.TasksRowDeletedEvent IsNot Nothing) Then
					RaiseEvent TasksRowDeleted(Me, New TasksRowChangeEvent((CType(e.Row, TasksRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Me.TasksRowDeletingEvent IsNot Nothing) Then
					RaiseEvent TasksRowDeleting(Me, New TasksRowChangeEvent((CType(e.Row, TasksRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub RemoveTasksRow(ByVal row As TasksRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New TasksDataSet()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "TasksDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Partial Public Class ResourcesRow
			Inherits System.Data.DataRow

			Private tableResources As ResourcesDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableResources = (CType(Me.Table, ResourcesDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Id() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableResources.IdColumn))))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableResources.IdColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property ParentId() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableResources.ParentIdColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ParentId' in table 'Resources' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableResources.ParentIdColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Description() As String
				Get
					Try
						Return (CStr(Me(Me.tableResources.DescriptionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Resources' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableResources.DescriptionColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property DaysPlanned() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableResources.DaysPlannedColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'DaysPlanned' in table 'Resources' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableResources.DaysPlannedColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsParentIdNull() As Boolean
				Return Me.IsNull(Me.tableResources.ParentIdColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetParentIdNull()
				Me(Me.tableResources.ParentIdColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsDescriptionNull() As Boolean
				Return Me.IsNull(Me.tableResources.DescriptionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetDescriptionNull()
				Me(Me.tableResources.DescriptionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsDaysPlannedNull() As Boolean
				Return Me.IsNull(Me.tableResources.DaysPlannedColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetDaysPlannedNull()
				Me(Me.tableResources.DaysPlannedColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Partial Public Class TaskDependenciesRow
			Inherits System.Data.DataRow

			Private tableTaskDependencies As TaskDependenciesDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableTaskDependencies = (CType(Me.Table, TaskDependenciesDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Id() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableTaskDependencies.IdColumn))))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableTaskDependencies.IdColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Parent() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableTaskDependencies.ParentColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Parent' in table 'TaskDependencies' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableTaskDependencies.ParentColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Dependent() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableTaskDependencies.DependentColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Dependent' in table 'TaskDependencies' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableTaskDependencies.DependentColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Type() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableTaskDependencies.TypeColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'TaskDependencies' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableTaskDependencies.TypeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsParentNull() As Boolean
				Return Me.IsNull(Me.tableTaskDependencies.ParentColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetParentNull()
				Me(Me.tableTaskDependencies.ParentColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsDependentNull() As Boolean
				Return Me.IsNull(Me.tableTaskDependencies.DependentColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetDependentNull()
				Me(Me.tableTaskDependencies.DependentColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsTypeNull() As Boolean
				Return Me.IsNull(Me.tableTaskDependencies.TypeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetTypeNull()
				Me(Me.tableTaskDependencies.TypeColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		Partial Public Class TasksRow
			Inherits System.Data.DataRow

			Private tableTasks As TasksDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableTasks = (CType(Me.Table, TasksDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Id() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableTasks.IdColumn))))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableTasks.IdColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property ResourceId() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableTasks.ResourceIdColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ResourceId' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableTasks.ResourceIdColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Subject() As String
				Get
					Try
						Return (CStr(Me(Me.tableTasks.SubjectColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Subject' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableTasks.SubjectColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Description() As String
				Get
					Try
						Return (CStr(Me(Me.tableTasks.DescriptionColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableTasks.DescriptionColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property StartTime() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableTasks.StartTimeColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'StartTime' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableTasks.StartTimeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property EndTime() As System.DateTime
				Get
					Try
						Return (CDate(Me(Me.tableTasks.EndTimeColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'EndTime' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As System.DateTime)
					Me(Me.tableTasks.EndTimeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property AllDay() As Boolean
				Get
					Try
						Return (CBool(Me(Me.tableTasks.AllDayColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'AllDay' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Boolean)
					Me(Me.tableTasks.AllDayColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Label() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableTasks.LabelColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Label' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableTasks.LabelColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Location() As String
				Get
					Try
						Return (CStr(Me(Me.tableTasks.LocationColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Location' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableTasks.LocationColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property PercentComplete() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableTasks.PercentCompleteColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'PercentComplete' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableTasks.PercentCompleteColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property RecurrenceInfo() As String
				Get
					Try
						Return (CStr(Me(Me.tableTasks.RecurrenceInfoColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'RecurrenceInfo' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableTasks.RecurrenceInfoColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property ReminderInfo() As String
				Get
					Try
						Return (CStr(Me(Me.tableTasks.ReminderInfoColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'ReminderInfo' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableTasks.ReminderInfoColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property EventType() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableTasks.EventTypeColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'EventType' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableTasks.EventTypeColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Property Status() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableTasks.StatusColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'Tasks' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableTasks.StatusColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsResourceIdNull() As Boolean
				Return Me.IsNull(Me.tableTasks.ResourceIdColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetResourceIdNull()
				Me(Me.tableTasks.ResourceIdColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsSubjectNull() As Boolean
				Return Me.IsNull(Me.tableTasks.SubjectColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetSubjectNull()
				Me(Me.tableTasks.SubjectColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsDescriptionNull() As Boolean
				Return Me.IsNull(Me.tableTasks.DescriptionColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetDescriptionNull()
				Me(Me.tableTasks.DescriptionColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsStartTimeNull() As Boolean
				Return Me.IsNull(Me.tableTasks.StartTimeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetStartTimeNull()
				Me(Me.tableTasks.StartTimeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsEndTimeNull() As Boolean
				Return Me.IsNull(Me.tableTasks.EndTimeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetEndTimeNull()
				Me(Me.tableTasks.EndTimeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsAllDayNull() As Boolean
				Return Me.IsNull(Me.tableTasks.AllDayColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetAllDayNull()
				Me(Me.tableTasks.AllDayColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsLabelNull() As Boolean
				Return Me.IsNull(Me.tableTasks.LabelColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetLabelNull()
				Me(Me.tableTasks.LabelColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsLocationNull() As Boolean
				Return Me.IsNull(Me.tableTasks.LocationColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetLocationNull()
				Me(Me.tableTasks.LocationColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsPercentCompleteNull() As Boolean
				Return Me.IsNull(Me.tableTasks.PercentCompleteColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetPercentCompleteNull()
				Me(Me.tableTasks.PercentCompleteColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsRecurrenceInfoNull() As Boolean
				Return Me.IsNull(Me.tableTasks.RecurrenceInfoColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetRecurrenceInfoNull()
				Me(Me.tableTasks.RecurrenceInfoColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsReminderInfoNull() As Boolean
				Return Me.IsNull(Me.tableTasks.ReminderInfoColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetReminderInfoNull()
				Me(Me.tableTasks.ReminderInfoColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsEventTypeNull() As Boolean
				Return Me.IsNull(Me.tableTasks.EventTypeColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetEventTypeNull()
				Me(Me.tableTasks.EventTypeColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function IsStatusNull() As Boolean
				Return Me.IsNull(Me.tableTasks.StatusColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub SetStatusNull()
				Me(Me.tableTasks.StatusColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Class ResourcesRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As ResourcesRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New(ByVal row As ResourcesRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Row() As ResourcesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Class TaskDependenciesRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As TaskDependenciesRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New(ByVal row As TaskDependenciesRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Row() As TaskDependenciesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Class TasksRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As TasksRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Sub New(ByVal row As TasksRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Row() As TasksRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
Namespace DevExpress.XtraScheduler.Demos.TasksDataSetTableAdapters


	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Partial Public Class ResourcesTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _transaction As Global.System.Data.OleDb.OleDbTransaction

		Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
			Get
				Return Me._transaction
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbTransaction)
				Me._transaction = value
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					Me.CommandCollection(i).Transaction = Me._transaction
					i = (i + 1)
				Loop
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.DeleteCommand IsNot Nothing)) Then
					Me.Adapter.DeleteCommand.Transaction = Me._transaction
				End If
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.InsertCommand IsNot Nothing)) Then
					Me.Adapter.InsertCommand.Transaction = Me._transaction
				End If
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.UpdateCommand IsNot Nothing)) Then
					Me.Adapter.UpdateCommand.Transaction = Me._transaction
				End If
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Resources"
			tableMapping.ColumnMappings.Add("Id", "Id")
			tableMapping.ColumnMappings.Add("ParentId", "ParentId")
			tableMapping.ColumnMappings.Add("Description", "Description")
			tableMapping.ColumnMappings.Add("DaysPlanned", "DaysPlanned")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Resources` WHERE ((`Id` = ?) AND ((? = 1 AND `ParentId` IS NULL) OR " & "(`ParentId` = ?)) AND ((? = 1 AND `DaysPlanned` IS NULL) OR (`DaysPlanned` = ?))" & ")"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParentId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ParentId", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParentId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ParentId", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DaysPlanned", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DaysPlanned", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DaysPlanned", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DaysPlanned", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Resources` (`ParentId`, `Description`, `DaysPlanned`) VALUES (?, ?, " & "?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParentId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ParentId", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DaysPlanned", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DaysPlanned", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Resources` SET `ParentId` = ?, `Description` = ?, `DaysPlanned` = ? WHERE" & " ((`Id` = ?) AND ((? = 1 AND `ParentId` IS NULL) OR (`ParentId` = ?)) AND ((? = " & "1 AND `DaysPlanned` IS NULL) OR (`DaysPlanned` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParentId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ParentId", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DaysPlanned", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DaysPlanned", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParentId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ParentId", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParentId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ParentId", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DaysPlanned", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DaysPlanned", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DaysPlanned", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DaysPlanned", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.TasksConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT Id, ParentId, Description, DaysPlanned FROM Resources"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As TasksDataSet.ResourcesDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As TasksDataSet.ResourcesDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New TasksDataSet.ResourcesDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As TasksDataSet.ResourcesDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As TasksDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Resources")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_Id As Integer, ByVal Original_ParentId? As Integer, ByVal Original_DaysPlanned? As Integer) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Fix(Original_Id)))
			If (Original_ParentId.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CInt(Fix(Original_ParentId.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Original_DaysPlanned.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CInt(Fix(Original_DaysPlanned.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal ParentId? As Integer, ByVal Description As String, ByVal DaysPlanned? As Integer) As Integer
			If (ParentId.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = (CInt(Fix(ParentId.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (Description Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Description))
			End If
			If (DaysPlanned.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = (CInt(Fix(DaysPlanned.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal ParentId? As Integer, ByVal Description As String, ByVal DaysPlanned? As Integer, ByVal Original_Id As Integer, ByVal Original_ParentId? As Integer, ByVal Original_DaysPlanned? As Integer) As Integer
			If (ParentId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CInt(Fix(ParentId.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (Description Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(Description))
			End If
			If (DaysPlanned.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CInt(Fix(DaysPlanned.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(3).Value = (CInt(Fix(Original_Id)))
			If (Original_ParentId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CInt(Fix(Original_ParentId.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (Original_DaysPlanned.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CInt(Fix(Original_DaysPlanned.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Partial Public Class TaskDependenciesTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _transaction As Global.System.Data.OleDb.OleDbTransaction

		Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
			Get
				Return Me._transaction
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbTransaction)
				Me._transaction = value
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					Me.CommandCollection(i).Transaction = Me._transaction
					i = (i + 1)
				Loop
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.DeleteCommand IsNot Nothing)) Then
					Me.Adapter.DeleteCommand.Transaction = Me._transaction
				End If
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.InsertCommand IsNot Nothing)) Then
					Me.Adapter.InsertCommand.Transaction = Me._transaction
				End If
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.UpdateCommand IsNot Nothing)) Then
					Me.Adapter.UpdateCommand.Transaction = Me._transaction
				End If
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "TaskDependencies"
			tableMapping.ColumnMappings.Add("Id", "Id")
			tableMapping.ColumnMappings.Add("Parent", "Parent")
			tableMapping.ColumnMappings.Add("Dependent", "Dependent")
			tableMapping.ColumnMappings.Add("Type", "Type")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `TaskDependencies` WHERE ((`Id` = ?) AND ((? = 1 AND `Parent` IS NULL" & ") OR (`Parent` = ?)) AND ((? = 1 AND `Dependent` IS NULL) OR (`Dependent` = ?)) " & "AND ((? = 1 AND `Type` IS NULL) OR (`Type` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Parent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Parent", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Parent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Parent", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Dependent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Dependent", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Dependent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Dependent", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Type", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Type", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Type", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Type", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `TaskDependencies` (`Parent`, `Dependent`, `Type`) VALUES (?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Parent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Parent", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Dependent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Dependent", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Type", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Type", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `TaskDependencies` SET `Parent` = ?, `Dependent` = ?, `Type` = ? WHERE ((`" & "Id` = ?) AND ((? = 1 AND `Parent` IS NULL) OR (`Parent` = ?)) AND ((? = 1 AND `D" & "ependent` IS NULL) OR (`Dependent` = ?)) AND ((? = 1 AND `Type` IS NULL) OR (`Ty" & "pe` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Parent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Parent", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Dependent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Dependent", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Type", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Type", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Parent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Parent", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Parent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Parent", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Dependent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Dependent", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Dependent", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Dependent", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Type", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Type", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Type", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Type", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.TasksConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT Id, Parent, Dependent, Type FROM TaskDependencies"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As TasksDataSet.TaskDependenciesDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As TasksDataSet.TaskDependenciesDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New TasksDataSet.TaskDependenciesDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As TasksDataSet.TaskDependenciesDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As TasksDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "TaskDependencies")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_Id As Integer, ByVal Original_Parent? As Integer, ByVal Original_Dependent? As Integer, ByVal Original_Type? As Integer) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Fix(Original_Id)))
			If (Original_Parent.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CInt(Fix(Original_Parent.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Original_Dependent.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CInt(Fix(Original_Dependent.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			If (Original_Type.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CInt(Fix(Original_Type.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal Parent? As Integer, ByVal Dependent? As Integer, ByVal Type? As Integer) As Integer
			If (Parent.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = (CInt(Fix(Parent.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (Dependent.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = (CInt(Fix(Dependent.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			End If
			If (Type.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = (CInt(Fix(Type.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal Parent? As Integer, ByVal Dependent? As Integer, ByVal Type? As Integer, ByVal Original_Id As Integer, ByVal Original_Parent? As Integer, ByVal Original_Dependent? As Integer, ByVal Original_Type? As Integer) As Integer
			If (Parent.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CInt(Fix(Parent.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (Dependent.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CInt(Fix(Dependent.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
			End If
			If (Type.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CInt(Fix(Type.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(3).Value = (CInt(Fix(Original_Id)))
			If (Original_Parent.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CInt(Fix(Original_Parent.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			End If
			If (Original_Dependent.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CInt(Fix(Original_Dependent.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			End If
			If (Original_Type.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CInt(Fix(Original_Type.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Partial Public Class TasksTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _transaction As Global.System.Data.OleDb.OleDbTransaction

		Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
			Get
				Return Me._transaction
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbTransaction)
				Me._transaction = value
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					Me.CommandCollection(i).Transaction = Me._transaction
					i = (i + 1)
				Loop
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.DeleteCommand IsNot Nothing)) Then
					Me.Adapter.DeleteCommand.Transaction = Me._transaction
				End If
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.InsertCommand IsNot Nothing)) Then
					Me.Adapter.InsertCommand.Transaction = Me._transaction
				End If
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.UpdateCommand IsNot Nothing)) Then
					Me.Adapter.UpdateCommand.Transaction = Me._transaction
				End If
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Tasks"
			tableMapping.ColumnMappings.Add("Id", "Id")
			tableMapping.ColumnMappings.Add("ResourceId", "ResourceId")
			tableMapping.ColumnMappings.Add("Subject", "Subject")
			tableMapping.ColumnMappings.Add("Description", "Description")
			tableMapping.ColumnMappings.Add("StartTime", "StartTime")
			tableMapping.ColumnMappings.Add("EndTime", "EndTime")
			tableMapping.ColumnMappings.Add("AllDay", "AllDay")
			tableMapping.ColumnMappings.Add("Label", "Label")
			tableMapping.ColumnMappings.Add("Location", "Location")
			tableMapping.ColumnMappings.Add("PercentComplete", "PercentComplete")
			tableMapping.ColumnMappings.Add("RecurrenceInfo", "RecurrenceInfo")
			tableMapping.ColumnMappings.Add("ReminderInfo", "ReminderInfo")
			tableMapping.ColumnMappings.Add("EventType", "EventType")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Tasks` WHERE ((`Id` = ?) AND ((? = 1 AND `ResourceId` IS NULL) OR (`ResourceId` = ?)) AND ((? = 1 AND `Subject` IS NULL) OR (`Subject` = ?)) AND ((? = 1 AND `StartTime` IS NULL) OR (`StartTime` = ?)) AND ((? = 1 AND `EndTime` IS NULL) OR (`EndTime` = ?)) AND ((? = 1 AND `AllDay` IS NULL) OR (`AllDay` = ?)) AND ((? = 1 AND `Label` IS NULL) OR (`Label` = ?)) AND ((? = 1 AND `Location` IS NULL) OR (`Location` = ?)) AND ((? = 1 AND `PercentComplete` IS NULL) OR (`PercentComplete` = ?)) AND ((? = 1 AND `EventType` IS NULL) OR (`EventType` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ResourceId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ResourceId", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ResourceId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ResourceId", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Subject", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_StartTime", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_StartTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EndTime", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EndTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AllDay", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AllDay", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Location", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PercentComplete", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PercentComplete", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PercentComplete", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PercentComplete", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Tasks` (`ResourceId`, `Subject`, `Description`, `StartTime`, `EndTim" & "e`, `AllDay`, `Label`, `Location`, `PercentComplete`, `RecurrenceInfo`, `Reminde" & "rInfo`, `EventType`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ResourceId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ResourceId", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("StartTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EndTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AllDay", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PercentComplete", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PercentComplete", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RecurrenceInfo", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RecurrenceInfo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReminderInfo", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReminderInfo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Tasks` SET `ResourceId` = ?, `Subject` = ?, `Description` = ?, `StartTime` = ?, `EndTime` = ?, `AllDay` = ?, `Label` = ?, `Location` = ?, `PercentComplete` = ?, `RecurrenceInfo` = ?, `ReminderInfo` = ?, `EventType` = ? WHERE ((`Id` = ?) AND ((? = 1 AND `ResourceId` IS NULL) OR (`ResourceId` = ?)) AND ((? = 1 AND `Subject` IS NULL) OR (`Subject` = ?)) AND ((? = 1 AND `StartTime` IS NULL) OR (`StartTime` = ?)) AND ((? = 1 AND `EndTime` IS NULL) OR (`EndTime` = ?)) AND ((? = 1 AND `AllDay` IS NULL) OR (`AllDay` = ?)) AND ((? = 1 AND `Label` IS NULL) OR (`Label` = ?)) AND ((? = 1 AND `Location` IS NULL) OR (`Location` = ?)) AND ((? = 1 AND `PercentComplete` IS NULL) OR (`PercentComplete` = ?)) AND ((? = 1 AND `EventType` IS NULL) OR (`EventType` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ResourceId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ResourceId", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Description", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Description", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("StartTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EndTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AllDay", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PercentComplete", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PercentComplete", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RecurrenceInfo", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "RecurrenceInfo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ReminderInfo", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ReminderInfo", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ResourceId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ResourceId", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ResourceId", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ResourceId", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Subject", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Subject", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Subject", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_StartTime", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_StartTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "StartTime", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EndTime", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EndTime", Global.System.Data.OleDb.OleDbType.Date, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EndTime", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AllDay", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AllDay", Global.System.Data.OleDb.OleDbType.Boolean, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "AllDay", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Label", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Label", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Location", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Location", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Location", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PercentComplete", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PercentComplete", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PercentComplete", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PercentComplete", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_EventType", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "EventType", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.TasksConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT Id, ResourceId, Subject, Description, StartTime, EndTime, AllDay, Label, L" & "ocation, PercentComplete, RecurrenceInfo, ReminderInfo, EventType FROM Tasks"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As TasksDataSet.TasksDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As TasksDataSet.TasksDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New TasksDataSet.TasksDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As TasksDataSet.TasksDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As TasksDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Tasks")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_Id As Integer, ByVal Original_ResourceId? As Integer, ByVal Original_Subject As String, ByVal Original_StartTime? As Global.System.DateTime, ByVal Original_EndTime? As Global.System.DateTime, ByVal Original_AllDay As Boolean, ByVal Original_Label? As Integer, ByVal Original_Location As String, ByVal Original_PercentComplete? As Integer, ByVal Original_EventType? As Integer) As Integer
			Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Fix(Original_Id)))
			If (Original_ResourceId.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CInt(Fix(Original_ResourceId.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
			End If
			If (Original_Subject Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_Subject))
			End If
			If (Original_StartTime.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CDate(Original_StartTime.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (Original_EndTime.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CDate(Original_EndTime.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
			Me.Adapter.DeleteCommand.Parameters(10).Value = (CBool(Original_AllDay))
			If (Original_Label.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CInt(Fix(Original_Label.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
			End If
			If (Original_Location Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CStr(Original_Location))
			End If
			If (Original_PercentComplete.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CInt(Fix(Original_PercentComplete.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
			End If
			If (Original_EventType.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(18).Value = (CInt(Fix(Original_EventType.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal ResourceId? As Integer, ByVal Subject As String, ByVal Description As String, ByVal StartTime? As Global.System.DateTime, ByVal EndTime? As Global.System.DateTime, ByVal AllDay As Boolean, ByVal Label? As Integer, ByVal Location As String, ByVal PercentComplete? As Integer, ByVal RecurrenceInfo As String, ByVal ReminderInfo As String, ByVal EventType? As Integer) As Integer
			If (ResourceId.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = (CInt(Fix(ResourceId.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (Subject Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Subject))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = (CStr(Description))
			End If
			If (StartTime.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = (CDate(StartTime.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			End If
			If (EndTime.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = (CDate(EndTime.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.InsertCommand.Parameters(5).Value = (CBool(AllDay))
			If (Label.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = (CInt(Fix(Label.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (Location Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = (CStr(Location))
			End If
			If (PercentComplete.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = (CInt(Fix(PercentComplete.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
			End If
			If (RecurrenceInfo Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(RecurrenceInfo))
			End If
			If (ReminderInfo Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(ReminderInfo))
			End If
			If (EventType.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(11).Value = (CInt(Fix(EventType.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal ResourceId? As Integer, ByVal Subject As String, ByVal Description As String, ByVal StartTime? As Global.System.DateTime, ByVal EndTime? As Global.System.DateTime, ByVal AllDay As Boolean, ByVal Label? As Integer, ByVal Location As String, ByVal PercentComplete? As Integer, ByVal RecurrenceInfo As String, ByVal ReminderInfo As String, ByVal EventType? As Integer, ByVal Original_Id As Integer, ByVal Original_ResourceId? As Integer, ByVal Original_Subject As String, ByVal Original_StartTime? As Global.System.DateTime, ByVal Original_EndTime? As Global.System.DateTime, ByVal Original_AllDay As Boolean, ByVal Original_Label? As Integer, ByVal Original_Location As String, ByVal Original_PercentComplete? As Integer, ByVal Original_EventType? As Integer) As Integer
			If (ResourceId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CInt(Fix(ResourceId.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (Subject Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(Subject))
			End If
			If (Description Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CStr(Description))
			End If
			If (StartTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CDate(StartTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			End If
			If (EndTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CDate(EndTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(5).Value = (CBool(AllDay))
			If (Label.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CInt(Fix(Label.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (Location Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CStr(Location))
			End If
			If (PercentComplete.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CInt(Fix(PercentComplete.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
			End If
			If (RecurrenceInfo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(RecurrenceInfo))
			End If
			If (ReminderInfo Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(ReminderInfo))
			End If
			If (EventType.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CInt(Fix(EventType.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(12).Value = (CInt(Fix(Original_Id)))
			If (Original_ResourceId.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CInt(Fix(Original_ResourceId.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
			End If
			If (Original_Subject Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CStr(Original_Subject))
			End If
			If (Original_StartTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CDate(Original_StartTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
			End If
			If (Original_EndTime.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CDate(Original_EndTime.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
			End If
			Me.Adapter.UpdateCommand.Parameters(21).Value = (CObj(0))
			Me.Adapter.UpdateCommand.Parameters(22).Value = (CBool(Original_AllDay))
			If (Original_Label.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CInt(Fix(Original_Label.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
			End If
			If (Original_Location Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CStr(Original_Location))
			End If
			If (Original_PercentComplete.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CInt(Fix(Original_PercentComplete.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
			End If
			If (Original_EventType.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(30).Value = (CInt(Fix(Original_EventType.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class

	''' <summary>
	'''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
	'''</summary>
	<Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" & "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")> _
	Partial Public Class TableAdapterManager
		Inherits System.ComponentModel.Component

		Private _updateOrder As UpdateOrderOption

		Private _resourcesTableAdapter As ResourcesTableAdapter

		Private _taskDependenciesTableAdapter As TaskDependenciesTableAdapter

		Private _tasksTableAdapter As TasksTableAdapter

		Private _backupDataSetBeforeUpdate As Boolean

		Private _connection As Global.System.Data.IDbConnection

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property UpdateOrder() As UpdateOrderOption
			Get
				Return Me._updateOrder
			End Get
			Set(ByVal value As UpdateOrderOption)
				Me._updateOrder = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & "a", "System.Drawing.Design.UITypeEditor")> _
		Public Property ResourcesTableAdapter() As ResourcesTableAdapter
			Get
				Return Me._resourcesTableAdapter
			End Get
			Set(ByVal value As ResourcesTableAdapter)
				Me._resourcesTableAdapter = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & "a", "System.Drawing.Design.UITypeEditor")> _
		Public Property TaskDependenciesTableAdapter() As TaskDependenciesTableAdapter
			Get
				Return Me._taskDependenciesTableAdapter
			End Get
			Set(ByVal value As TaskDependenciesTableAdapter)
				Me._taskDependenciesTableAdapter = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & "a", "System.Drawing.Design.UITypeEditor")> _
		Public Property TasksTableAdapter() As TasksTableAdapter
			Get
				Return Me._tasksTableAdapter
			End Get
			Set(ByVal value As TasksTableAdapter)
				Me._tasksTableAdapter = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property BackupDataSetBeforeUpdate() As Boolean
			Get
				Return Me._backupDataSetBeforeUpdate
			End Get
			Set(ByVal value As Boolean)
				Me._backupDataSetBeforeUpdate = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False)> _
		Public Property Connection() As Global.System.Data.IDbConnection
			Get
				If (Me._connection IsNot Nothing) Then
					Return Me._connection
				End If
				If ((Me._resourcesTableAdapter IsNot Nothing) AndAlso (Me._resourcesTableAdapter.Connection IsNot Nothing)) Then
					Return Me._resourcesTableAdapter.Connection
				End If
				If ((Me._taskDependenciesTableAdapter IsNot Nothing) AndAlso (Me._taskDependenciesTableAdapter.Connection IsNot Nothing)) Then
					Return Me._taskDependenciesTableAdapter.Connection
				End If
				If ((Me._tasksTableAdapter IsNot Nothing) AndAlso (Me._tasksTableAdapter.Connection IsNot Nothing)) Then
					Return Me._tasksTableAdapter.Connection
				End If
				Return Nothing
			End Get
			Set(ByVal value As System.Data.IDbConnection)
				Me._connection = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Global.System.ComponentModel.Browsable(False)> _
		Public ReadOnly Property TableAdapterInstanceCount() As Integer
			Get
				Dim count As Integer = 0
				If (Me._resourcesTableAdapter IsNot Nothing) Then
					count = (count + 1)
				End If
				If (Me._taskDependenciesTableAdapter IsNot Nothing) Then
					count = (count + 1)
				End If
				If (Me._tasksTableAdapter IsNot Nothing) Then
					count = (count + 1)
				End If
				Return count
			End Get
		End Property

		''' <summary>
		'''Update rows in top-down order.
		'''</summary>
		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function UpdateUpdatedRows(ByVal dataSet As TasksDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
			Dim result As Integer = 0
			If (Me._resourcesTableAdapter IsNot Nothing) Then
				Dim updatedRows() As Global.System.Data.DataRow = dataSet.Resources.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
				updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
				If ((updatedRows IsNot Nothing) AndAlso (0 < updatedRows.Length)) Then
					result = (result + Me._resourcesTableAdapter.Update(updatedRows))
					allChangedRows.AddRange(updatedRows)
				End If
			End If
			If (Me._taskDependenciesTableAdapter IsNot Nothing) Then
				Dim updatedRows() As Global.System.Data.DataRow = dataSet.TaskDependencies.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
				updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
				If ((updatedRows IsNot Nothing) AndAlso (0 < updatedRows.Length)) Then
					result = (result + Me._taskDependenciesTableAdapter.Update(updatedRows))
					allChangedRows.AddRange(updatedRows)
				End If
			End If
			If (Me._tasksTableAdapter IsNot Nothing) Then
				Dim updatedRows() As Global.System.Data.DataRow = dataSet.Tasks.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
				updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
				If ((updatedRows IsNot Nothing) AndAlso (0 < updatedRows.Length)) Then
					result = (result + Me._tasksTableAdapter.Update(updatedRows))
					allChangedRows.AddRange(updatedRows)
				End If
			End If
			Return result
		End Function

		''' <summary>
		'''Insert rows in top-down order.
		'''</summary>
		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function UpdateInsertedRows(ByVal dataSet As TasksDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
			Dim result As Integer = 0
			If (Me._resourcesTableAdapter IsNot Nothing) Then
				Dim addedRows() As Global.System.Data.DataRow = dataSet.Resources.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
				If ((addedRows IsNot Nothing) AndAlso (0 < addedRows.Length)) Then
					result = (result + Me._resourcesTableAdapter.Update(addedRows))
					allAddedRows.AddRange(addedRows)
				End If
			End If
			If (Me._taskDependenciesTableAdapter IsNot Nothing) Then
				Dim addedRows() As Global.System.Data.DataRow = dataSet.TaskDependencies.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
				If ((addedRows IsNot Nothing) AndAlso (0 < addedRows.Length)) Then
					result = (result + Me._taskDependenciesTableAdapter.Update(addedRows))
					allAddedRows.AddRange(addedRows)
				End If
			End If
			If (Me._tasksTableAdapter IsNot Nothing) Then
				Dim addedRows() As Global.System.Data.DataRow = dataSet.Tasks.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
				If ((addedRows IsNot Nothing) AndAlso (0 < addedRows.Length)) Then
					result = (result + Me._tasksTableAdapter.Update(addedRows))
					allAddedRows.AddRange(addedRows)
				End If
			End If
			Return result
		End Function

		''' <summary>
		'''Delete rows in bottom-up order.
		'''</summary>
		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function UpdateDeletedRows(ByVal dataSet As TasksDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
			Dim result As Integer = 0
			If (Me._tasksTableAdapter IsNot Nothing) Then
				Dim deletedRows() As Global.System.Data.DataRow = dataSet.Tasks.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
				If ((deletedRows IsNot Nothing) AndAlso (0 < deletedRows.Length)) Then
					result = (result + Me._tasksTableAdapter.Update(deletedRows))
					allChangedRows.AddRange(deletedRows)
				End If
			End If
			If (Me._taskDependenciesTableAdapter IsNot Nothing) Then
				Dim deletedRows() As Global.System.Data.DataRow = dataSet.TaskDependencies.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
				If ((deletedRows IsNot Nothing) AndAlso (0 < deletedRows.Length)) Then
					result = (result + Me._taskDependenciesTableAdapter.Update(deletedRows))
					allChangedRows.AddRange(deletedRows)
				End If
			End If
			If (Me._resourcesTableAdapter IsNot Nothing) Then
				Dim deletedRows() As Global.System.Data.DataRow = dataSet.Resources.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
				If ((deletedRows IsNot Nothing) AndAlso (0 < deletedRows.Length)) Then
					result = (result + Me._resourcesTableAdapter.Update(deletedRows))
					allChangedRows.AddRange(deletedRows)
				End If
			End If
			Return result
		End Function

		''' <summary>
		'''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
		'''</summary>
		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
			If ((updatedRows Is Nothing) OrElse (updatedRows.Length < 1)) Then
				Return updatedRows
			End If
			If ((allAddedRows Is Nothing) OrElse (allAddedRows.Count < 1)) Then
				Return updatedRows
			End If
			Dim realUpdatedRows As New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
			Dim i As Integer = 0
			Do While (i < updatedRows.Length)
				Dim row As Global.System.Data.DataRow = updatedRows(i)
				If (allAddedRows.Contains(row) = False) Then
					realUpdatedRows.Add(row)
				End If
				i = (i + 1)
			Loop
			Return realUpdatedRows.ToArray()
		End Function

		''' <summary>
		'''Update all changes to the dataset.
		'''</summary>
		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Overridable Function UpdateAll(ByVal dataSet As TasksDataSet) As Integer
			If (dataSet Is Nothing) Then
				Throw New Global.System.ArgumentNullException("dataSet")
			End If
			If (dataSet.HasChanges() = False) Then
				Return 0
			End If
			If ((Me._resourcesTableAdapter IsNot Nothing) AndAlso (Me.MatchTableAdapterConnection(Me._resourcesTableAdapter.Connection) = False)) Then
				Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & "tring.")
			End If
			If ((Me._taskDependenciesTableAdapter IsNot Nothing) AndAlso (Me.MatchTableAdapterConnection(Me._taskDependenciesTableAdapter.Connection) = False)) Then
				Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & "tring.")
			End If
			If ((Me._tasksTableAdapter IsNot Nothing) AndAlso (Me.MatchTableAdapterConnection(Me._tasksTableAdapter.Connection) = False)) Then
				Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & "tring.")
			End If
			Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
			If (workConnection Is Nothing) Then
				Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" & "ger TableAdapter property to a valid TableAdapter instance.")
			End If
			Dim workConnOpened As Boolean = False
			If ((workConnection.State And Global.System.Data.ConnectionState.Broken) = Global.System.Data.ConnectionState.Broken) Then
				workConnection.Close()
			End If
			If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
				workConnection.Open()
				workConnOpened = True
			End If
			Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction()
			If (workTransaction Is Nothing) Then
				Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" & "ctions or the current state is not allowing the transaction to begin.")
			End If
			Dim allChangedRows As New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
			Dim allAddedRows As New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
			Dim adaptersWithAcceptChangesDuringUpdate As New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
			Dim revertConnections As New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
			Dim result As Integer = 0
			Dim backupDataSet As Global.System.Data.DataSet = Nothing
			If Me.BackupDataSetBeforeUpdate Then
				backupDataSet = New Global.System.Data.DataSet()
				backupDataSet.Merge(dataSet)
			End If
			Try
				' ---- Prepare for update -----------
				'
				If (Me._resourcesTableAdapter IsNot Nothing) Then
					revertConnections.Add(Me._resourcesTableAdapter, Me._resourcesTableAdapter.Connection)
					Me._resourcesTableAdapter.Connection = (CType(workConnection, Global.System.Data.OleDb.OleDbConnection))
					Me._resourcesTableAdapter.Transaction = (CType(workTransaction, Global.System.Data.OleDb.OleDbTransaction))
					If Me._resourcesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
						Me._resourcesTableAdapter.Adapter.AcceptChangesDuringUpdate = False
						adaptersWithAcceptChangesDuringUpdate.Add(Me._resourcesTableAdapter.Adapter)
					End If
				End If
				If (Me._taskDependenciesTableAdapter IsNot Nothing) Then
					revertConnections.Add(Me._taskDependenciesTableAdapter, Me._taskDependenciesTableAdapter.Connection)
					Me._taskDependenciesTableAdapter.Connection = (CType(workConnection, Global.System.Data.OleDb.OleDbConnection))
					Me._taskDependenciesTableAdapter.Transaction = (CType(workTransaction, Global.System.Data.OleDb.OleDbTransaction))
					If Me._taskDependenciesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
						Me._taskDependenciesTableAdapter.Adapter.AcceptChangesDuringUpdate = False
						adaptersWithAcceptChangesDuringUpdate.Add(Me._taskDependenciesTableAdapter.Adapter)
					End If
				End If
				If (Me._tasksTableAdapter IsNot Nothing) Then
					revertConnections.Add(Me._tasksTableAdapter, Me._tasksTableAdapter.Connection)
					Me._tasksTableAdapter.Connection = (CType(workConnection, Global.System.Data.OleDb.OleDbConnection))
					Me._tasksTableAdapter.Transaction = (CType(workTransaction, Global.System.Data.OleDb.OleDbTransaction))
					If Me._tasksTableAdapter.Adapter.AcceptChangesDuringUpdate Then
						Me._tasksTableAdapter.Adapter.AcceptChangesDuringUpdate = False
						adaptersWithAcceptChangesDuringUpdate.Add(Me._tasksTableAdapter.Adapter)
					End If
				End If
				' 
				'---- Perform updates -----------
				'
				If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
					result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
					result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
				Else
					result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
					result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
				End If
				result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
				' 
				'---- Commit updates -----------
				'
				workTransaction.Commit()
				If (0 < allAddedRows.Count) Then
					Dim rows(allAddedRows.Count - 1) As Global.System.Data.DataRow
					allAddedRows.CopyTo(rows)
					Dim i As Integer = 0
					Do While (i < rows.Length)
						Dim row As Global.System.Data.DataRow = rows(i)
						row.AcceptChanges()
						i = (i + 1)
					Loop
				End If
				If (0 < allChangedRows.Count) Then
					Dim rows(allChangedRows.Count - 1) As Global.System.Data.DataRow
					allChangedRows.CopyTo(rows)
					Dim i As Integer = 0
					Do While (i < rows.Length)
						Dim row As Global.System.Data.DataRow = rows(i)
						row.AcceptChanges()
						i = (i + 1)
					Loop
				End If
			Catch ex As Global.System.Exception
				workTransaction.Rollback()
				' ---- Restore the dataset -----------
				If Me.BackupDataSetBeforeUpdate Then
					Global.System.Diagnostics.Debug.Assert((backupDataSet IsNot Nothing))
					dataSet.Clear()
					dataSet.Merge(backupDataSet)
				Else
					If (0 < allAddedRows.Count) Then
						Dim rows(allAddedRows.Count - 1) As Global.System.Data.DataRow
						allAddedRows.CopyTo(rows)
						Dim i As Integer = 0
						Do While (i < rows.Length)
							Dim row As Global.System.Data.DataRow = rows(i)
							row.AcceptChanges()
							row.SetAdded()
							i = (i + 1)
						Loop
					End If
				End If
				Throw ex
			Finally
				If workConnOpened Then
					workConnection.Close()
				End If
				If (Me._resourcesTableAdapter IsNot Nothing) Then
					Me._resourcesTableAdapter.Connection = (CType(revertConnections(Me._resourcesTableAdapter), Global.System.Data.OleDb.OleDbConnection))
					Me._resourcesTableAdapter.Transaction = Nothing
				End If
				If (Me._taskDependenciesTableAdapter IsNot Nothing) Then
					Me._taskDependenciesTableAdapter.Connection = (CType(revertConnections(Me._taskDependenciesTableAdapter), Global.System.Data.OleDb.OleDbConnection))
					Me._taskDependenciesTableAdapter.Transaction = Nothing
				End If
				If (Me._tasksTableAdapter IsNot Nothing) Then
					Me._tasksTableAdapter.Connection = (CType(revertConnections(Me._tasksTableAdapter), Global.System.Data.OleDb.OleDbConnection))
					Me._tasksTableAdapter.Transaction = Nothing
				End If
				If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
					Dim adapters(adaptersWithAcceptChangesDuringUpdate.Count - 1) As Global.System.Data.Common.DataAdapter
					adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
					Dim i As Integer = 0
					Do While (i < adapters.Length)
						Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
						adapter.AcceptChangesDuringUpdate = True
						i = (i + 1)
					Loop
				End If
			End Try
			Return result
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
			Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
			If (Me._connection IsNot Nothing) Then
				Return True
			End If
			If ((Me.Connection Is Nothing) OrElse (inputConnection Is Nothing)) Then
				Return True
			End If
			If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
				Return True
			End If
			Return False
		End Function

		''' <summary>
		'''Update Order Option
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Enum UpdateOrderOption

			InsertUpdateDelete = 0

			UpdateInsertDelete = 1
		End Enum

		''' <summary>
		'''Used to sort self-referenced table's rows
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Class SelfReferenceComparer
			Inherits Object
			Implements System.Collections.Generic.IComparer(Of System.Data.DataRow)

			Private _relation As Global.System.Data.DataRelation

			Private _childFirst As Integer

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
				Me._relation = relation
				If childFirst Then
					Me._childFirst = -1
				Else
					Me._childFirst = 1
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Private Function GetRoot(ByVal row As Global.System.Data.DataRow, <System.Runtime.InteropServices.Out()> ByRef distance As Integer) As Global.System.Data.DataRow
				Global.System.Diagnostics.Debug.Assert((row IsNot Nothing))
				Dim root As Global.System.Data.DataRow = row
				distance = 0

				Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
				traversedRows(row) = row

				Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Default)
				Do While ((parent IsNot Nothing) AndAlso (traversedRows.ContainsKey(parent) = False))
					distance = (distance + 1)
					root = parent
					traversedRows(parent) = parent
					parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Default)
				Loop

				If (distance = 0) Then
					traversedRows.Clear()
					traversedRows(row) = row
					parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
					Do While ((parent IsNot Nothing) AndAlso (traversedRows.ContainsKey(parent) = False))
						distance = (distance + 1)
						root = parent
						traversedRows(parent) = parent
						parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
					Loop
				End If

				Return root
			End Function

			Private Function IComparer_Compare(ByVal x As Global.System.Data.DataRow, ByVal y As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
				Return Compare(x, y)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
			Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer
				If Object.ReferenceEquals(row1, row2) Then
					Return 0
				End If
				If (row1 Is Nothing) Then
					Return -1
				End If
				If (row2 Is Nothing) Then
					Return 1
				End If

				Dim distance1 As Integer = 0
				Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

				Dim distance2 As Integer = 0
				Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

				If Object.ReferenceEquals(root1, root2) Then
					Return (Me._childFirst * distance1.CompareTo(distance2))
				Else
					Global.System.Diagnostics.Debug.Assert(((root1.Table IsNot Nothing) AndAlso (root2.Table IsNot Nothing)))
					If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
						Return -1
					Else
						Return 1
					End If
				End If
			End Function
		End Class
	End Class
End Namespace

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
