'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System.Data.Linq
	Imports System.Data.Linq.Mapping
	Imports System.Data
	Imports System.Collections.Generic
	Imports System.Reflection
	Imports System.Linq
	Imports System.Linq.Expressions
	Imports System.ComponentModel
	Imports System
Namespace DashboardDemos.Core


	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FinancialDemo")> _
	Partial Public Class FinancialDemoDataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertDailyData(ByVal instance As DailyData)
	End Sub
	Partial Private Sub UpdateDailyData(ByVal instance As DailyData)
	End Sub
	Partial Private Sub DeleteDailyData(ByVal instance As DailyData)
	End Sub
	#End Region

		Public Sub New()
			MyBase.New(My.Settings.Default.FinanceDemoConnectionString, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property DailyDatas() As System.Data.Linq.Table(Of DailyData)
			Get
				Return Me.GetTable(Of DailyData)()
			End Get
		End Property

		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CalculateProfitLoss")> _
		Public Function CalculateProfitLoss() As Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, (CType(MethodInfo.GetCurrentMethod(), MethodInfo)))
			Return (CInt(Fix(result.ReturnValue)))
		End Function

		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateHistoricalData")> _
		Public Function UpdateHistoricalData() As Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, (CType(MethodInfo.GetCurrentMethod(), MethodInfo)))
			Return (CInt(Fix(result.ReturnValue)))
		End Function
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DailyData")> _
	Partial Public Class DailyData
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _id As Integer

		Private _Date As System.DateTime

		Private _Open As Double

		Private _High As Double

		Private _Low As Double

		Private _Close As Double

		Private _Volume As Integer

		Private _Ticker As String

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnidChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnidChanged()
	End Sub
	Partial Private Sub OnDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnDateChanged()
	End Sub
	Partial Private Sub OnOpenChanging(ByVal value As Double)
	End Sub
	Partial Private Sub OnOpenChanged()
	End Sub
	Partial Private Sub OnHighChanging(ByVal value As Double)
	End Sub
	Partial Private Sub OnHighChanged()
	End Sub
	Partial Private Sub OnLowChanging(ByVal value As Double)
	End Sub
	Partial Private Sub OnLowChanged()
	End Sub
	Partial Private Sub OnCloseChanging(ByVal value As Double)
	End Sub
	Partial Private Sub OnCloseChanged()
	End Sub
	Partial Private Sub OnVolumeChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnVolumeChanged()
	End Sub
	Partial Private Sub OnTickerChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTickerChanged()
	End Sub
	#End Region

		Public Sub New()
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set(ByVal value As Integer)
				If (Me._id <> value) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging()
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date", DbType:="SmallDateTime NOT NULL")> _
		Public Property [Date]() As System.DateTime
			Get
				Return Me._Date
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._Date <> value) Then
					Me.OnDateChanging(value)
					Me.SendPropertyChanging()
					Me._Date = value
					Me.SendPropertyChanged("Date")
					Me.OnDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Open]", Storage:="_Open", DbType:="Float NOT NULL")> _
		Public Property Open() As Double
			Get
				Return Me._Open
			End Get
			Set(ByVal value As Double)
				If (Me._Open <> value) Then
					Me.OnOpenChanging(value)
					Me.SendPropertyChanging()
					Me._Open = value
					Me.SendPropertyChanged("Open")
					Me.OnOpenChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_High", DbType:="Float NOT NULL")> _
		Public Property High() As Double
			Get
				Return Me._High
			End Get
			Set(ByVal value As Double)
				If (Me._High <> value) Then
					Me.OnHighChanging(value)
					Me.SendPropertyChanging()
					Me._High = value
					Me.SendPropertyChanged("High")
					Me.OnHighChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Low", DbType:="Float NOT NULL")> _
		Public Property Low() As Double
			Get
				Return Me._Low
			End Get
			Set(ByVal value As Double)
				If (Me._Low <> value) Then
					Me.OnLowChanging(value)
					Me.SendPropertyChanging()
					Me._Low = value
					Me.SendPropertyChanged("Low")
					Me.OnLowChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Close]", Storage:="_Close", DbType:="Float NOT NULL")> _
		Public Property Close() As Double
			Get
				Return Me._Close
			End Get
			Set(ByVal value As Double)
				If (Me._Close <> value) Then
					Me.OnCloseChanging(value)
					Me.SendPropertyChanging()
					Me._Close = value
					Me.SendPropertyChanged("Close")
					Me.OnCloseChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Volume", DbType:="Int NOT NULL")> _
		Public Property Volume() As Integer
			Get
				Return Me._Volume
			End Get
			Set(ByVal value As Integer)
				If (Me._Volume <> value) Then
					Me.OnVolumeChanging(value)
					Me.SendPropertyChanging()
					Me._Volume = value
					Me.SendPropertyChanged("Volume")
					Me.OnVolumeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ticker", DbType:="NVarChar(5) NOT NULL", CanBeNull:=False)> _
		Public Property Ticker() As String
			Get
				Return Me._Ticker
			End Get
			Set(ByVal value As String)
				If (Me._Ticker <> value) Then
					Me.OnTickerChanging(value)
					Me.SendPropertyChanging()
					Me._Ticker = value
					Me.SendPropertyChanged("Ticker")
					Me.OnTickerChanged()
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
