@using DevExpress.Web.Demos
@model string
<script type="text/javascript" src="@Url.Content("~/Scripts/Viewer.js")"></script>
<a href="javascript:void(0)" class="ThemeButton" title="Current Viewer: @Request.Params[ViewerSelectorState.Key]" id="ViewerSelectorPopupButton" style="margin-right: 34px">
    @Html.DevExpress().Image(s => {
    s.Name = "tViewerSelectorPic";
    s.Properties.SpriteCssClass = "Icon ViewerSelectorIcon";
}).GetHtml()
    VIEWER
    @Html.DevExpress().Image(s => {
    s.Name = "tViewerSelectorGlyph";
    s.Properties.SpriteCssClass = "Glyph";
}).GetHtml()
</a>

@Html.DevExpress().PopupControl(
    settings => {
        settings.Name = "ViewerSelectorPopup";
        settings.EnableTheming = false;
        settings.ControlStyle.CssClass = "ThemeSelectorPopup ViewerSelectorPopup";
        settings.ShowShadow = false;
        settings.ShowHeader = false;
        settings.PopupAnimationType = AnimationType.None;

        settings.PopupElementID = "ViewerSelectorPopupButton";
        settings.PopupHorizontalAlign = PopupHorizontalAlign.RightSides;
        settings.PopupVerticalAlign = PopupVerticalAlign.TopSides;
        settings.PopupHorizontalOffset = 24;
        settings.PopupVerticalOffset = -19;
        settings.PopupAlignCorrection = PopupAlignCorrection.Disabled;

        settings.PopupAction = PopupAction.LeftMouseClick;
        settings.ClientSideEvents.Init = "DXSelectorPopupContainer_Init";

        settings.SetContent(() => {
            ViewContext.Writer.Write("<div class=\"ButtonWrapper\"><div class=\"ThemeButtonBorder\"></div></div>");
            ViewContext.Writer.Write("<div class=\"ButtonWrapperBtmBorder\"></div><b class=\"Clear\"></b>");
            ViewContext.Writer.Write("<div class=\"ContainerWrapper ViewerSelectorContainerWrapper\"><div class=\"ThemeContainer ViewerSelectorContainer\">");

            Html.DevExpress().Menu(menuSettings => {
                menuSettings.Name = "ViewerSelectorMenu";
                menuSettings.ControlStyle.CssClass = "ThemeGroupMenu";
                menuSettings.Orientation = Orientation.Vertical;
                menuSettings.EnableTheming = false;
                menuSettings.ItemImagePosition = ImagePosition.Left;
                foreach(ViewerSelectorState.Item selectorItem in ViewerSelectorState.Items) {
                    if(selectorItem.Name != ViewerSelectorState.ClassicViewer || (selectorItem.Name == ViewerSelectorState.ClassicViewer && Model != "PollingReport")) {
                        menuSettings.Items.Add(menuItem => {
                            menuItem.Name = selectorItem.Name;
                            menuItem.Selected = selectorItem.Name == Request.Params[ViewerSelectorState.Key];
                            menuItem.NavigateUrl = selectorItem.GenerateUrl(Request.Url);
                            menuItem.Image.Url = @Url.Content("~/Content/1x1.gif");
                        });
                    }
                }
                menuSettings.SetItemTextTemplateContent(c => {
                    var selectorItem = ViewerSelectorState.GetByName(c.Item.Name);
                    ViewContext.Writer.Write(string.Format("<div class=\"ThemeIco {0}\"></div>{1}", selectorItem.CssClass, selectorItem.Text));
                });
            }).Render();
            ViewContext.Writer.Write("<b class=\"Clear\"></b></div></div>");
        });
    }).GetHtml()

@if(@Request.Params[ViewerSelectorState.Key] != ViewerSelectorState.ClassicViewer) {
    <script>
        (function() {
            var themeButton = document.getElementById("ThemeButton");
            if(themeButton) {
                themeButton.parentElement.removeChild(themeButton);
                document.getElementById('ViewerSelectorPopupButton').style.marginRight = '0';
            }
        })();
    </script>
}