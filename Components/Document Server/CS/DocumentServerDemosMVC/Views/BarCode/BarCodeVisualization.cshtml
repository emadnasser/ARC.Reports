@model BarCodeVisualizationModel
@using DevExpress.BarCodes;

<script type="text/javascript">
    // <![CDATA[
    function UpdateImage() {
        var values = ObtainEditorsValuesCache();
        var param = PackEditorValuesToUrlParams(values)
        $("#imgBarCode").attr("src", "@Url.Action("PreviewBarCode", "BarCode")" + "?" + param);
    }
    function ObtainEditorsValuesCache() {
        var editorsName = ["BarCode",
                "BarCodeText",
                "ShowViewText",
                "VertAlign",
                "HorzAlign",
                "FontName",
                "BarCodeAngle",
                "BarCodeForeColor",
                "BarCodeBackColor",
                "ShowTopCaption",
                "TopCaptionText",
                "TopCaptionAlignment",
                "TopCaptionForeColor",
                "TopCaptionFontName",
                "ShowBottomCaption",
                "BottomCaptionText",
                "BottomCaptionAlignment",
                "BottomCaptionForeColor",
                "BottomCaptionFontName"
        ];
        var valueCache = new Array();
        for (var i in editorsName) {
            var name = editorsName[i];
            var value = eval(name).GetValue();
            if (value == null)
                value = "";
            valueCache[name] = value;
        }
        return valueCache;
    }
    function PackEditorValuesToUrlParams(valueCache) {
        var result = '';
        var firstPass = true;
        for (var name in valueCache) {
            var delimeter = '&';
            if (firstPass)
                delimeter = '';
            result += delimeter + name + "=" + encodeURIComponent(valueCache[name]);
            firstPass = false;
        }
        return result;
    }
    function UpdateDescription() {
        var oData = ObtainEditorsValuesCache();
        var data = {};
        data = PackEditorValuesToUrlParams(oData);
        $.ajax({
                
                type: 'GET', 
                data: data, 
                url: "@Url.Action("UpdateDesctiptionBarCode", "BarCode")",
            success: function (data) {
                    $("#descriptionFrame").html(data);
            },
            error: function () {
                alert("error");
            }
            });
     }
    // ]]> 
</script>

@using (Html.BeginForm("ExportBarCodeVisualizationTo", "BarCode", FormMethod.Post)) {
    <table>
        <tr>
            <td style="vertical-align:top;padding-right:10px;">
                @Html.DevExpress().ComboBoxFor(model => model.BarCode,
                    settings => {
                        settings.Name = "BarCode";
                        settings.Properties.ValueType = typeof(String);
                        settings.Width = Unit.Pixel(600);
                        settings.Height = Unit.Pixel(25);
                        settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); UpdateDescription(); }";
                        settings.Properties.ValueType = typeof(Symbology);
                    }).BindList(Enum.GetNames(typeof(Symbology))).GetHtml()
                <br />
                @Html.DevExpress().Image(
                    settings => {
                        settings.Name = "imgBarCode";
                        settings.Properties.AlternateText = "No image data";
                        settings.ImageUrl = Url.Action("PreviewBarCode", "BarCode");
                    }).GetHtml()
                <br />
                <br />
                <div id="descriptionFrame" style="width: 100%; overflow: hidden; border: none; margin: 0">@Model.Description</div>
            </td>
            <td style="vertical-align:top;width:250px;">
                <div class="Separator SingleSeparator"></div>
                <br />
                @Html.DevExpress().Label(
                    settings => {
                        settings.Text = "BarCode Properties";
                        settings.Style.Add(HtmlTextWriterStyle.FontSize, "30px");
                        settings.Style.Add(HtmlTextWriterStyle.Color, "#ff8800");
                    }).GetHtml()
                <br /><br />
                @Html.DevExpress().CheckBoxFor(model => model.ShowViewText,
                    settings => {
                        settings.Text = "Show Text";
                        settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                    }).GetHtml()
                <table style="width:100%;" class="OptionsTable">
                    <tr>
                        <td>Text:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().TextBoxFor(model => model.BarCodeText,
                                settings => {
                                    settings.Name = "BarCodeText";
                                    settings.Width = Unit.Pixel(170);
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Vert Align:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ComboBoxFor(model => model.VertAlign,
                                settings => {
                                    settings.Name = "VertAlign";
                                    settings.Properties.ValueType = typeof(StringAlignment);
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).BindList(Enum.GetNames(typeof(StringAlignment))).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Horz Align:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ComboBoxFor(model => model.HorzAlign,
                                settings => {
                                    settings.Name = "HorzAlign";
                                    settings.Properties.ValueType = typeof(StringAlignment);
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).BindList(Enum.GetNames(typeof(StringAlignment))).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Font Name:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ComboBoxFor(model => model.FontName,
                                settings => {
                                    settings.Name = "FontName";
                                    settings.Properties.ValueType = typeof(String);
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).BindList(Model.FontFamilyNames).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Angle:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().SpinEditFor(model => model.BarCodeAngle,
                                settings => {
                                    settings.Name = "BarCodeAngle";
                                    settings.Height = Unit.Pixel(21);
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Fore Color:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ColorEditFor(model => model.BarCodeForeColor,
                                settings => {
                                    settings.Name = "BarCodeForeColor";
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Back Color:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ColorEditFor(model => model.BarCodeBackColor,
                                settings => {
                                    settings.Name = "BarCodeBackColor";
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).GetHtml()
                        </td>
                    </tr>
                </table>
                <br />
                <div class="Separator SingleSeparator"></div>
                <br />
                @Html.DevExpress().Label(
                    settings => {
                        settings.Text = "Top caption";
                        settings.Style.Add(HtmlTextWriterStyle.FontSize, "30px");
                        settings.Style.Add(HtmlTextWriterStyle.Color, "#ff8800");
                    }).GetHtml()
                <br /><br />
                @Html.DevExpress().CheckBoxFor(model => model.ShowTopCaption,
                    settings => {
                        settings.Name = "ShowTopCaption";
                        settings.Text = "Show Text";
                        settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                    }).GetHtml()
                <table class="OptionsTable" style="width: 100%">
                    <tr>
                        <td>Text:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().TextBoxFor(model => model.TopCaptionText,
                            settings => {
                                settings.Name = "TopCaptionText";
                                settings.Width = Unit.Pixel(170);
                                settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                            }).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Alignment:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ComboBoxFor(model => model.TopCaptionAlignment,
                            settings => {
                                settings.Name = "TopCaptionAlignment";
                                settings.Properties.ValueType = typeof(StringAlignment);
                                settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                            }).BindList(Enum.GetNames(typeof(StringAlignment))).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Fore Color:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ColorEditFor(model => model.TopCaptionForeColor,
                            settings => {
                                settings.Name = "TopCaptionForeColor";
                                settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                            }).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Font Name:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ComboBoxFor(model => model.TopCaptionFontName,
                            settings => {
                                settings.Name = "TopCaptionFontName";
                                settings.Properties.ValueType = typeof(String);
                                settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                            }).BindList(Model.FontFamilyNames).GetHtml()
                        </td>
                    </tr>
                </table>
                <br />

                <div class="Separator SingleSeparator"></div>
                <br />
                @Html.DevExpress().Label(
                    settings => {
                        settings.Text = "Bottom caption";
                        settings.Style.Add(HtmlTextWriterStyle.FontSize, "30px");
                        settings.Style.Add(HtmlTextWriterStyle.Color, "#ff8800");
                    }).GetHtml()
                <br /><br />
                @Html.DevExpress().CheckBoxFor(model => model.ShowBottomCaption,
                settings => {
                    settings.Name = "ShowBottomCaption";
                    settings.Text = "Show Text";
                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                }).GetHtml()
                <table class="OptionsTable" style="width: 100%">
                    <tr>
                        <td>Text:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().TextBoxFor(model => model.BottomCaptionText,
                                settings => {
                                    settings.Name = "BottomCaptionText";
                                    settings.Width = Unit.Pixel(170);
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Alignment:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ComboBoxFor(model => model.BottomCaptionAlignment,
                                settings => {
                                    settings.Name = "BottomCaptionAlignment";
                                    settings.Properties.ValueType = typeof(StringAlignment);
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).BindList(Enum.GetNames(typeof(StringAlignment))).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Fore Color:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ColorEditFor(model => model.BottomCaptionForeColor,
                                settings => {
                                    settings.Name = "BottomCaptionForeColor";
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).GetHtml()
                        </td>
                    </tr>
                    <tr>
                        <td>Font Name:</td>
                        <td class="propertyEditors">
                            @Html.DevExpress().ComboBoxFor(model => model.BottomCaptionFontName,
                                settings => {
                                    settings.Name = "BottomCaptionFontName";
                                    settings.Properties.ValueType = typeof(String);
                                    settings.Properties.ClientSideEvents.ValueChanged = "function(s, e) { UpdateImage(); }";
                                }).BindList(Model.FontFamilyNames).GetHtml()
                        </td>
                    </tr>
                </table>


            </td>
        </tr>
    </table>
      
}
