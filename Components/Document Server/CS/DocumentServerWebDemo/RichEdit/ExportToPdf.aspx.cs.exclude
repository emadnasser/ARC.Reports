using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using DevExpress.Spreadsheet;
using DevExpress.Web.ASPxUploadControl;
using System.IO;
using DevExpress.XtraReports.UI;
using DevExpress.XtraRichEdit;
using System.Drawing;
using System.Net;

public partial class RichEdit_ExportToPdf : System.Web.UI.Page {
    protected void Page_Load(object sender, EventArgs e) {
        lblCurrentDocument.Text = GetFileName();
        UpdateDocumentPreview();
    }
    bool UpdateDocumentPreview() {
        return true;
    }

    RichEditDocumentServer CreateDocumentServer() {
        RichEditDocumentServer documentServer = new RichEditDocumentServer();
        documentServer.LoadDocument(GetDocumentStream(), GetDocumentType());
        return documentServer;
    }
    protected void OnBtnExportToPdfClick(object sender, EventArgs e) {
        RichEditDocumentServer documentServer = CreateDocumentServer();
        if(documentServer == null)
            return;
        Stream outputStream = new MemoryStream();
        documentServer.ExportToPdf(outputStream);
        outputStream.Seek(0, SeekOrigin.Begin);
        StreamCopyHelper.Copy(outputStream, Response.OutputStream);
        Response.StatusCode = (int)HttpStatusCode.OK;
        Response.ContentType = "application/pdf";
        Response.AddHeader("Content-Disposition", String.Format("attachment; filename={0}.pdf", GetFileNameWithoutExtension()));
        Response.End();
    }
    protected void ASPxUploadControl1_FileUploadComplete(object sender, DevExpress.Web.ASPxUploadControl.FileUploadCompleteEventArgs e) {
        ASPxUploadControl uploadControl = (ASPxUploadControl)sender;
        UploadedFile uploadedFile = uploadControl.UploadedFiles[0];
        if(!IsFileNameCorrect(uploadedFile.FileName)) {
            e.IsValid = false;
            e.ErrorText = "Incorrect file type";
            return;
        }
        if(uploadedFile.IsValid) {
            Session["UploadedFile"] = GetBytesFromStream(uploadedFile.FileContent);
            Session["FileName"] = uploadedFile.FileName;
            e.CallbackData = uploadedFile.FileName;
        }
    }
    bool IsFileNameCorrect(string fileName) {
        string[] correctNames = new string[] { ".doc", ".docx", ".rtf" };
        int fileNameLength = fileName.Length;
        foreach(string ext in correctNames) {
            int extLength = ext.Length;
            if(fileName.Substring(fileNameLength - extLength, extLength) == ext)
                return true;
        }
        return false;
    }
    byte[] GetBytesFromStream(Stream stream) {
        stream.Position = 0;
        byte[] buf = new byte[stream.Length];
        stream.Read(buf, 0, (int)stream.Length);
        return buf;
    }
    Stream GetDocumentStream() {
        if(Session["UploadedFile"] != null) {
            byte[] resultBytes = (byte[])Session["UploadedFile"];
            return new MemoryStream(resultBytes);
        } else {
            string path = Page.MapPath("~/App_Data/MovieRentals.docx");
            FileInfo info = new FileInfo(path);
            return info.OpenRead();
        }
    }
    String GetFileName() {
        if(Session["FileName"] != null)
            return Session["FileName"] as string;
        return "MovieRentals.docx";
    }
    String GetFileNameWithoutExtension() {
        String fileName = GetFileName();
        int indx = fileName.IndexOf(".");
        if(indx < 0)
            return fileName;
        return fileName.Substring(0, indx);
    }
    String GetFileExtension() {
        String fileName = GetFileName();
        int indx = fileName.IndexOf(".");
        if(indx < 0)
            return fileName;
        indx++;
        return fileName.Substring(indx, fileName.Length - indx);
    }
    DevExpress.XtraRichEdit.DocumentFormat GetDocumentType() {
        string extension = GetFileExtension();
        switch(extension) {
            case "rtf":
                return DevExpress.XtraRichEdit.DocumentFormat.Rtf;
            case "doc":
                return DevExpress.XtraRichEdit.DocumentFormat.Doc;
            case "docx":
                return DevExpress.XtraRichEdit.DocumentFormat.OpenXml;
        }
        return DevExpress.XtraRichEdit.DocumentFormat.OpenXml;
    }
}