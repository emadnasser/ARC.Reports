Imports System
Imports System.ComponentModel
Imports System.Linq.Expressions
Imports System.Linq
Imports System.Reflection
Imports System.Collections.Generic
Imports System.Data
Imports System.Data.Linq.Mapping
Imports System.Data.Linq

'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34003
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Namespace DataContext


    Partial Public Class SalesDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertChannel(ByVal instance As Channel)
    End Sub
    Partial Private Sub UpdateChannel(ByVal instance As Channel)
    End Sub
    Partial Private Sub DeleteChannel(ByVal instance As Channel)
    End Sub
    Partial Private Sub InsertContact(ByVal instance As Contact)
    End Sub
    Partial Private Sub UpdateContact(ByVal instance As Contact)
    End Sub
    Partial Private Sub DeleteContact(ByVal instance As Contact)
    End Sub
    Partial Private Sub InsertCity(ByVal instance As City)
    End Sub
    Partial Private Sub UpdateCity(ByVal instance As City)
    End Sub
    Partial Private Sub DeleteCity(ByVal instance As City)
    End Sub
    Partial Private Sub InsertCustomer(ByVal instance As Customer)
    End Sub
    Partial Private Sub UpdateCustomer(ByVal instance As Customer)
    End Sub
    Partial Private Sub DeleteCustomer(ByVal instance As Customer)
    End Sub
    Partial Private Sub InsertPlant(ByVal instance As Plant)
    End Sub
    Partial Private Sub UpdatePlant(ByVal instance As Plant)
    End Sub
    Partial Private Sub DeletePlant(ByVal instance As Plant)
    End Sub
    Partial Private Sub InsertProduct(ByVal instance As Product)
    End Sub
    Partial Private Sub UpdateProduct(ByVal instance As Product)
    End Sub
    Partial Private Sub DeleteProduct(ByVal instance As Product)
    End Sub
    Partial Private Sub InsertRegion(ByVal instance As Region)
    End Sub
    Partial Private Sub UpdateRegion(ByVal instance As Region)
    End Sub
    Partial Private Sub DeleteRegion(ByVal instance As Region)
    End Sub
    Partial Private Sub InsertSector(ByVal instance As Sector)
    End Sub
    Partial Private Sub UpdateSector(ByVal instance As Sector)
    End Sub
    Partial Private Sub DeleteSector(ByVal instance As Sector)
    End Sub
    Partial Private Sub InsertSale(ByVal instance As Sale)
    End Sub
    Partial Private Sub UpdateSale(ByVal instance As Sale)
    End Sub
    Partial Private Sub DeleteSale(ByVal instance As Sale)
    End Sub
    #End Region

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property Channels() As System.Data.Linq.Table(Of Channel)
            Get
                Return Me.GetTable(Of Channel)()
            End Get
        End Property

        Public ReadOnly Property Contacts() As System.Data.Linq.Table(Of Contact)
            Get
                Return Me.GetTable(Of Contact)()
            End Get
        End Property

        Public ReadOnly Property Cities() As System.Data.Linq.Table(Of City)
            Get
                Return Me.GetTable(Of City)()
            End Get
        End Property

        Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
            Get
                Return Me.GetTable(Of Customer)()
            End Get
        End Property

        Public ReadOnly Property Plants() As System.Data.Linq.Table(Of Plant)
            Get
                Return Me.GetTable(Of Plant)()
            End Get
        End Property

        Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
            Get
                Return Me.GetTable(Of Product)()
            End Get
        End Property

        Public ReadOnly Property Regions() As System.Data.Linq.Table(Of Region)
            Get
                Return Me.GetTable(Of Region)()
            End Get
        End Property

        Public ReadOnly Property Sectors() As System.Data.Linq.Table(Of Sector)
            Get
                Return Me.GetTable(Of Sector)()
            End Get
        End Property

        Public ReadOnly Property Sales() As System.Data.Linq.Table(Of Sale)
            Get
                Return Me.GetTable(Of Sale)()
            End Get
        End Property
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Channels")>
    Partial Public Class Channel
        Inherits DataAccess.BaseEntity
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _Id As Integer

        Private _Name As String

        Private _Sales As EntitySet(Of Sale)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Sales = New EntitySet(Of Sale)(New Action(Of Sale)(AddressOf Me.attach_Sales), New Action(Of Sale)(AddressOf Me.detach_Sales))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=True)>
        Public Property Id() As Integer
            Get
                Return Me._Id
            End Get
            Set(ByVal value As Integer)
                If (Me._Id <> value) Then
                    Me.OnIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Id = value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", CanBeNull:=False)>
        Public Property Name() As String
            Get
                Return Me._Name
            End Get
            Set(ByVal value As String)
                If (Me._Name <> value) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Channel_Sale", Storage:="_Sales", ThisKey:="Id", OtherKey:="ChannelId")>
        Public Property Sales() As EntitySet(Of Sale)
            Get
                Return Me._Sales
            End Get
            Set(ByVal value As EntitySet(Of Sale))
                Me._Sales.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Sales(ByVal entity As Sale)
            Me.SendPropertyChanging()
            entity.Channel = Me
        End Sub

        Private Sub detach_Sales(ByVal entity As Sale)
            Me.SendPropertyChanging()
            entity.Channel = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contacts")>
    Partial Public Class Contact
        Inherits DataAccess.BaseEntity
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _Id As Integer

        Private _FullName As String

        Private _Phone As String

        Private _Email As String

        Private _Address As String

        Private _Zip As String

        Private _CityId? As Integer

        Private _Products As EntitySet(Of Product)

        Private _Products1 As EntitySet(Of Product)

        Private _City As EntityRef(Of City)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnEmailChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnAddressChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnZipChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnZipChanged()
    End Sub
    Partial Private Sub OnCityIdChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnCityIdChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Products = New EntitySet(Of Product)(New Action(Of Product)(AddressOf Me.attach_Products), New Action(Of Product)(AddressOf Me.detach_Products))
            Me._Products1 = New EntitySet(Of Product)(New Action(Of Product)(AddressOf Me.attach_Products1), New Action(Of Product)(AddressOf Me.detach_Products1))
            Me._City = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=True)>
        Public Property Id() As Integer
            Get
                Return Me._Id
            End Get
            Set(ByVal value As Integer)
                If (Me._Id <> value) Then
                    Me.OnIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Id = value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", CanBeNull:=False)>
        Public Property FullName() As String
            Get
                Return Me._FullName
            End Get
            Set(ByVal value As String)
                If (Me._FullName <> value) Then
                    Me.OnFullNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._FullName = value
                    Me.SendPropertyChanged("FullName")
                    Me.OnFullNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone")>
        Public Property Phone() As String
            Get
                Return Me._Phone
            End Get
            Set(ByVal value As String)
                If (Me._Phone <> value) Then
                    Me.OnPhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._Phone = value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email")>
        Public Property Email() As String
            Get
                Return Me._Email
            End Get
            Set(ByVal value As String)
                If (Me._Email <> value) Then
                    Me.OnEmailChanging(value)
                    Me.SendPropertyChanging()
                    Me._Email = value
                    Me.SendPropertyChanged("Email")
                    Me.OnEmailChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address")>
        Public Property Address() As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)
                If (Me._Address <> value) Then
                    Me.OnAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._Address = value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip")>
        Public Property Zip() As String
            Get
                Return Me._Zip
            End Get
            Set(ByVal value As String)
                If (Me._Zip <> value) Then
                    Me.OnZipChanging(value)
                    Me.SendPropertyChanging()
                    Me._Zip = value
                    Me.SendPropertyChanged("Zip")
                    Me.OnZipChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityId")>
        Public Property CityId() As Integer?
            Get
                Return Me._CityId
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._CityId.Equals(value)) Then
                    If Me._City.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnCityIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._CityId = value
                    Me.SendPropertyChanged("CityId")
                    Me.OnCityIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Contact_Product", Storage:="_Products", ThisKey:="Id", OtherKey:="ProjectManagerId")>
        Public Property Products() As EntitySet(Of Product)
            Get
                Return Me._Products
            End Get
            Set(ByVal value As EntitySet(Of Product))
                Me._Products.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Contact_Product1", Storage:="_Products1", ThisKey:="Id", OtherKey:="SupportManagerId")>
        Public Property SupportedProducts() As EntitySet(Of Product)
            Get
                Return Me._Products1
            End Get
            Set(ByVal value As EntitySet(Of Product))
                Me._Products1.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Contact", Storage:="_City", ThisKey:="CityId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property City() As City
            Get
                Return Me._City.Entity
            End Get
            Set(ByVal value As City)
                Dim previousValue As City = Me._City.Entity
                If ((previousValue IsNot value) OrElse (Me._City.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._City.Entity = Nothing
                        previousValue.Contacts.Remove(Me)
                    End If
                    Me._City.Entity = value
                    If (value IsNot Nothing) Then
                        value.Contacts.Add(Me)
                        Me._CityId = value.Id
                    Else
                        Me._CityId = Nothing
                    End If
                    Me.SendPropertyChanged("City")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Products(ByVal entity As Product)
            Me.SendPropertyChanging()
            entity.ProjectManager = Me
        End Sub

        Private Sub detach_Products(ByVal entity As Product)
            Me.SendPropertyChanging()
            entity.ProjectManager = Nothing
        End Sub

        Private Sub attach_Products1(ByVal entity As Product)
            Me.SendPropertyChanging()
            entity.SupportManager = Me
        End Sub

        Private Sub detach_Products1(ByVal entity As Product)
            Me.SendPropertyChanging()
            entity.SupportManager = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cities")>
    Partial Public Class City
        Inherits DataAccess.BaseEntity
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _Id As Integer

        Private _Name As String

        Private _Latitude As Double

        Private _Longitude As Double

        Private _Map As String

        Private _Country As String

        Private _State As String

        Private _Contacts As EntitySet(Of Contact)

        Private _Customers As EntitySet(Of Customer)

        Private _Plants As EntitySet(Of Plant)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnLatitudeChanging(ByVal value As Double)
    End Sub
    Partial Private Sub OnLatitudeChanged()
    End Sub
    Partial Private Sub OnLongitudeChanging(ByVal value As Double)
    End Sub
    Partial Private Sub OnLongitudeChanged()
    End Sub
    Partial Private Sub OnMapChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnMapChanged()
    End Sub
    Partial Private Sub OnCountryChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnStateChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Contacts = New EntitySet(Of Contact)(New Action(Of Contact)(AddressOf Me.attach_Contacts), New Action(Of Contact)(AddressOf Me.detach_Contacts))
            Me._Customers = New EntitySet(Of Customer)(New Action(Of Customer)(AddressOf Me.attach_Customers), New Action(Of Customer)(AddressOf Me.detach_Customers))
            Me._Plants = New EntitySet(Of Plant)(New Action(Of Plant)(AddressOf Me.attach_Plants), New Action(Of Plant)(AddressOf Me.detach_Plants))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=True)>
        Public Property Id() As Integer
            Get
                Return Me._Id
            End Get
            Set(ByVal value As Integer)
                If (Me._Id <> value) Then
                    Me.OnIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Id = value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", CanBeNull:=False)>
        Public Property Name() As String
            Get
                Return Me._Name
            End Get
            Set(ByVal value As String)
                If (Me._Name <> value) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude")>
        Public Property Latitude() As Double
            Get
                Return Me._Latitude
            End Get
            Set(ByVal value As Double)
                If (Me._Latitude <> value) Then
                    Me.OnLatitudeChanging(value)
                    Me.SendPropertyChanging()
                    Me._Latitude = value
                    Me.SendPropertyChanged("Latitude")
                    Me.OnLatitudeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude")>
        Public Property Longitude() As Double
            Get
                Return Me._Longitude
            End Get
            Set(ByVal value As Double)
                If (Me._Longitude <> value) Then
                    Me.OnLongitudeChanging(value)
                    Me.SendPropertyChanging()
                    Me._Longitude = value
                    Me.SendPropertyChanged("Longitude")
                    Me.OnLongitudeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Map", CanBeNull:=False)>
        Public Property Map() As String
            Get
                Return Me._Map
            End Get
            Set(ByVal value As String)
                If (Me._Map <> value) Then
                    Me.OnMapChanging(value)
                    Me.SendPropertyChanging()
                    Me._Map = value
                    Me.SendPropertyChanged("Map")
                    Me.OnMapChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", CanBeNull:=False)>
        Public Property Country() As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)
                If (Me._Country <> value) Then
                    Me.OnCountryChanging(value)
                    Me.SendPropertyChanging()
                    Me._Country = value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", CanBeNull:=False)>
        Public Property State() As String
            Get
                Return Me._State
            End Get
            Set(ByVal value As String)
                If (Me._State <> value) Then
                    Me.OnStateChanging(value)
                    Me.SendPropertyChanging()
                    Me._State = value
                    Me.SendPropertyChanged("State")
                    Me.OnStateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Contact", Storage:="_Contacts", ThisKey:="Id", OtherKey:="CityId")>
        Public Property Contacts() As EntitySet(Of Contact)
            Get
                Return Me._Contacts
            End Get
            Set(ByVal value As EntitySet(Of Contact))
                Me._Contacts.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Customer", Storage:="_Customers", ThisKey:="Id", OtherKey:="CityId")>
        Public Property Customers() As EntitySet(Of Customer)
            Get
                Return Me._Customers
            End Get
            Set(ByVal value As EntitySet(Of Customer))
                Me._Customers.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Plant", Storage:="_Plants", ThisKey:="Id", OtherKey:="CityId")>
        Public Property Plants() As EntitySet(Of Plant)
            Get
                Return Me._Plants
            End Get
            Set(ByVal value As EntitySet(Of Plant))
                Me._Plants.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Contacts(ByVal entity As Contact)
            Me.SendPropertyChanging()
            entity.City = Me
        End Sub

        Private Sub detach_Contacts(ByVal entity As Contact)
            Me.SendPropertyChanging()
            entity.City = Nothing
        End Sub

        Private Sub attach_Customers(ByVal entity As Customer)
            Me.SendPropertyChanging()
            entity.City = Me
        End Sub

        Private Sub detach_Customers(ByVal entity As Customer)
            Me.SendPropertyChanging()
            entity.City = Nothing
        End Sub

        Private Sub attach_Plants(ByVal entity As Plant)
            Me.SendPropertyChanging()
            entity.City = Me
        End Sub

        Private Sub detach_Plants(ByVal entity As Plant)
            Me.SendPropertyChanging()
            entity.City = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customers")>
    Partial Public Class Customer
        Inherits DataAccess.BaseEntity
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _Id As Integer

        Private _FullName As String

        Private _Phone As String

        Private _Fax As String

        Private _Address As String

        Private _Zip As String

        Private _CityId As Integer

        Private _Sales As EntitySet(Of Sale)

        Private _City As EntityRef(Of City)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnFaxChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnAddressChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnZipChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnZipChanged()
    End Sub
    Partial Private Sub OnCityIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnCityIdChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Sales = New EntitySet(Of Sale)(New Action(Of Sale)(AddressOf Me.attach_Sales), New Action(Of Sale)(AddressOf Me.detach_Sales))
            Me._City = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=True)>
        Public Property Id() As Integer
            Get
                Return Me._Id
            End Get
            Set(ByVal value As Integer)
                If (Me._Id <> value) Then
                    Me.OnIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Id = value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", CanBeNull:=False)>
        Public Property FullName() As String
            Get
                Return Me._FullName
            End Get
            Set(ByVal value As String)
                If (Me._FullName <> value) Then
                    Me.OnFullNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._FullName = value
                    Me.SendPropertyChanged("FullName")
                    Me.OnFullNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone")>
        Public Property Phone() As String
            Get
                Return Me._Phone
            End Get
            Set(ByVal value As String)
                If (Me._Phone <> value) Then
                    Me.OnPhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._Phone = value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax")>
        Public Property Fax() As String
            Get
                Return Me._Fax
            End Get
            Set(ByVal value As String)
                If (Me._Fax <> value) Then
                    Me.OnFaxChanging(value)
                    Me.SendPropertyChanging()
                    Me._Fax = value
                    Me.SendPropertyChanged("Fax")
                    Me.OnFaxChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", CanBeNull:=False)>
        Public Property Address() As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)
                If (Me._Address <> value) Then
                    Me.OnAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._Address = value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", CanBeNull:=False)>
        Public Property Zip() As String
            Get
                Return Me._Zip
            End Get
            Set(ByVal value As String)
                If (Me._Zip <> value) Then
                    Me.OnZipChanging(value)
                    Me.SendPropertyChanging()
                    Me._Zip = value
                    Me.SendPropertyChanged("Zip")
                    Me.OnZipChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityId")>
        Public Property CityId() As Integer
            Get
                Return Me._CityId
            End Get
            Set(ByVal value As Integer)
                If (Me._CityId <> value) Then
                    If Me._City.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnCityIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._CityId = value
                    Me.SendPropertyChanged("CityId")
                    Me.OnCityIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Sale", Storage:="_Sales", ThisKey:="Id", OtherKey:="CustomerId")>
        Public Property Sales() As EntitySet(Of Sale)
            Get
                Return Me._Sales
            End Get
            Set(ByVal value As EntitySet(Of Sale))
                Me._Sales.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Customer", Storage:="_City", ThisKey:="CityId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property City() As City
            Get
                Return Me._City.Entity
            End Get
            Set(ByVal value As City)
                Dim previousValue As City = Me._City.Entity
                If ((previousValue IsNot value) OrElse (Me._City.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._City.Entity = Nothing
                        previousValue.Customers.Remove(Me)
                    End If
                    Me._City.Entity = value
                    If (value IsNot Nothing) Then
                        value.Customers.Add(Me)
                        Me._CityId = value.Id
                    Else
                        Me._CityId = Nothing
                    End If
                    Me.SendPropertyChanged("City")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Sales(ByVal entity As Sale)
            Me.SendPropertyChanging()
            entity.Customer = Me
        End Sub

        Private Sub detach_Sales(ByVal entity As Sale)
            Me.SendPropertyChanging()
            entity.Customer = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Plants")>
    Partial Public Class Plant
        Inherits DataAccess.BaseEntity
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _Id As Integer

        Private _Name As String

        Private _Address As String

        Private _Zip As String

        Private _CityId As Integer

        Private _Products As EntitySet(Of Product)

        Private _City As EntityRef(Of City)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnZipChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnZipChanged()
    End Sub
    Partial Private Sub OnCityIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnCityIdChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Products = New EntitySet(Of Product)(New Action(Of Product)(AddressOf Me.attach_Products), New Action(Of Product)(AddressOf Me.detach_Products))
            Me._City = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=True)>
        Public Property Id() As Integer
            Get
                Return Me._Id
            End Get
            Set(ByVal value As Integer)
                If (Me._Id <> value) Then
                    Me.OnIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Id = value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", CanBeNull:=False)>
        Public Property Name() As String
            Get
                Return Me._Name
            End Get
            Set(ByVal value As String)
                If (Me._Name <> value) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", CanBeNull:=False)>
        Public Property Address() As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)
                If (Me._Address <> value) Then
                    Me.OnAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._Address = value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", CanBeNull:=False)>
        Public Property Zip() As String
            Get
                Return Me._Zip
            End Get
            Set(ByVal value As String)
                If (Me._Zip <> value) Then
                    Me.OnZipChanging(value)
                    Me.SendPropertyChanging()
                    Me._Zip = value
                    Me.SendPropertyChanged("Zip")
                    Me.OnZipChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityId")>
        Public Property CityId() As Integer
            Get
                Return Me._CityId
            End Get
            Set(ByVal value As Integer)
                If (Me._CityId <> value) Then
                    If Me._City.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnCityIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._CityId = value
                    Me.SendPropertyChanged("CityId")
                    Me.OnCityIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plant_Product", Storage:="_Products", ThisKey:="Id", OtherKey:="PlantId")>
        Public Property Products() As EntitySet(Of Product)
            Get
                Return Me._Products
            End Get
            Set(ByVal value As EntitySet(Of Product))
                Me._Products.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Plant", Storage:="_City", ThisKey:="CityId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property City() As City
            Get
                Return Me._City.Entity
            End Get
            Set(ByVal value As City)
                Dim previousValue As City = Me._City.Entity
                If ((previousValue IsNot value) OrElse (Me._City.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._City.Entity = Nothing
                        previousValue.Plants.Remove(Me)
                    End If
                    Me._City.Entity = value
                    If (value IsNot Nothing) Then
                        value.Plants.Add(Me)
                        Me._CityId = value.Id
                    Else
                        Me._CityId = Nothing
                    End If
                    Me.SendPropertyChanged("City")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Products(ByVal entity As Product)
            Me.SendPropertyChanging()
            entity.Plant = Me
        End Sub

        Private Sub detach_Products(ByVal entity As Product)
            Me.SendPropertyChanging()
            entity.Plant = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Products")>
    Partial Public Class Product
        Inherits DataAccess.BaseEntity
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _Id As Integer

        Private _Name As String

        Private _Description As String

        Private _BaseCost As Double

        Private _ListPrice As Double

        Private _UnitsInInventory As Integer

        Private _PlantId As Integer

        Private _ProjectManagerId As Integer

        Private _SupportManagerId As Integer

        Private _UnitsInManufacturing As Integer

        Private _Sales As EntitySet(Of Sale)

        Private _Contact As EntityRef(Of Contact)

        Private _Contact1 As EntityRef(Of Contact)

        Private _Plant As EntityRef(Of Plant)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnBaseCostChanging(ByVal value As Double)
    End Sub
    Partial Private Sub OnBaseCostChanged()
    End Sub
    Partial Private Sub OnListPriceChanging(ByVal value As Double)
    End Sub
    Partial Private Sub OnListPriceChanged()
    End Sub
    Partial Private Sub OnUnitsInInventoryChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnUnitsInInventoryChanged()
    End Sub
    Partial Private Sub OnPlantIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnPlantIdChanged()
    End Sub
    Partial Private Sub OnProjectManagerIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnProjectManagerIdChanged()
    End Sub
    Partial Private Sub OnSupportManagerIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnSupportManagerIdChanged()
    End Sub
    Partial Private Sub OnUnitsInManufacturingChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnUnitsInManufacturingChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Sales = New EntitySet(Of Sale)(New Action(Of Sale)(AddressOf Me.attach_Sales), New Action(Of Sale)(AddressOf Me.detach_Sales))
            Me._Contact = Nothing
            Me._Contact1 = Nothing
            Me._Plant = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=True)>
        Public Property Id() As Integer
            Get
                Return Me._Id
            End Get
            Set(ByVal value As Integer)
                If (Me._Id <> value) Then
                    Me.OnIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Id = value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", CanBeNull:=False)>
        Public Property Name() As String
            Get
                Return Me._Name
            End Get
            Set(ByVal value As String)
                If (Me._Name <> value) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", CanBeNull:=False)>
        Public Property Description() As String
            Get
                Return Me._Description
            End Get
            Set(ByVal value As String)
                If (Me._Description <> value) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseCost")>
        Public Property BaseCost() As Double
            Get
                Return Me._BaseCost
            End Get
            Set(ByVal value As Double)
                If (Me._BaseCost <> value) Then
                    Me.OnBaseCostChanging(value)
                    Me.SendPropertyChanging()
                    Me._BaseCost = value
                    Me.SendPropertyChanged("BaseCost")
                    Me.OnBaseCostChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListPrice")>
        Public Property ListPrice() As Double
            Get
                Return Me._ListPrice
            End Get
            Set(ByVal value As Double)
                If (Me._ListPrice <> value) Then
                    Me.OnListPriceChanging(value)
                    Me.SendPropertyChanging()
                    Me._ListPrice = value
                    Me.SendPropertyChanged("ListPrice")
                    Me.OnListPriceChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsInInventory")>
        Public Property UnitsInInventory() As Integer
            Get
                Return Me._UnitsInInventory
            End Get
            Set(ByVal value As Integer)
                If (Me._UnitsInInventory <> value) Then
                    Me.OnUnitsInInventoryChanging(value)
                    Me.SendPropertyChanging()
                    Me._UnitsInInventory = value
                    Me.SendPropertyChanged("UnitsInInventory")
                    Me.OnUnitsInInventoryChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlantId")>
        Public Property PlantId() As Integer
            Get
                Return Me._PlantId
            End Get
            Set(ByVal value As Integer)
                If (Me._PlantId <> value) Then
                    If Me._Plant.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnPlantIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._PlantId = value
                    Me.SendPropertyChanged("PlantId")
                    Me.OnPlantIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProjectManagerId")>
        Public Property ProjectManagerId() As Integer
            Get
                Return Me._ProjectManagerId
            End Get
            Set(ByVal value As Integer)
                If (Me._ProjectManagerId <> value) Then
                    If Me._Contact.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnProjectManagerIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProjectManagerId = value
                    Me.SendPropertyChanged("ProjectManagerId")
                    Me.OnProjectManagerIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupportManagerId")>
        Public Property SupportManagerId() As Integer
            Get
                Return Me._SupportManagerId
            End Get
            Set(ByVal value As Integer)
                If (Me._SupportManagerId <> value) Then
                    If Me._Contact1.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnSupportManagerIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._SupportManagerId = value
                    Me.SendPropertyChanged("SupportManagerId")
                    Me.OnSupportManagerIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsInManufacturing")>
        Public Property UnitsInManufacturing() As Integer
            Get
                Return Me._UnitsInManufacturing
            End Get
            Set(ByVal value As Integer)
                If (Me._UnitsInManufacturing <> value) Then
                    Me.OnUnitsInManufacturingChanging(value)
                    Me.SendPropertyChanging()
                    Me._UnitsInManufacturing = value
                    Me.SendPropertyChanged("UnitsInManufacturing")
                    Me.OnUnitsInManufacturingChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Sale", Storage:="_Sales", ThisKey:="Id", OtherKey:="ProductId")>
        Public Property Sales() As EntitySet(Of Sale)
            Get
                Return Me._Sales
            End Get
            Set(ByVal value As EntitySet(Of Sale))
                Me._Sales.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Contact_Product", Storage:="_Contact", ThisKey:="ProjectManagerId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property ProjectManager() As Contact
            Get
                Return Me._Contact.Entity
            End Get
            Set(ByVal value As Contact)
                Dim previousValue As Contact = Me._Contact.Entity
                If ((previousValue IsNot value) OrElse (Me._Contact.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Contact.Entity = Nothing
                        previousValue.Products.Remove(Me)
                    End If
                    Me._Contact.Entity = value
                    If (value IsNot Nothing) Then
                        value.Products.Add(Me)
                        Me._ProjectManagerId = value.Id
                    Else
                        Me._ProjectManagerId = Nothing
                    End If
                    Me.SendPropertyChanged("ProjectManager")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Contact_Product1", Storage:="_Contact1", ThisKey:="SupportManagerId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property SupportManager() As Contact
            Get
                Return Me._Contact1.Entity
            End Get
            Set(ByVal value As Contact)
                Dim previousValue As Contact = Me._Contact1.Entity
                If ((previousValue IsNot value) OrElse (Me._Contact1.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Contact1.Entity = Nothing
                        previousValue.SupportedProducts.Remove(Me)
                    End If
                    Me._Contact1.Entity = value
                    If (value IsNot Nothing) Then
                        value.SupportedProducts.Add(Me)
                        Me._SupportManagerId = value.Id
                    Else
                        Me._SupportManagerId = Nothing
                    End If
                    Me.SendPropertyChanged("SupportManager")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plant_Product", Storage:="_Plant", ThisKey:="PlantId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property Plant() As Plant
            Get
                Return Me._Plant.Entity
            End Get
            Set(ByVal value As Plant)
                Dim previousValue As Plant = Me._Plant.Entity
                If ((previousValue IsNot value) OrElse (Me._Plant.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Plant.Entity = Nothing
                        previousValue.Products.Remove(Me)
                    End If
                    Me._Plant.Entity = value
                    If (value IsNot Nothing) Then
                        value.Products.Add(Me)
                        Me._PlantId = value.Id
                    Else
                        Me._PlantId = Nothing
                    End If
                    Me.SendPropertyChanged("Plant")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Sales(ByVal entity As Sale)
            Me.SendPropertyChanging()
            entity.Product = Me
        End Sub

        Private Sub detach_Sales(ByVal entity As Sale)
            Me.SendPropertyChanging()
            entity.Product = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Regions")>
    Partial Public Class Region
        Inherits DataAccess.BaseEntity
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _Id As Integer

        Private _Name As String

        Private _Sales As EntitySet(Of Sale)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Sales = New EntitySet(Of Sale)(New Action(Of Sale)(AddressOf Me.attach_Sales), New Action(Of Sale)(AddressOf Me.detach_Sales))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=True)>
        Public Property Id() As Integer
            Get
                Return Me._Id
            End Get
            Set(ByVal value As Integer)
                If (Me._Id <> value) Then
                    Me.OnIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Id = value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", CanBeNull:=False)>
        Public Property Name() As String
            Get
                Return Me._Name
            End Get
            Set(ByVal value As String)
                If (Me._Name <> value) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Region_Sale", Storage:="_Sales", ThisKey:="Id", OtherKey:="RegionId")>
        Public Property Sales() As EntitySet(Of Sale)
            Get
                Return Me._Sales
            End Get
            Set(ByVal value As EntitySet(Of Sale))
                Me._Sales.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Sales(ByVal entity As Sale)
            Me.SendPropertyChanging()
            entity.Region = Me
        End Sub

        Private Sub detach_Sales(ByVal entity As Sale)
            Me.SendPropertyChanging()
            entity.Region = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sectors")>
    Partial Public Class Sector
        Inherits DataAccess.BaseEntity
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _Id As Integer

        Private _Name As String

        Private _Sales As EntitySet(Of Sale)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Sales = New EntitySet(Of Sale)(New Action(Of Sale)(AddressOf Me.attach_Sales), New Action(Of Sale)(AddressOf Me.detach_Sales))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=True)>
        Public Property Id() As Integer
            Get
                Return Me._Id
            End Get
            Set(ByVal value As Integer)
                If (Me._Id <> value) Then
                    Me.OnIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Id = value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", CanBeNull:=False)>
        Public Property Name() As String
            Get
                Return Me._Name
            End Get
            Set(ByVal value As String)
                If (Me._Name <> value) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sector_Sale", Storage:="_Sales", ThisKey:="Id", OtherKey:="SectorId")>
        Public Property Sales() As EntitySet(Of Sale)
            Get
                Return Me._Sales
            End Get
            Set(ByVal value As EntitySet(Of Sale))
                Me._Sales.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Sales(ByVal entity As Sale)
            Me.SendPropertyChanging()
            entity.Sector = Me
        End Sub

        Private Sub detach_Sales(ByVal entity As Sale)
            Me.SendPropertyChanging()
            entity.Sector = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sales")>
    Partial Public Class Sale
        Inherits DataAccess.BaseEntity
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _Id As Integer

        Private _Units As Integer

        Private _CostPerUnit As Double

        Private _Discount As Double

        Private _TotalCost As Double

        Private _SaleDate As Date

        Private _ProductId As Integer

        Private _RegionId As Integer

        Private _ChannelId As Integer

        Private _SectorId As Integer

        Private _CustomerId As Integer

        Private _Product As EntityRef(Of Product)

        Private _Region As EntityRef(Of Region)

        Private _Channel As EntityRef(Of Channel)

        Private _Sector As EntityRef(Of Sector)

        Private _Customer As EntityRef(Of Customer)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnUnitsChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnUnitsChanged()
    End Sub
    Partial Private Sub OnCostPerUnitChanging(ByVal value As Double)
    End Sub
    Partial Private Sub OnCostPerUnitChanged()
    End Sub
    Partial Private Sub OnDiscountChanging(ByVal value As Double)
    End Sub
    Partial Private Sub OnDiscountChanged()
    End Sub
    Partial Private Sub OnTotalCostChanging(ByVal value As Double)
    End Sub
    Partial Private Sub OnTotalCostChanged()
    End Sub
    Partial Private Sub OnSaleDateChanging(ByVal value As Date)
    End Sub
    Partial Private Sub OnSaleDateChanged()
    End Sub
    Partial Private Sub OnProductIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnRegionIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnRegionIdChanged()
    End Sub
    Partial Private Sub OnChannelIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnChannelIdChanged()
    End Sub
    Partial Private Sub OnSectorIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnSectorIdChanged()
    End Sub
    Partial Private Sub OnCustomerIdChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnCustomerIdChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Product = Nothing
            Me._Region = Nothing
            Me._Channel = Nothing
            Me._Sector = Nothing
            Me._Customer = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property Id() As Integer
            Get
                Return Me._Id
            End Get
            Set(ByVal value As Integer)
                If (Me._Id <> value) Then
                    Me.OnIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Id = value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Units")>
        Public Property Units() As Integer
            Get
                Return Me._Units
            End Get
            Set(ByVal value As Integer)
                If (Me._Units <> value) Then
                    Me.OnUnitsChanging(value)
                    Me.SendPropertyChanging()
                    Me._Units = value
                    Me.SendPropertyChanged("Units")
                    Me.OnUnitsChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostPerUnit")>
        Public Property CostPerUnit() As Double
            Get
                Return Me._CostPerUnit
            End Get
            Set(ByVal value As Double)
                If (Me._CostPerUnit <> value) Then
                    Me.OnCostPerUnitChanging(value)
                    Me.SendPropertyChanging()
                    Me._CostPerUnit = value
                    Me.SendPropertyChanged("CostPerUnit")
                    Me.OnCostPerUnitChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount")>
        Public Property Discount() As Double
            Get
                Return Me._Discount
            End Get
            Set(ByVal value As Double)
                If (Me._Discount <> value) Then
                    Me.OnDiscountChanging(value)
                    Me.SendPropertyChanging()
                    Me._Discount = value
                    Me.SendPropertyChanged("Discount")
                    Me.OnDiscountChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalCost")>
        Public Property TotalCost() As Double
            Get
                Return Me._TotalCost
            End Get
            Set(ByVal value As Double)
                If (Me._TotalCost <> value) Then
                    Me.OnTotalCostChanging(value)
                    Me.SendPropertyChanging()
                    Me._TotalCost = value
                    Me.SendPropertyChanged("TotalCost")
                    Me.OnTotalCostChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaleDate")>
        Public Property SaleDate() As Date
            Get
                Return Me._SaleDate
            End Get
            Set(ByVal value As Date)
                If (Me._SaleDate <> value) Then
                    Me.OnSaleDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._SaleDate = value
                    Me.SendPropertyChanged("SaleDate")
                    Me.OnSaleDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductId")>
        Public Property ProductId() As Integer
            Get
                Return Me._ProductId
            End Get
            Set(ByVal value As Integer)
                If (Me._ProductId <> value) Then
                    If Me._Product.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnProductIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductId = value
                    Me.SendPropertyChanged("ProductId")
                    Me.OnProductIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegionId")>
        Public Property RegionId() As Integer
            Get
                Return Me._RegionId
            End Get
            Set(ByVal value As Integer)
                If (Me._RegionId <> value) Then
                    If Me._Region.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnRegionIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._RegionId = value
                    Me.SendPropertyChanged("RegionId")
                    Me.OnRegionIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChannelId")>
        Public Property ChannelId() As Integer
            Get
                Return Me._ChannelId
            End Get
            Set(ByVal value As Integer)
                If (Me._ChannelId <> value) Then
                    If Me._Channel.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnChannelIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._ChannelId = value
                    Me.SendPropertyChanged("ChannelId")
                    Me.OnChannelIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectorId")>
        Public Property SectorId() As Integer
            Get
                Return Me._SectorId
            End Get
            Set(ByVal value As Integer)
                If (Me._SectorId <> value) Then
                    If Me._Sector.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnSectorIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._SectorId = value
                    Me.SendPropertyChanged("SectorId")
                    Me.OnSectorIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerId")>
        Public Property CustomerId() As Integer
            Get
                Return Me._CustomerId
            End Get
            Set(ByVal value As Integer)
                If (Me._CustomerId <> value) Then
                    If Me._Customer.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnCustomerIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._CustomerId = value
                    Me.SendPropertyChanged("CustomerId")
                    Me.OnCustomerIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Sale", Storage:="_Product", ThisKey:="ProductId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property Product() As Product
            Get
                Return Me._Product.Entity
            End Get
            Set(ByVal value As Product)
                Dim previousValue As Product = Me._Product.Entity
                If ((previousValue IsNot value) OrElse (Me._Product.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Product.Entity = Nothing
                        previousValue.Sales.Remove(Me)
                    End If
                    Me._Product.Entity = value
                    If (value IsNot Nothing) Then
                        value.Sales.Add(Me)
                        Me._ProductId = value.Id
                    Else
                        Me._ProductId = Nothing
                    End If
                    Me.SendPropertyChanged("Product")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Region_Sale", Storage:="_Region", ThisKey:="RegionId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property Region() As Region
            Get
                Return Me._Region.Entity
            End Get
            Set(ByVal value As Region)
                Dim previousValue As Region = Me._Region.Entity
                If ((previousValue IsNot value) OrElse (Me._Region.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Region.Entity = Nothing
                        previousValue.Sales.Remove(Me)
                    End If
                    Me._Region.Entity = value
                    If (value IsNot Nothing) Then
                        value.Sales.Add(Me)
                        Me._RegionId = value.Id
                    Else
                        Me._RegionId = Nothing
                    End If
                    Me.SendPropertyChanged("Region")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Channel_Sale", Storage:="_Channel", ThisKey:="ChannelId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property Channel() As Channel
            Get
                Return Me._Channel.Entity
            End Get
            Set(ByVal value As Channel)
                Dim previousValue As Channel = Me._Channel.Entity
                If ((previousValue IsNot value) OrElse (Me._Channel.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Channel.Entity = Nothing
                        previousValue.Sales.Remove(Me)
                    End If
                    Me._Channel.Entity = value
                    If (value IsNot Nothing) Then
                        value.Sales.Add(Me)
                        Me._ChannelId = value.Id
                    Else
                        Me._ChannelId = Nothing
                    End If
                    Me.SendPropertyChanged("Channel")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sector_Sale", Storage:="_Sector", ThisKey:="SectorId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property Sector() As Sector
            Get
                Return Me._Sector.Entity
            End Get
            Set(ByVal value As Sector)
                Dim previousValue As Sector = Me._Sector.Entity
                If ((previousValue IsNot value) OrElse (Me._Sector.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Sector.Entity = Nothing
                        previousValue.Sales.Remove(Me)
                    End If
                    Me._Sector.Entity = value
                    If (value IsNot Nothing) Then
                        value.Sales.Add(Me)
                        Me._SectorId = value.Id
                    Else
                        Me._SectorId = Nothing
                    End If
                    Me.SendPropertyChanged("Sector")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Sale", Storage:="_Customer", ThisKey:="CustomerId", OtherKey:="Id", IsForeignKey:=True)>
        Public Property Customer() As Customer
            Get
                Return Me._Customer.Entity
            End Get
            Set(ByVal value As Customer)
                Dim previousValue As Customer = Me._Customer.Entity
                If ((previousValue IsNot value) OrElse (Me._Customer.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Customer.Entity = Nothing
                        previousValue.Sales.Remove(Me)
                    End If
                    Me._Customer.Entity = value
                    If (value IsNot Nothing) Then
                        value.Sales.Add(Me)
                        Me._CustomerId = value.Id
                    Else
                        Me._CustomerId = Nothing
                    End If
                    Me.SendPropertyChanged("Customer")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class
End Namespace
'#pragma warning restore 1591
