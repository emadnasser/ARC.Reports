'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection



<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="NWind")> _
Partial Public Class NorthwindDataContext
	Inherits System.Data.Linq.DataContext

	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSales_by_Category(ByVal instance As Sales_by_Category)
  End Sub
  Partial Private Sub UpdateSales_by_Category(ByVal instance As Sales_by_Category)
  End Sub
  Partial Private Sub DeleteSales_by_Category(ByVal instance As Sales_by_Category)
  End Sub
  #End Region

	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("NWindConnectionString").ConnectionString, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public ReadOnly Property Sales_by_Categories() As System.Data.Linq.Table(Of Sales_by_Category)
		Get
			Return Me.GetTable(Of Sales_by_Category)()
		End Get
	End Property

	Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employees)
		Get
			Return Me.GetTable(Of Employees)()
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Sales by Category]")> _
Partial Public Class Sales_by_Category
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _CategoryID As Integer

	Private _CategoryName As String

	Private _ProductName As String

	Private _ProductSales? As Decimal

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnCategoryNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCategoryNameChanged()
	End Sub
	Partial Private Sub OnProductNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductNameChanged()
	End Sub
	Partial Private Sub OnProductSalesChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnProductSalesChanged()
	End Sub
	#End Region

	Public Sub New()
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int NOT NULL")> _
	Public Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
		Set(ByVal value As Integer)
			If (Me._CategoryID <> value) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging()
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)> _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set(ByVal value As String)
			If (Me._CategoryName <> value) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging()
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set(ByVal value As String)
			If (Me._ProductName <> value) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging()
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductSales", DbType:="SmallMoney")> _
	Public Property ProductSales() As Decimal?
		Get
			Return Me._ProductSales
		End Get
		Set(ByVal value? As Decimal)
			If (Not Me._ProductSales.Equals(value)) Then
				Me.OnProductSalesChanging(value)
				Me.SendPropertyChanging()
				Me._ProductSales = value
				Me.SendPropertyChanged("ProductSales")
				Me.OnProductSalesChanged()
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")> _
Partial Public Class Employees

	Private _FirstName As String

	Private _LastName As String

	Private _City As String

	Private _TitleOfCourtesy As String

	Public Sub New()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", CanBeNull:=False)> _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set(ByVal value As String)
			If (Me._FirstName <> value) Then
				Me._FirstName = value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", CanBeNull:=False)> _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set(ByVal value As String)
			If (Me._LastName <> value) Then
				Me._LastName = value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", CanBeNull:=False)> _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set(ByVal value As String)
			If (Me._City <> value) Then
				Me._City = value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitleOfCourtesy", CanBeNull:=False)> _
	Public Property TitleOfCourtesy() As String
		Get
			Return Me._TitleOfCourtesy
		End Get
		Set(ByVal value As String)
			If (Me._TitleOfCourtesy <> value) Then
				Me._TitleOfCourtesy = value
			End If
		End Set
	End Property
End Class
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
