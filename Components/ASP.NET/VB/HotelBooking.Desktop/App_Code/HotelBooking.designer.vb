Imports System
Imports System.ComponentModel
Imports System.Linq.Expressions
Imports System.Linq
Imports System.Reflection
Imports System.Collections.Generic
Imports System.Data
Imports System.Data.Linq.Mapping
Imports System.Data.Linq

'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Namespace HotelBooking


    <Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="HotelBooking")>
    Partial Public Class HotelBookingDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertCity(ByVal instance As City)
    End Sub
    Partial Private Sub UpdateCity(ByVal instance As City)
    End Sub
    Partial Private Sub DeleteCity(ByVal instance As City)
    End Sub
    Partial Private Sub InsertRoom(ByVal instance As Room)
    End Sub
    Partial Private Sub UpdateRoom(ByVal instance As Room)
    End Sub
    Partial Private Sub DeleteRoom(ByVal instance As Room)
    End Sub
    Partial Private Sub InsertFeatures_List(ByVal instance As Features_List)
    End Sub
    Partial Private Sub UpdateFeatures_List(ByVal instance As Features_List)
    End Sub
    Partial Private Sub DeleteFeatures_List(ByVal instance As Features_List)
    End Sub
    Partial Private Sub InsertGuest(ByVal instance As Guest)
    End Sub
    Partial Private Sub UpdateGuest(ByVal instance As Guest)
    End Sub
    Partial Private Sub DeleteGuest(ByVal instance As Guest)
    End Sub
    Partial Private Sub InsertHotel_Feature(ByVal instance As Hotel_Feature)
    End Sub
    Partial Private Sub UpdateHotel_Feature(ByVal instance As Hotel_Feature)
    End Sub
    Partial Private Sub DeleteHotel_Feature(ByVal instance As Hotel_Feature)
    End Sub
    Partial Private Sub InsertHotel_Image(ByVal instance As Hotel_Image)
    End Sub
    Partial Private Sub UpdateHotel_Image(ByVal instance As Hotel_Image)
    End Sub
    Partial Private Sub DeleteHotel_Image(ByVal instance As Hotel_Image)
    End Sub
    Partial Private Sub InsertHotel(ByVal instance As Hotel)
    End Sub
    Partial Private Sub UpdateHotel(ByVal instance As Hotel)
    End Sub
    Partial Private Sub DeleteHotel(ByVal instance As Hotel)
    End Sub
    Partial Private Sub InsertPicture(ByVal instance As Picture)
    End Sub
    Partial Private Sub UpdatePicture(ByVal instance As Picture)
    End Sub
    Partial Private Sub DeletePicture(ByVal instance As Picture)
    End Sub
    Partial Private Sub InsertReservation(ByVal instance As Reservation)
    End Sub
    Partial Private Sub UpdateReservation(ByVal instance As Reservation)
    End Sub
    Partial Private Sub DeleteReservation(ByVal instance As Reservation)
    End Sub
    Partial Private Sub InsertReview(ByVal instance As Review)
    End Sub
    Partial Private Sub UpdateReview(ByVal instance As Review)
    End Sub
    Partial Private Sub DeleteReview(ByVal instance As Review)
    End Sub
    Partial Private Sub InsertRoom_Feature(ByVal instance As Room_Feature)
    End Sub
    Partial Private Sub UpdateRoom_Feature(ByVal instance As Room_Feature)
    End Sub
    Partial Private Sub DeleteRoom_Feature(ByVal instance As Room_Feature)
    End Sub
    Partial Private Sub InsertRoom_Type(ByVal instance As Room_Type)
    End Sub
    Partial Private Sub UpdateRoom_Type(ByVal instance As Room_Type)
    End Sub
    Partial Private Sub DeleteRoom_Type(ByVal instance As Room_Type)
    End Sub
    Partial Private Sub InsertMetro_Area(ByVal instance As Metro_Area)
    End Sub
    Partial Private Sub UpdateMetro_Area(ByVal instance As Metro_Area)
    End Sub
    Partial Private Sub DeleteMetro_Area(ByVal instance As Metro_Area)
    End Sub
    #End Region

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property Cities() As System.Data.Linq.Table(Of City)
            Get
                Return Me.GetTable(Of City)()
            End Get
        End Property

        Public ReadOnly Property Rooms() As System.Data.Linq.Table(Of Room)
            Get
                Return Me.GetTable(Of Room)()
            End Get
        End Property

        Public ReadOnly Property Features_Lists() As System.Data.Linq.Table(Of Features_List)
            Get
                Return Me.GetTable(Of Features_List)()
            End Get
        End Property

        Public ReadOnly Property Guests() As System.Data.Linq.Table(Of Guest)
            Get
                Return Me.GetTable(Of Guest)()
            End Get
        End Property

        Public ReadOnly Property Hotel_Features() As System.Data.Linq.Table(Of Hotel_Feature)
            Get
                Return Me.GetTable(Of Hotel_Feature)()
            End Get
        End Property

        Public ReadOnly Property Hotel_Images() As System.Data.Linq.Table(Of Hotel_Image)
            Get
                Return Me.GetTable(Of Hotel_Image)()
            End Get
        End Property

        Public ReadOnly Property Hotels() As System.Data.Linq.Table(Of Hotel)
            Get
                Return Me.GetTable(Of Hotel)()
            End Get
        End Property

        Public ReadOnly Property Pictures() As System.Data.Linq.Table(Of Picture)
            Get
                Return Me.GetTable(Of Picture)()
            End Get
        End Property

        Public ReadOnly Property Reservations() As System.Data.Linq.Table(Of Reservation)
            Get
                Return Me.GetTable(Of Reservation)()
            End Get
        End Property

        Public ReadOnly Property Reviews() As System.Data.Linq.Table(Of Review)
            Get
                Return Me.GetTable(Of Review)()
            End Get
        End Property

        Public ReadOnly Property Room_Features() As System.Data.Linq.Table(Of Room_Feature)
            Get
                Return Me.GetTable(Of Room_Feature)()
            End Get
        End Property

        Public ReadOnly Property Room_Types() As System.Data.Linq.Table(Of Room_Type)
            Get
                Return Me.GetTable(Of Room_Type)()
            End Get
        End Property

        Public ReadOnly Property Metro_Areas() As System.Data.Linq.Table(Of Metro_Area)
            Get
                Return Me.GetTable(Of Metro_Area)()
            End Get
        End Property
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cities")>
    Partial Public Class City
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _City_Name As String

        Private _State_Province As String

        Private _Country As String

        Private _Offer As String

        Private _City_Image As String

        Private _Metro_Area_ID? As Integer

        Private _Hotels As EntitySet(Of Hotel)

        Private _Metro_Area As EntityRef(Of Metro_Area)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCity_NameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnCity_NameChanged()
    End Sub
    Partial Private Sub OnState_ProvinceChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnState_ProvinceChanged()
    End Sub
    Partial Private Sub OnCountryChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnOfferChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnOfferChanged()
    End Sub
    Partial Private Sub OnCity_ImageChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnCity_ImageChanged()
    End Sub
    Partial Private Sub OnMetro_Area_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnMetro_Area_IDChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Hotels = New EntitySet(Of Hotel)(New Action(Of Hotel)(AddressOf Me.attach_Hotels), New Action(Of Hotel)(AddressOf Me.detach_Hotels))
            Me._Metro_Area = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City_Name", DbType:="NVarChar(MAX)")>
        Public Property City_Name() As String
            Get
                Return Me._City_Name
            End Get
            Set(ByVal value As String)
                If (Me._City_Name <> value) Then
                    Me.OnCity_NameChanging(value)
                    Me.SendPropertyChanging()
                    Me._City_Name = value
                    Me.SendPropertyChanged("City_Name")
                    Me.OnCity_NameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State_Province", DbType:="NVarChar(50)")>
        Public Property State_Province() As String
            Get
                Return Me._State_Province
            End Get
            Set(ByVal value As String)
                If (Me._State_Province <> value) Then
                    Me.OnState_ProvinceChanging(value)
                    Me.SendPropertyChanging()
                    Me._State_Province = value
                    Me.SendPropertyChanged("State_Province")
                    Me.OnState_ProvinceChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(MAX)")>
        Public Property Country() As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)
                If (Me._Country <> value) Then
                    Me.OnCountryChanging(value)
                    Me.SendPropertyChanging()
                    Me._Country = value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offer", DbType:="NVarChar(MAX)")>
        Public Property Offer() As String
            Get
                Return Me._Offer
            End Get
            Set(ByVal value As String)
                If (Me._Offer <> value) Then
                    Me.OnOfferChanging(value)
                    Me.SendPropertyChanging()
                    Me._Offer = value
                    Me.SendPropertyChanged("Offer")
                    Me.OnOfferChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City_Image", DbType:="NVarChar(50)")>
        Public Property City_Image() As String
            Get
                Return Me._City_Image
            End Get
            Set(ByVal value As String)
                If (Me._City_Image <> value) Then
                    Me.OnCity_ImageChanging(value)
                    Me.SendPropertyChanging()
                    Me._City_Image = value
                    Me.SendPropertyChanged("City_Image")
                    Me.OnCity_ImageChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Metro_Area_ID", DbType:="Int")>
        Public Property Metro_Area_ID() As Integer?
            Get
                Return Me._Metro_Area_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Metro_Area_ID.Equals(value)) Then
                    If Me._Metro_Area.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnMetro_Area_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Metro_Area_ID = value
                    Me.SendPropertyChanged("Metro_Area_ID")
                    Me.OnMetro_Area_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Hotel", Storage:="_Hotels", ThisKey:="ID", OtherKey:="City_ID")>
        Public Property Hotels() As EntitySet(Of Hotel)
            Get
                Return Me._Hotels
            End Get
            Set(ByVal value As EntitySet(Of Hotel))
                Me._Hotels.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Metro_Area_City", Storage:="_Metro_Area", ThisKey:="Metro_Area_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Metro_Area() As Metro_Area
            Get
                Return Me._Metro_Area.Entity
            End Get
            Set(ByVal value As Metro_Area)
                Dim previousValue As Metro_Area = Me._Metro_Area.Entity
                If ((previousValue IsNot value) OrElse (Me._Metro_Area.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Metro_Area.Entity = Nothing
                        previousValue.Cities.Remove(Me)
                    End If
                    Me._Metro_Area.Entity = value
                    If (value IsNot Nothing) Then
                        value.Cities.Add(Me)
                        Me._Metro_Area_ID = value.ID
                    Else
                        Me._Metro_Area_ID = Nothing
                    End If
                    Me.SendPropertyChanged("Metro_Area")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Hotels(ByVal entity As Hotel)
            Me.SendPropertyChanging()
            entity.City = Me
        End Sub

        Private Sub detach_Hotels(ByVal entity As Hotel)
            Me.SendPropertyChanging()
            entity.City = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Rooms")>
    Partial Public Class Room
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Hotel_ID? As Integer

        Private _Room_Type_ID? As Integer

        Private _Room_Short_Description As String

        Private _Nighly_Rate? As Decimal

        Private _Room_Image1 As String

        Private _Room_Image2 As String

        Private _Room_Image3 As String

        Private _Room_Image4 As String

        Private _Room_image5 As String

        Private _Pictures As EntitySet(Of Picture)

        Private _Reservations As EntitySet(Of Reservation)

        Private _Room_Features As EntitySet(Of Room_Feature)

        Private _Hotel As EntityRef(Of Hotel)

        Private _Room_Type As EntityRef(Of Room_Type)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnHotel_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnHotel_IDChanged()
    End Sub
    Partial Private Sub OnRoom_Type_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnRoom_Type_IDChanged()
    End Sub
    Partial Private Sub OnRoom_Short_DescriptionChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnRoom_Short_DescriptionChanged()
    End Sub
    Partial Private Sub OnNighly_RateChanging(ByVal value? As Decimal)
    End Sub
    Partial Private Sub OnNighly_RateChanged()
    End Sub
    Partial Private Sub OnRoom_Image1Changing(ByVal value As String)
    End Sub
    Partial Private Sub OnRoom_Image1Changed()
    End Sub
    Partial Private Sub OnRoom_Image2Changing(ByVal value As String)
    End Sub
    Partial Private Sub OnRoom_Image2Changed()
    End Sub
    Partial Private Sub OnRoom_Image3Changing(ByVal value As String)
    End Sub
    Partial Private Sub OnRoom_Image3Changed()
    End Sub
    Partial Private Sub OnRoom_Image4Changing(ByVal value As String)
    End Sub
    Partial Private Sub OnRoom_Image4Changed()
    End Sub
    Partial Private Sub OnRoom_image5Changing(ByVal value As String)
    End Sub
    Partial Private Sub OnRoom_image5Changed()
    End Sub
    #End Region

        Public Sub New()
            Me._Pictures = New EntitySet(Of Picture)(New Action(Of Picture)(AddressOf Me.attach_Pictures), New Action(Of Picture)(AddressOf Me.detach_Pictures))
            Me._Reservations = New EntitySet(Of Reservation)(New Action(Of Reservation)(AddressOf Me.attach_Reservations), New Action(Of Reservation)(AddressOf Me.detach_Reservations))
            Me._Room_Features = New EntitySet(Of Room_Feature)(New Action(Of Room_Feature)(AddressOf Me.attach_Room_Features), New Action(Of Room_Feature)(AddressOf Me.detach_Room_Features))
            Me._Hotel = Nothing
            Me._Room_Type = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hotel_ID", DbType:="Int")>
        Public Property Hotel_ID() As Integer?
            Get
                Return Me._Hotel_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Hotel_ID.Equals(value)) Then
                    If Me._Hotel.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnHotel_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Hotel_ID = value
                    Me.SendPropertyChanged("Hotel_ID")
                    Me.OnHotel_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Room_Type", Storage:="_Room_Type_ID", DbType:="Int")>
        Public Property Room_Type_ID() As Integer?
            Get
                Return Me._Room_Type_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Room_Type_ID.Equals(value)) Then
                    Me.OnRoom_Type_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Room_Type_ID = value
                    Me.SendPropertyChanged("Room_Type_ID")
                    Me.OnRoom_Type_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Short_Description", DbType:="NVarChar(MAX)")>
        Public Property Room_Short_Description() As String
            Get
                Return Me._Room_Short_Description
            End Get
            Set(ByVal value As String)
                If (Me._Room_Short_Description <> value) Then
                    Me.OnRoom_Short_DescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Room_Short_Description = value
                    Me.SendPropertyChanged("Room_Short_Description")
                    Me.OnRoom_Short_DescriptionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nighly_Rate", DbType:="Money")>
        Public Property Nighly_Rate() As Decimal?
            Get
                Return Me._Nighly_Rate
            End Get
            Set(ByVal value? As Decimal)
                If (Not Me._Nighly_Rate.Equals(value)) Then
                    Me.OnNighly_RateChanging(value)
                    Me.SendPropertyChanging()
                    Me._Nighly_Rate = value
                    Me.SendPropertyChanged("Nighly_Rate")
                    Me.OnNighly_RateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Image1", DbType:="NVarChar(50)")>
        Public Property Room_Image1() As String
            Get
                Return Me._Room_Image1
            End Get
            Set(ByVal value As String)
                If (Me._Room_Image1 <> value) Then
                    Me.OnRoom_Image1Changing(value)
                    Me.SendPropertyChanging()
                    Me._Room_Image1 = value
                    Me.SendPropertyChanged("Room_Image1")
                    Me.OnRoom_Image1Changed()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Image2", DbType:="NVarChar(50)")>
        Public Property Room_Image2() As String
            Get
                Return Me._Room_Image2
            End Get
            Set(ByVal value As String)
                If (Me._Room_Image2 <> value) Then
                    Me.OnRoom_Image2Changing(value)
                    Me.SendPropertyChanging()
                    Me._Room_Image2 = value
                    Me.SendPropertyChanged("Room_Image2")
                    Me.OnRoom_Image2Changed()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Image3", DbType:="NVarChar(50)")>
        Public Property Room_Image3() As String
            Get
                Return Me._Room_Image3
            End Get
            Set(ByVal value As String)
                If (Me._Room_Image3 <> value) Then
                    Me.OnRoom_Image3Changing(value)
                    Me.SendPropertyChanging()
                    Me._Room_Image3 = value
                    Me.SendPropertyChanged("Room_Image3")
                    Me.OnRoom_Image3Changed()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Image4", DbType:="NVarChar(50)")>
        Public Property Room_Image4() As String
            Get
                Return Me._Room_Image4
            End Get
            Set(ByVal value As String)
                If (Me._Room_Image4 <> value) Then
                    Me.OnRoom_Image4Changing(value)
                    Me.SendPropertyChanging()
                    Me._Room_Image4 = value
                    Me.SendPropertyChanged("Room_Image4")
                    Me.OnRoom_Image4Changed()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_image5", DbType:="NVarChar(50)")>
        Public Property Room_image5() As String
            Get
                Return Me._Room_image5
            End Get
            Set(ByVal value As String)
                If (Me._Room_image5 <> value) Then
                    Me.OnRoom_image5Changing(value)
                    Me.SendPropertyChanging()
                    Me._Room_image5 = value
                    Me.SendPropertyChanged("Room_image5")
                    Me.OnRoom_image5Changed()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Room_Picture", Storage:="_Pictures", ThisKey:="ID", OtherKey:="Room_ID")>
        Public Property Pictures() As EntitySet(Of Picture)
            Get
                Return Me._Pictures
            End Get
            Set(ByVal value As EntitySet(Of Picture))
                Me._Pictures.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Room_Reservation", Storage:="_Reservations", ThisKey:="ID", OtherKey:="Room_ID")>
        Public Property Reservations() As EntitySet(Of Reservation)
            Get
                Return Me._Reservations
            End Get
            Set(ByVal value As EntitySet(Of Reservation))
                Me._Reservations.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Room_Room_Feature", Storage:="_Room_Features", ThisKey:="ID", OtherKey:="Room_ID")>
        Public Property Room_Features() As EntitySet(Of Room_Feature)
            Get
                Return Me._Room_Features
            End Get
            Set(ByVal value As EntitySet(Of Room_Feature))
                Me._Room_Features.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hotel_Room", Storage:="_Hotel", ThisKey:="Hotel_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Hotel() As Hotel
            Get
                Return Me._Hotel.Entity
            End Get
            Set(ByVal value As Hotel)
                Dim previousValue As Hotel = Me._Hotel.Entity
                If ((previousValue IsNot value) OrElse (Me._Hotel.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Hotel.Entity = Nothing
                        previousValue.Rooms.Remove(Me)
                    End If
                    Me._Hotel.Entity = value
                    If (value IsNot Nothing) Then
                        value.Rooms.Add(Me)
                        Me._Hotel_ID = value.ID
                    Else
                        Me._Hotel_ID = Nothing
                    End If
                    Me.SendPropertyChanged("Hotel")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Room_Type_Room", Storage:="_Room_Type", ThisKey:="Room_Type_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Room_Type() As Room_Type
            Get
                Return Me._Room_Type.Entity
            End Get
            Set(ByVal value As Room_Type)
                Dim previousValue As Room_Type = Me._Room_Type.Entity
                If ((previousValue IsNot value) OrElse (Me._Room_Type.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Room_Type.Entity = Nothing
                        previousValue.Rooms.Remove(Me)
                    End If
                    Me._Room_Type.Entity = value
                    If (value IsNot Nothing) Then
                        value.Rooms.Add(Me)
                        Me._Room_Type_ID = value.ID
                    Else
                        Me._Room_Type_ID = Nothing
                    End If
                    Me.SendPropertyChanged("Room_Type")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Pictures(ByVal entity As Picture)
            Me.SendPropertyChanging()
            entity.Room = Me
        End Sub

        Private Sub detach_Pictures(ByVal entity As Picture)
            Me.SendPropertyChanging()
            entity.Room = Nothing
        End Sub

        Private Sub attach_Reservations(ByVal entity As Reservation)
            Me.SendPropertyChanging()
            entity.Room = Me
        End Sub

        Private Sub detach_Reservations(ByVal entity As Reservation)
            Me.SendPropertyChanging()
            entity.Room = Nothing
        End Sub

        Private Sub attach_Room_Features(ByVal entity As Room_Feature)
            Me.SendPropertyChanging()
            entity.Room = Me
        End Sub

        Private Sub detach_Room_Features(ByVal entity As Room_Feature)
            Me.SendPropertyChanging()
            entity.Room = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Features_List")>
    Partial Public Class Features_List
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Feature_Name As String

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFeature_NameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnFeature_NameChanged()
    End Sub
    #End Region

        Public Sub New()
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Feature_Name", DbType:="NVarChar(MAX)")>
        Public Property Feature_Name() As String
            Get
                Return Me._Feature_Name
            End Get
            Set(ByVal value As String)
                If (Me._Feature_Name <> value) Then
                    Me.OnFeature_NameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Feature_Name = value
                    Me.SendPropertyChanged("Feature_Name")
                    Me.OnFeature_NameChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Guests")>
    Partial Public Class Guest
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _First_Name As String

        Private _Last_Name As String

        Private _Title As String

        Private _Address As String

        Private _City As String

        Private _State As String

        Private _Postal_Code As String

        Private _Country As String

        Private _Phone_Number As String

        Private _Email As String

        Private _Password As String

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFirst_NameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnFirst_NameChanged()
    End Sub
    Partial Private Sub OnLast_NameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnLast_NameChanged()
    End Sub
    Partial Private Sub OnTitleChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnAddressChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCityChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostal_CodeChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnPostal_CodeChanged()
    End Sub
    Partial Private Sub OnCountryChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnPhone_NumberChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnPhone_NumberChanged()
    End Sub
    Partial Private Sub OnEmailChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    #End Region

        Public Sub New()
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_First_Name", DbType:="NVarChar(255)")>
        Public Property First_Name() As String
            Get
                Return Me._First_Name
            End Get
            Set(ByVal value As String)
                If (Me._First_Name <> value) Then
                    Me.OnFirst_NameChanging(value)
                    Me.SendPropertyChanging()
                    Me._First_Name = value
                    Me.SendPropertyChanged("First_Name")
                    Me.OnFirst_NameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Last_Name", DbType:="NVarChar(255)")>
        Public Property Last_Name() As String
            Get
                Return Me._Last_Name
            End Get
            Set(ByVal value As String)
                If (Me._Last_Name <> value) Then
                    Me.OnLast_NameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Last_Name = value
                    Me.SendPropertyChanged("Last_Name")
                    Me.OnLast_NameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255)")>
        Public Property Title() As String
            Get
                Return Me._Title
            End Get
            Set(ByVal value As String)
                If (Me._Title <> value) Then
                    Me.OnTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._Title = value
                    Me.SendPropertyChanged("Title")
                    Me.OnTitleChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(255)")>
        Public Property Address() As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)
                If (Me._Address <> value) Then
                    Me.OnAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._Address = value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(255)")>
        Public Property City() As String
            Get
                Return Me._City
            End Get
            Set(ByVal value As String)
                If (Me._City <> value) Then
                    Me.OnCityChanging(value)
                    Me.SendPropertyChanging()
                    Me._City = value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(255)")>
        Public Property State() As String
            Get
                Return Me._State
            End Get
            Set(ByVal value As String)
                If (Me._State <> value) Then
                    Me.OnStateChanging(value)
                    Me.SendPropertyChanging()
                    Me._State = value
                    Me.SendPropertyChanged("State")
                    Me.OnStateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Postal_Code", DbType:="NVarChar(255)")>
        Public Property Postal_Code() As String
            Get
                Return Me._Postal_Code
            End Get
            Set(ByVal value As String)
                If (Me._Postal_Code <> value) Then
                    Me.OnPostal_CodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._Postal_Code = value
                    Me.SendPropertyChanged("Postal_Code")
                    Me.OnPostal_CodeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(255)")>
        Public Property Country() As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)
                If (Me._Country <> value) Then
                    Me.OnCountryChanging(value)
                    Me.SendPropertyChanging()
                    Me._Country = value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone_Number", DbType:="NVarChar(255)")>
        Public Property Phone_Number() As String
            Get
                Return Me._Phone_Number
            End Get
            Set(ByVal value As String)
                If (Me._Phone_Number <> value) Then
                    Me.OnPhone_NumberChanging(value)
                    Me.SendPropertyChanging()
                    Me._Phone_Number = value
                    Me.SendPropertyChanged("Phone_Number")
                    Me.OnPhone_NumberChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(255)")>
        Public Property Email() As String
            Get
                Return Me._Email
            End Get
            Set(ByVal value As String)
                If (Me._Email <> value) Then
                    Me.OnEmailChanging(value)
                    Me.SendPropertyChanging()
                    Me._Email = value
                    Me.SendPropertyChanged("Email")
                    Me.OnEmailChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(255)")>
        Public Property Password() As String
            Get
                Return Me._Password
            End Get
            Set(ByVal value As String)
                If (Me._Password <> value) Then
                    Me.OnPasswordChanging(value)
                    Me.SendPropertyChanging()
                    Me._Password = value
                    Me.SendPropertyChanged("Password")
                    Me.OnPasswordChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Hotel_Features")>
    Partial Public Class Hotel_Feature
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Hotel_ID? As Integer

        Private _Description As String

        Private _Hotel As EntityRef(Of Hotel)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnHotel_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnHotel_IDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Hotel = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hotel_ID", DbType:="Int")>
        Public Property Hotel_ID() As Integer?
            Get
                Return Me._Hotel_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Hotel_ID.Equals(value)) Then
                    If Me._Hotel.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnHotel_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Hotel_ID = value
                    Me.SendPropertyChanged("Hotel_ID")
                    Me.OnHotel_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255)")>
        Public Property Description() As String
            Get
                Return Me._Description
            End Get
            Set(ByVal value As String)
                If (Me._Description <> value) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hotel_Hotel_Feature", Storage:="_Hotel", ThisKey:="Hotel_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Hotel() As Hotel
            Get
                Return Me._Hotel.Entity
            End Get
            Set(ByVal value As Hotel)
                Dim previousValue As Hotel = Me._Hotel.Entity
                If ((previousValue IsNot value) OrElse (Me._Hotel.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Hotel.Entity = Nothing
                        previousValue.Hotel_Features.Remove(Me)
                    End If
                    Me._Hotel.Entity = value
                    If (value IsNot Nothing) Then
                        value.Hotel_Features.Add(Me)
                        Me._Hotel_ID = value.ID
                    Else
                        Me._Hotel_ID = Nothing
                    End If
                    Me.SendPropertyChanged("Hotel")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Hotel_Images")>
    Partial Public Class Hotel_Image
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Hotel_ID? As Integer

        Private _Image_Id As String

        Private _Hotel As EntityRef(Of Hotel)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnHotel_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnHotel_IDChanged()
    End Sub
    Partial Private Sub OnImage_IdChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnImage_IdChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Hotel = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hotel_ID", DbType:="Int")>
        Public Property Hotel_ID() As Integer?
            Get
                Return Me._Hotel_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Hotel_ID.Equals(value)) Then
                    If Me._Hotel.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnHotel_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Hotel_ID = value
                    Me.SendPropertyChanged("Hotel_ID")
                    Me.OnHotel_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image_Id", DbType:="NVarChar(100)")>
        Public Property Image_Id() As String
            Get
                Return Me._Image_Id
            End Get
            Set(ByVal value As String)
                If (Me._Image_Id <> value) Then
                    Me.OnImage_IdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Image_Id = value
                    Me.SendPropertyChanged("Image_Id")
                    Me.OnImage_IdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hotel_Hotel_Image", Storage:="_Hotel", ThisKey:="Hotel_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Hotel() As Hotel
            Get
                Return Me._Hotel.Entity
            End Get
            Set(ByVal value As Hotel)
                Dim previousValue As Hotel = Me._Hotel.Entity
                If ((previousValue IsNot value) OrElse (Me._Hotel.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Hotel.Entity = Nothing
                        previousValue.Hotel_Images.Remove(Me)
                    End If
                    Me._Hotel.Entity = value
                    If (value IsNot Nothing) Then
                        value.Hotel_Images.Add(Me)
                        Me._Hotel_ID = value.ID
                    Else
                        Me._Hotel_ID = Nothing
                    End If
                    Me.SendPropertyChanged("Hotel")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Hotels")>
    Partial Public Class Hotel
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Hotel_Name As String

        Private _Description As String

        Private _Hotel_Class As String

        Private _Room_Count? As Integer

        Private _Location_Rating As String

        Private _Avg_Customer_Rating? As Double

        Private _Our_Rating? As Double

        Private _Address As String

        Private _City_ID? As Integer

        Private _Postal_Code As String

        Private _Phone As String

        Private _Website As String

        Private _Metro_Area As String

        Private _Rooms As EntitySet(Of Room)

        Private _Hotel_Features As EntitySet(Of Hotel_Feature)

        Private _Hotel_Images As EntitySet(Of Hotel_Image)

        Private _Pictures As EntitySet(Of Picture)

        Private _Reviews As EntitySet(Of Review)

        Private _City1 As EntityRef(Of City)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnHotel_NameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnHotel_NameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnHotel_ClassChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnHotel_ClassChanged()
    End Sub
    Partial Private Sub OnRoom_CountChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnRoom_CountChanged()
    End Sub
    Partial Private Sub OnLocation_RatingChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnLocation_RatingChanged()
    End Sub
    Partial Private Sub OnAvg_Customer_RatingChanging(ByVal value? As Double)
    End Sub
    Partial Private Sub OnAvg_Customer_RatingChanged()
    End Sub
    Partial Private Sub OnOur_RatingChanging(ByVal value? As Double)
    End Sub
    Partial Private Sub OnOur_RatingChanged()
    End Sub
    Partial Private Sub OnAddressChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCity_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnCity_IDChanged()
    End Sub
    Partial Private Sub OnPostal_CodeChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnPostal_CodeChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnWebsiteChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnWebsiteChanged()
    End Sub
    Partial Private Sub OnMetro_AreaChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnMetro_AreaChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Rooms = New EntitySet(Of Room)(New Action(Of Room)(AddressOf Me.attach_Rooms), New Action(Of Room)(AddressOf Me.detach_Rooms))
            Me._Hotel_Features = New EntitySet(Of Hotel_Feature)(New Action(Of Hotel_Feature)(AddressOf Me.attach_Hotel_Features), New Action(Of Hotel_Feature)(AddressOf Me.detach_Hotel_Features))
            Me._Hotel_Images = New EntitySet(Of Hotel_Image)(New Action(Of Hotel_Image)(AddressOf Me.attach_Hotel_Images), New Action(Of Hotel_Image)(AddressOf Me.detach_Hotel_Images))
            Me._Pictures = New EntitySet(Of Picture)(New Action(Of Picture)(AddressOf Me.attach_Pictures), New Action(Of Picture)(AddressOf Me.detach_Pictures))
            Me._Reviews = New EntitySet(Of Review)(New Action(Of Review)(AddressOf Me.attach_Reviews), New Action(Of Review)(AddressOf Me.detach_Reviews))
            Me._City1 = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hotel_Name", DbType:="NVarChar(255)")>
        Public Property Hotel_Name() As String
            Get
                Return Me._Hotel_Name
            End Get
            Set(ByVal value As String)
                If (Me._Hotel_Name <> value) Then
                    Me.OnHotel_NameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Hotel_Name = value
                    Me.SendPropertyChanged("Hotel_Name")
                    Me.OnHotel_NameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>
        Public Property Description() As String
            Get
                Return Me._Description
            End Get
            Set(ByVal value As String)
                If (Me._Description <> value) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hotel_Class", DbType:="NVarChar(10)")>
        Public Property Hotel_Class() As String
            Get
                Return Me._Hotel_Class
            End Get
            Set(ByVal value As String)
                If (Me._Hotel_Class <> value) Then
                    Me.OnHotel_ClassChanging(value)
                    Me.SendPropertyChanging()
                    Me._Hotel_Class = value
                    Me.SendPropertyChanged("Hotel_Class")
                    Me.OnHotel_ClassChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Count", DbType:="Int")>
        Public Property Room_Count() As Integer?
            Get
                Return Me._Room_Count
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Room_Count.Equals(value)) Then
                    Me.OnRoom_CountChanging(value)
                    Me.SendPropertyChanging()
                    Me._Room_Count = value
                    Me.SendPropertyChanged("Room_Count")
                    Me.OnRoom_CountChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location_Rating", DbType:="NChar(10)")>
        Public Property Location_Rating() As String
            Get
                Return Me._Location_Rating
            End Get
            Set(ByVal value As String)
                If (Me._Location_Rating <> value) Then
                    Me.OnLocation_RatingChanging(value)
                    Me.SendPropertyChanging()
                    Me._Location_Rating = value
                    Me.SendPropertyChanged("Location_Rating")
                    Me.OnLocation_RatingChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Avg_Customer_Rating", DbType:="Float")>
        Public Property Avg_Customer_Rating() As Double?
            Get
                Return Me._Avg_Customer_Rating
            End Get
            Set(ByVal value? As Double)
                If (Not Me._Avg_Customer_Rating.Equals(value)) Then
                    Me.OnAvg_Customer_RatingChanging(value)
                    Me.SendPropertyChanging()
                    Me._Avg_Customer_Rating = value
                    Me.SendPropertyChanged("Avg_Customer_Rating")
                    Me.OnAvg_Customer_RatingChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Our_Rating", DbType:="Float")>
        Public Property Our_Rating() As Double?
            Get
                Return Me._Our_Rating
            End Get
            Set(ByVal value? As Double)
                If (Not Me._Our_Rating.Equals(value)) Then
                    Me.OnOur_RatingChanging(value)
                    Me.SendPropertyChanging()
                    Me._Our_Rating = value
                    Me.SendPropertyChanged("Our_Rating")
                    Me.OnOur_RatingChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(255)")>
        Public Property Address() As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)
                If (Me._Address <> value) Then
                    Me.OnAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._Address = value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City_ID", DbType:="Int")>
        Public Property City_ID() As Integer?
            Get
                Return Me._City_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._City_ID.Equals(value)) Then
                    If Me._City1.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnCity_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._City_ID = value
                    Me.SendPropertyChanged("City_ID")
                    Me.OnCity_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Postal_Code", DbType:="NVarChar(25)")>
        Public Property Postal_Code() As String
            Get
                Return Me._Postal_Code
            End Get
            Set(ByVal value As String)
                If (Me._Postal_Code <> value) Then
                    Me.OnPostal_CodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._Postal_Code = value
                    Me.SendPropertyChanged("Postal_Code")
                    Me.OnPostal_CodeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(25)")>
        Public Property Phone() As String
            Get
                Return Me._Phone
            End Get
            Set(ByVal value As String)
                If (Me._Phone <> value) Then
                    Me.OnPhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._Phone = value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Website", DbType:="NVarChar(100)")>
        Public Property Website() As String
            Get
                Return Me._Website
            End Get
            Set(ByVal value As String)
                If (Me._Website <> value) Then
                    Me.OnWebsiteChanging(value)
                    Me.SendPropertyChanging()
                    Me._Website = value
                    Me.SendPropertyChanged("Website")
                    Me.OnWebsiteChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Metro_Area", DbType:="NVarChar(255)")>
        Public Property Metro_Area() As String
            Get
                Return Me._Metro_Area
            End Get
            Set(ByVal value As String)
                If (Me._Metro_Area <> value) Then
                    Me.OnMetro_AreaChanging(value)
                    Me.SendPropertyChanging()
                    Me._Metro_Area = value
                    Me.SendPropertyChanged("Metro_Area")
                    Me.OnMetro_AreaChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hotel_Room", Storage:="_Rooms", ThisKey:="ID", OtherKey:="Hotel_ID")>
        Public Property Rooms() As EntitySet(Of Room)
            Get
                Return Me._Rooms
            End Get
            Set(ByVal value As EntitySet(Of Room))
                Me._Rooms.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hotel_Hotel_Feature", Storage:="_Hotel_Features", ThisKey:="ID", OtherKey:="Hotel_ID")>
        Public Property Hotel_Features() As EntitySet(Of Hotel_Feature)
            Get
                Return Me._Hotel_Features
            End Get
            Set(ByVal value As EntitySet(Of Hotel_Feature))
                Me._Hotel_Features.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hotel_Hotel_Image", Storage:="_Hotel_Images", ThisKey:="ID", OtherKey:="Hotel_ID")>
        Public Property Hotel_Images() As EntitySet(Of Hotel_Image)
            Get
                Return Me._Hotel_Images
            End Get
            Set(ByVal value As EntitySet(Of Hotel_Image))
                Me._Hotel_Images.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hotel_Picture", Storage:="_Pictures", ThisKey:="ID", OtherKey:="Hotel_ID")>
        Public Property Pictures() As EntitySet(Of Picture)
            Get
                Return Me._Pictures
            End Get
            Set(ByVal value As EntitySet(Of Picture))
                Me._Pictures.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hotel_Review", Storage:="_Reviews", ThisKey:="ID", OtherKey:="Hotel_ID")>
        Public Property Reviews() As EntitySet(Of Review)
            Get
                Return Me._Reviews
            End Get
            Set(ByVal value As EntitySet(Of Review))
                Me._Reviews.Assign(value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Hotel", Storage:="_City1", ThisKey:="City_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property City() As City
            Get
                Return Me._City1.Entity
            End Get
            Set(ByVal value As City)
                Dim previousValue As City = Me._City1.Entity
                If ((previousValue IsNot value) OrElse (Me._City1.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._City1.Entity = Nothing
                        previousValue.Hotels.Remove(Me)
                    End If
                    Me._City1.Entity = value
                    If (value IsNot Nothing) Then
                        value.Hotels.Add(Me)
                        Me._City_ID = value.ID
                    Else
                        Me._City_ID = Nothing
                    End If
                    Me.SendPropertyChanged("City")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Rooms(ByVal entity As Room)
            Me.SendPropertyChanging()
            entity.Hotel = Me
        End Sub

        Private Sub detach_Rooms(ByVal entity As Room)
            Me.SendPropertyChanging()
            entity.Hotel = Nothing
        End Sub

        Private Sub attach_Hotel_Features(ByVal entity As Hotel_Feature)
            Me.SendPropertyChanging()
            entity.Hotel = Me
        End Sub

        Private Sub detach_Hotel_Features(ByVal entity As Hotel_Feature)
            Me.SendPropertyChanging()
            entity.Hotel = Nothing
        End Sub

        Private Sub attach_Hotel_Images(ByVal entity As Hotel_Image)
            Me.SendPropertyChanging()
            entity.Hotel = Me
        End Sub

        Private Sub detach_Hotel_Images(ByVal entity As Hotel_Image)
            Me.SendPropertyChanging()
            entity.Hotel = Nothing
        End Sub

        Private Sub attach_Pictures(ByVal entity As Picture)
            Me.SendPropertyChanging()
            entity.Hotel = Me
        End Sub

        Private Sub detach_Pictures(ByVal entity As Picture)
            Me.SendPropertyChanging()
            entity.Hotel = Nothing
        End Sub

        Private Sub attach_Reviews(ByVal entity As Review)
            Me.SendPropertyChanging()
            entity.Hotel = Me
        End Sub

        Private Sub detach_Reviews(ByVal entity As Review)
            Me.SendPropertyChanging()
            entity.Hotel = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Pictures")>
    Partial Public Class Picture
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Picture_Id As String

        Private _Hotel_ID? As Integer

        Private _Room_ID? As Integer

        Private _Hotel As EntityRef(Of Hotel)

        Private _Room As EntityRef(Of Room)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnPicture_IdChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnPicture_IdChanged()
    End Sub
    Partial Private Sub OnHotel_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnHotel_IDChanged()
    End Sub
    Partial Private Sub OnRoom_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnRoom_IDChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Hotel = Nothing
            Me._Room = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Picture_Id", DbType:="NVarChar(50)")>
        Public Property Picture_Id() As String
            Get
                Return Me._Picture_Id
            End Get
            Set(ByVal value As String)
                If (Me._Picture_Id <> value) Then
                    Me.OnPicture_IdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Picture_Id = value
                    Me.SendPropertyChanged("Picture_Id")
                    Me.OnPicture_IdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hotel_ID", DbType:="Int")>
        Public Property Hotel_ID() As Integer?
            Get
                Return Me._Hotel_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Hotel_ID.Equals(value)) Then
                    If Me._Hotel.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnHotel_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Hotel_ID = value
                    Me.SendPropertyChanged("Hotel_ID")
                    Me.OnHotel_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_ID", DbType:="Int")>
        Public Property Room_ID() As Integer?
            Get
                Return Me._Room_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Room_ID.Equals(value)) Then
                    If Me._Room.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnRoom_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Room_ID = value
                    Me.SendPropertyChanged("Room_ID")
                    Me.OnRoom_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hotel_Picture", Storage:="_Hotel", ThisKey:="Hotel_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Hotel() As Hotel
            Get
                Return Me._Hotel.Entity
            End Get
            Set(ByVal value As Hotel)
                Dim previousValue As Hotel = Me._Hotel.Entity
                If ((previousValue IsNot value) OrElse (Me._Hotel.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Hotel.Entity = Nothing
                        previousValue.Pictures.Remove(Me)
                    End If
                    Me._Hotel.Entity = value
                    If (value IsNot Nothing) Then
                        value.Pictures.Add(Me)
                        Me._Hotel_ID = value.ID
                    Else
                        Me._Hotel_ID = Nothing
                    End If
                    Me.SendPropertyChanged("Hotel")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Room_Picture", Storage:="_Room", ThisKey:="Room_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Room() As Room
            Get
                Return Me._Room.Entity
            End Get
            Set(ByVal value As Room)
                Dim previousValue As Room = Me._Room.Entity
                If ((previousValue IsNot value) OrElse (Me._Room.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Room.Entity = Nothing
                        previousValue.Pictures.Remove(Me)
                    End If
                    Me._Room.Entity = value
                    If (value IsNot Nothing) Then
                        value.Pictures.Add(Me)
                        Me._Room_ID = value.ID
                    Else
                        Me._Room_ID = Nothing
                    End If
                    Me.SendPropertyChanged("Room")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Reservations")>
    Partial Public Class Reservation
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Room_ID? As Integer

        Private _Check_In? As Date

        Private _Check_Out? As Date

        Private _Amount_Due? As Decimal

        Private _Amount_Paid? As Decimal

        Private _Reservation_Satus? As Integer

        Private _Number_Of_Adults? As Integer

        Private _Number_Of_Children? As Integer

        Private _Special_Requests As String

        Private _Room As EntityRef(Of Room)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnRoom_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnRoom_IDChanged()
    End Sub
    Partial Private Sub OnCheck_InChanging(ByVal value? As Date)
    End Sub
    Partial Private Sub OnCheck_InChanged()
    End Sub
    Partial Private Sub OnCheck_OutChanging(ByVal value? As Date)
    End Sub
    Partial Private Sub OnCheck_OutChanged()
    End Sub
    Partial Private Sub OnAmount_DueChanging(ByVal value? As Decimal)
    End Sub
    Partial Private Sub OnAmount_DueChanged()
    End Sub
    Partial Private Sub OnAmount_PaidChanging(ByVal value? As Decimal)
    End Sub
    Partial Private Sub OnAmount_PaidChanged()
    End Sub
    Partial Private Sub OnReservation_SatusChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnReservation_SatusChanged()
    End Sub
    Partial Private Sub OnNumber_Of_AdultsChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnNumber_Of_AdultsChanged()
    End Sub
    Partial Private Sub OnNumber_Of_ChildrenChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnNumber_Of_ChildrenChanged()
    End Sub
    Partial Private Sub OnSpecial_RequestsChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnSpecial_RequestsChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Room = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_ID", DbType:="Int")>
        Public Property Room_ID() As Integer?
            Get
                Return Me._Room_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Room_ID.Equals(value)) Then
                    If Me._Room.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnRoom_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Room_ID = value
                    Me.SendPropertyChanged("Room_ID")
                    Me.OnRoom_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Check_In", DbType:="DateTime")>
        Public Property Check_In() As Date?
            Get
                Return Me._Check_In
            End Get
            Set(ByVal value? As Date)
                If (Not Me._Check_In.Equals(value)) Then
                    Me.OnCheck_InChanging(value)
                    Me.SendPropertyChanging()
                    Me._Check_In = value
                    Me.SendPropertyChanged("Check_In")
                    Me.OnCheck_InChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Check_Out", DbType:="DateTime")>
        Public Property Check_Out() As Date?
            Get
                Return Me._Check_Out
            End Get
            Set(ByVal value? As Date)
                If (Not Me._Check_Out.Equals(value)) Then
                    Me.OnCheck_OutChanging(value)
                    Me.SendPropertyChanging()
                    Me._Check_Out = value
                    Me.SendPropertyChanged("Check_Out")
                    Me.OnCheck_OutChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount_Due", DbType:="Money")>
        Public Property Amount_Due() As Decimal?
            Get
                Return Me._Amount_Due
            End Get
            Set(ByVal value? As Decimal)
                If (Not Me._Amount_Due.Equals(value)) Then
                    Me.OnAmount_DueChanging(value)
                    Me.SendPropertyChanging()
                    Me._Amount_Due = value
                    Me.SendPropertyChanged("Amount_Due")
                    Me.OnAmount_DueChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount_Paid", DbType:="Money")>
        Public Property Amount_Paid() As Decimal?
            Get
                Return Me._Amount_Paid
            End Get
            Set(ByVal value? As Decimal)
                If (Not Me._Amount_Paid.Equals(value)) Then
                    Me.OnAmount_PaidChanging(value)
                    Me.SendPropertyChanging()
                    Me._Amount_Paid = value
                    Me.SendPropertyChanged("Amount_Paid")
                    Me.OnAmount_PaidChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reservation_Satus", DbType:="Int")>
        Public Property Reservation_Satus() As Integer?
            Get
                Return Me._Reservation_Satus
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Reservation_Satus.Equals(value)) Then
                    Me.OnReservation_SatusChanging(value)
                    Me.SendPropertyChanging()
                    Me._Reservation_Satus = value
                    Me.SendPropertyChanged("Reservation_Satus")
                    Me.OnReservation_SatusChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number_Of_Adults", DbType:="Int")>
        Public Property Number_Of_Adults() As Integer?
            Get
                Return Me._Number_Of_Adults
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Number_Of_Adults.Equals(value)) Then
                    Me.OnNumber_Of_AdultsChanging(value)
                    Me.SendPropertyChanging()
                    Me._Number_Of_Adults = value
                    Me.SendPropertyChanged("Number_Of_Adults")
                    Me.OnNumber_Of_AdultsChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number_Of_Children", DbType:="Int")>
        Public Property Number_Of_Children() As Integer?
            Get
                Return Me._Number_Of_Children
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Number_Of_Children.Equals(value)) Then
                    Me.OnNumber_Of_ChildrenChanging(value)
                    Me.SendPropertyChanging()
                    Me._Number_Of_Children = value
                    Me.SendPropertyChanged("Number_Of_Children")
                    Me.OnNumber_Of_ChildrenChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Special_Requests", DbType:="NVarChar(MAX)")>
        Public Property Special_Requests() As String
            Get
                Return Me._Special_Requests
            End Get
            Set(ByVal value As String)
                If (Me._Special_Requests <> value) Then
                    Me.OnSpecial_RequestsChanging(value)
                    Me.SendPropertyChanging()
                    Me._Special_Requests = value
                    Me.SendPropertyChanged("Special_Requests")
                    Me.OnSpecial_RequestsChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Room_Reservation", Storage:="_Room", ThisKey:="Room_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Room() As Room
            Get
                Return Me._Room.Entity
            End Get
            Set(ByVal value As Room)
                Dim previousValue As Room = Me._Room.Entity
                If ((previousValue IsNot value) OrElse (Me._Room.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Room.Entity = Nothing
                        previousValue.Reservations.Remove(Me)
                    End If
                    Me._Room.Entity = value
                    If (value IsNot Nothing) Then
                        value.Reservations.Add(Me)
                        Me._Room_ID = value.ID
                    Else
                        Me._Room_ID = Nothing
                    End If
                    Me.SendPropertyChanged("Room")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Reviews")>
    Partial Public Class Review
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Hotel_ID? As Integer

        Private _Review_Text As String

        Private _Posted_On? As Date

        Private _Rating? As Double

        Private _Reviewer_Name As String

        Private _Hotel As EntityRef(Of Hotel)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnHotel_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnHotel_IDChanged()
    End Sub
    Partial Private Sub OnReview_TextChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnReview_TextChanged()
    End Sub
    Partial Private Sub OnPosted_OnChanging(ByVal value? As Date)
    End Sub
    Partial Private Sub OnPosted_OnChanged()
    End Sub
    Partial Private Sub OnRatingChanging(ByVal value? As Double)
    End Sub
    Partial Private Sub OnRatingChanged()
    End Sub
    Partial Private Sub OnReviewer_NameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnReviewer_NameChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Hotel = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hotel_ID", DbType:="Int")>
        Public Property Hotel_ID() As Integer?
            Get
                Return Me._Hotel_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Hotel_ID.Equals(value)) Then
                    If Me._Hotel.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnHotel_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Hotel_ID = value
                    Me.SendPropertyChanged("Hotel_ID")
                    Me.OnHotel_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Review_Text", DbType:="NVarChar(MAX)")>
        Public Property Review_Text() As String
            Get
                Return Me._Review_Text
            End Get
            Set(ByVal value As String)
                If (Me._Review_Text <> value) Then
                    Me.OnReview_TextChanging(value)
                    Me.SendPropertyChanging()
                    Me._Review_Text = value
                    Me.SendPropertyChanged("Review_Text")
                    Me.OnReview_TextChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Posted_On", DbType:="DateTime")>
        Public Property Posted_On() As Date?
            Get
                Return Me._Posted_On
            End Get
            Set(ByVal value? As Date)
                If (Not Me._Posted_On.Equals(value)) Then
                    Me.OnPosted_OnChanging(value)
                    Me.SendPropertyChanging()
                    Me._Posted_On = value
                    Me.SendPropertyChanged("Posted_On")
                    Me.OnPosted_OnChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rating", DbType:="Float")>
        Public Property Rating() As Double?
            Get
                Return Me._Rating
            End Get
            Set(ByVal value? As Double)
                If (Not Me._Rating.Equals(value)) Then
                    Me.OnRatingChanging(value)
                    Me.SendPropertyChanging()
                    Me._Rating = value
                    Me.SendPropertyChanged("Rating")
                    Me.OnRatingChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reviewer_Name", DbType:="NVarChar(255)")>
        Public Property Reviewer_Name() As String
            Get
                Return Me._Reviewer_Name
            End Get
            Set(ByVal value As String)
                If (Me._Reviewer_Name <> value) Then
                    Me.OnReviewer_NameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Reviewer_Name = value
                    Me.SendPropertyChanged("Reviewer_Name")
                    Me.OnReviewer_NameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hotel_Review", Storage:="_Hotel", ThisKey:="Hotel_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Hotel() As Hotel
            Get
                Return Me._Hotel.Entity
            End Get
            Set(ByVal value As Hotel)
                Dim previousValue As Hotel = Me._Hotel.Entity
                If ((previousValue IsNot value) OrElse (Me._Hotel.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Hotel.Entity = Nothing
                        previousValue.Reviews.Remove(Me)
                    End If
                    Me._Hotel.Entity = value
                    If (value IsNot Nothing) Then
                        value.Reviews.Add(Me)
                        Me._Hotel_ID = value.ID
                    Else
                        Me._Hotel_ID = Nothing
                    End If
                    Me.SendPropertyChanged("Hotel")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Room_Features")>
    Partial Public Class Room_Feature
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Room_ID? As Integer

        Private _Description As String

        Private _Feature_Image As String

        Private _Room As EntityRef(Of Room)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnRoom_IDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnRoom_IDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnFeature_ImageChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnFeature_ImageChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Room = Nothing
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_ID", DbType:="Int")>
        Public Property Room_ID() As Integer?
            Get
                Return Me._Room_ID
            End Get
            Set(ByVal value? As Integer)
                If (Not Me._Room_ID.Equals(value)) Then
                    If Me._Room.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnRoom_IDChanging(value)
                    Me.SendPropertyChanging()
                    Me._Room_ID = value
                    Me.SendPropertyChanged("Room_ID")
                    Me.OnRoom_IDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>
        Public Property Description() As String
            Get
                Return Me._Description
            End Get
            Set(ByVal value As String)
                If (Me._Description <> value) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Feature_Image", DbType:="NVarChar(MAX)")>
        Public Property Feature_Image() As String
            Get
                Return Me._Feature_Image
            End Get
            Set(ByVal value As String)
                If (Me._Feature_Image <> value) Then
                    Me.OnFeature_ImageChanging(value)
                    Me.SendPropertyChanging()
                    Me._Feature_Image = value
                    Me.SendPropertyChanged("Feature_Image")
                    Me.OnFeature_ImageChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Room_Room_Feature", Storage:="_Room", ThisKey:="Room_ID", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Room() As Room
            Get
                Return Me._Room.Entity
            End Get
            Set(ByVal value As Room)
                Dim previousValue As Room = Me._Room.Entity
                If ((previousValue IsNot value) OrElse (Me._Room.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If (previousValue IsNot Nothing) Then
                        Me._Room.Entity = Nothing
                        previousValue.Room_Features.Remove(Me)
                    End If
                    Me._Room.Entity = value
                    If (value IsNot Nothing) Then
                        value.Room_Features.Add(Me)
                        Me._Room_ID = value.ID
                    Else
                        Me._Room_ID = Nothing
                    End If
                    Me.SendPropertyChanged("Room")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Room_Types")>
    Partial Public Class Room_Type
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Type_Name As String

        Private _Rooms As EntitySet(Of Room)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnType_NameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnType_NameChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Rooms = New EntitySet(Of Room)(New Action(Of Room)(AddressOf Me.attach_Rooms), New Action(Of Room)(AddressOf Me.detach_Rooms))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type_Name", DbType:="NVarChar(255)")>
        Public Property Type_Name() As String
            Get
                Return Me._Type_Name
            End Get
            Set(ByVal value As String)
                If (Me._Type_Name <> value) Then
                    Me.OnType_NameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Type_Name = value
                    Me.SendPropertyChanged("Type_Name")
                    Me.OnType_NameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Room_Type_Room", Storage:="_Rooms", ThisKey:="ID", OtherKey:="Room_Type_ID")>
        Public Property Rooms() As EntitySet(Of Room)
            Get
                Return Me._Rooms
            End Get
            Set(ByVal value As EntitySet(Of Room))
                Me._Rooms.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Rooms(ByVal entity As Room)
            Me.SendPropertyChanging()
            entity.Room_Type = Me
        End Sub

        Private Sub detach_Rooms(ByVal entity As Room)
            Me.SendPropertyChanging()
            entity.Room_Type = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Metro_Areas")>
    Partial Public Class Metro_Area
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Area_Name As String

        Private _Map_Image As String

        Private _Country As String

        Private _City As String

        Private _Cities As EntitySet(Of City)

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnArea_NameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnArea_NameChanged()
    End Sub
    Partial Private Sub OnMap_ImageChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnMap_ImageChanged()
    End Sub
    Partial Private Sub OnCountryChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnCityChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    #End Region

        Public Sub New()
            Me._Cities = New EntitySet(Of City)(New Action(Of City)(AddressOf Me.attach_Cities), New Action(Of City)(AddressOf Me.detach_Cities))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If (Me._ID <> value) Then
                    Me.OnIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ID = value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Area_Name", DbType:="NVarChar(MAX)")>
        Public Property Area_Name() As String
            Get
                Return Me._Area_Name
            End Get
            Set(ByVal value As String)
                If (Me._Area_Name <> value) Then
                    Me.OnArea_NameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Area_Name = value
                    Me.SendPropertyChanged("Area_Name")
                    Me.OnArea_NameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Map_Image", DbType:="NVarChar(MAX)")>
        Public Property Map_Image() As String
            Get
                Return Me._Map_Image
            End Get
            Set(ByVal value As String)
                If (Me._Map_Image <> value) Then
                    Me.OnMap_ImageChanging(value)
                    Me.SendPropertyChanging()
                    Me._Map_Image = value
                    Me.SendPropertyChanged("Map_Image")
                    Me.OnMap_ImageChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(MAX)")>
        Public Property Country() As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)
                If (Me._Country <> value) Then
                    Me.OnCountryChanging(value)
                    Me.SendPropertyChanging()
                    Me._Country = value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(MAX)")>
        Public Property City() As String
            Get
                Return Me._City
            End Get
            Set(ByVal value As String)
                If (Me._City <> value) Then
                    Me.OnCityChanging(value)
                    Me.SendPropertyChanging()
                    Me._City = value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Metro_Area_City", Storage:="_Cities", ThisKey:="ID", OtherKey:="Metro_Area_ID")>
        Public Property Cities() As EntitySet(Of City)
            Get
                Return Me._Cities
            End Get
            Set(ByVal value As EntitySet(Of City))
                Me._Cities.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End Sub

        Private Sub attach_Cities(ByVal entity As City)
            Me.SendPropertyChanging()
            entity.Metro_Area = Me
        End Sub

        Private Sub detach_Cities(ByVal entity As City)
            Me.SendPropertyChanging()
            entity.Metro_Area = Nothing
        End Sub
    End Class
End Namespace
'#pragma warning restore 1591
