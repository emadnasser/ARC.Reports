'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection



<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="PivotGridDemoDB")> _
Partial Public Class PivotGridDemoDBDataContext
	Inherits System.Data.Linq.DataContext

	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertPgdCategory(ByVal instance As PgdCategory)
  End Sub
  Partial Private Sub UpdatePgdCategory(ByVal instance As PgdCategory)
  End Sub
  Partial Private Sub DeletePgdCategory(ByVal instance As PgdCategory)
  End Sub
  Partial Private Sub InsertPgdSalesPerson(ByVal instance As PgdSalesPerson)
  End Sub
  Partial Private Sub UpdatePgdSalesPerson(ByVal instance As PgdSalesPerson)
  End Sub
  Partial Private Sub DeletePgdSalesPerson(ByVal instance As PgdSalesPerson)
  End Sub
  Partial Private Sub InsertPgdCustomer(ByVal instance As PgdCustomer)
  End Sub
  Partial Private Sub UpdatePgdCustomer(ByVal instance As PgdCustomer)
  End Sub
  Partial Private Sub DeletePgdCustomer(ByVal instance As PgdCustomer)
  End Sub
  Partial Private Sub InsertPgdOrder(ByVal instance As PgdOrder)
  End Sub
  Partial Private Sub UpdatePgdOrder(ByVal instance As PgdOrder)
  End Sub
  Partial Private Sub DeletePgdOrder(ByVal instance As PgdOrder)
  End Sub
  Partial Private Sub InsertPgdProduct(ByVal instance As PgdProduct)
  End Sub
  Partial Private Sub UpdatePgdProduct(ByVal instance As PgdProduct)
  End Sub
  Partial Private Sub DeletePgdProduct(ByVal instance As PgdProduct)
  End Sub
  Partial Private Sub InsertPgdSale(ByVal instance As PgdSale)
  End Sub
  Partial Private Sub UpdatePgdSale(ByVal instance As PgdSale)
  End Sub
  Partial Private Sub DeletePgdSale(ByVal instance As PgdSale)
  End Sub
  #End Region

	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("PivotGridServerModeDemoConnectionString").ConnectionString, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public ReadOnly Property PgdCategories() As System.Data.Linq.Table(Of PgdCategory)
		Get
			Return Me.GetTable(Of PgdCategory)()
		End Get
	End Property

	Public ReadOnly Property PgdSalesPersons() As System.Data.Linq.Table(Of PgdSalesPerson)
		Get
			Return Me.GetTable(Of PgdSalesPerson)()
		End Get
	End Property

	Public ReadOnly Property PgdCustomers() As System.Data.Linq.Table(Of PgdCustomer)
		Get
			Return Me.GetTable(Of PgdCustomer)()
		End Get
	End Property

	Public ReadOnly Property PgdOrders() As System.Data.Linq.Table(Of PgdOrder)
		Get
			Return Me.GetTable(Of PgdOrder)()
		End Get
	End Property

	Public ReadOnly Property PgdProducts() As System.Data.Linq.Table(Of PgdProduct)
		Get
			Return Me.GetTable(Of PgdProduct)()
		End Get
	End Property

	Public ReadOnly Property PgdSales() As System.Data.Linq.Table(Of PgdSale)
		Get
			Return Me.GetTable(Of PgdSale)()
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Categories")> _
Partial Public Class PgdCategory
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _OID As Integer

	Private _CategoryName As String

	Private _Products As EntitySet(Of PgdProduct)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnCategoryNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCategoryNameChanged()
	End Sub
	#End Region

	Public Sub New()
		Me._Products = New EntitySet(Of PgdProduct)(New Action(Of PgdProduct)(AddressOf Me.attach_Products), New Action(Of PgdProduct)(AddressOf Me.detach_Products))
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="OID", Storage:="_OID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
	Public Property CategoryID() As Integer
		Get
			Return Me._OID
		End Get
		Set(ByVal value As Integer)
			If (Me._OID <> value) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging()
				Me._OID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(100)")> _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set(ByVal value As String)
			If (Me._CategoryName <> value) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging()
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PgdCategory_PgdProduct", Storage:="_Products", ThisKey:="CategoryID", OtherKey:="CategoryID")> _
	Public Property PgdProducts() As EntitySet(Of PgdProduct)
		Get
			Return Me._Products
		End Get
		Set(ByVal value As EntitySet(Of PgdProduct))
			Me._Products.Assign(value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_Products(ByVal entity As PgdProduct)
		Me.SendPropertyChanging()
		entity.PgdCategory = Me
	End Sub

	Private Sub detach_Products(ByVal entity As PgdProduct)
		Me.SendPropertyChanging()
		entity.PgdCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SalesPeople")> _
Partial Public Class PgdSalesPerson
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _OID As Integer

	Private _SalesPersonName As String

	Private _Orders As EntitySet(Of PgdOrder)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnSalesPersonIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnSalesPersonIDChanged()
	End Sub
	Partial Private Sub OnSalesPersonNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnSalesPersonNameChanged()
	End Sub
	#End Region

	Public Sub New()
		Me._Orders = New EntitySet(Of PgdOrder)(New Action(Of PgdOrder)(AddressOf Me.attach_Orders), New Action(Of PgdOrder)(AddressOf Me.detach_Orders))
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="OID", Storage:="_OID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
	Public Property SalesPersonID() As Integer
		Get
			Return Me._OID
		End Get
		Set(ByVal value As Integer)
			If (Me._OID <> value) Then
				Me.OnSalesPersonIDChanging(value)
				Me.SendPropertyChanging()
				Me._OID = value
				Me.SendPropertyChanged("SalesPersonID")
				Me.OnSalesPersonIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonName", DbType:="NVarChar(100)")> _
	Public Property SalesPersonName() As String
		Get
			Return Me._SalesPersonName
		End Get
		Set(ByVal value As String)
			If (Me._SalesPersonName <> value) Then
				Me.OnSalesPersonNameChanging(value)
				Me.SendPropertyChanging()
				Me._SalesPersonName = value
				Me.SendPropertyChanged("SalesPersonName")
				Me.OnSalesPersonNameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PgdSalesPerson_PgdOrder", Storage:="_Orders", ThisKey:="SalesPersonID", OtherKey:="SalesPersonID")> _
	Public Property PgdOrders() As EntitySet(Of PgdOrder)
		Get
			Return Me._Orders
		End Get
		Set(ByVal value As EntitySet(Of PgdOrder))
			Me._Orders.Assign(value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_Orders(ByVal entity As PgdOrder)
		Me.SendPropertyChanging()
		entity.PgdSalesPerson = Me
	End Sub

	Private Sub detach_Orders(ByVal entity As PgdOrder)
		Me.SendPropertyChanging()
		entity.PgdSalesPerson = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customers")> _
Partial Public Class PgdCustomer
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _OID As Integer

	Private _CustomerName As String

	Private _Orders As EntitySet(Of PgdOrder)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCustomerIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnCustomerIDChanged()
	End Sub
	Partial Private Sub OnCustomerNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCustomerNameChanged()
	End Sub
	#End Region

	Public Sub New()
		Me._Orders = New EntitySet(Of PgdOrder)(New Action(Of PgdOrder)(AddressOf Me.attach_Orders), New Action(Of PgdOrder)(AddressOf Me.detach_Orders))
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="OID", Storage:="_OID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
	Public Property CustomerID() As Integer
		Get
			Return Me._OID
		End Get
		Set(ByVal value As Integer)
			If (Me._OID <> value) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging()
				Me._OID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(100)")> _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set(ByVal value As String)
			If (Me._CustomerName <> value) Then
				Me.OnCustomerNameChanging(value)
				Me.SendPropertyChanging()
				Me._CustomerName = value
				Me.SendPropertyChanged("CustomerName")
				Me.OnCustomerNameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PgdCustomer_PgdOrder", Storage:="_Orders", ThisKey:="CustomerID", OtherKey:="CustomerID")> _
	Public Property PgdOrders() As EntitySet(Of PgdOrder)
		Get
			Return Me._Orders
		End Get
		Set(ByVal value As EntitySet(Of PgdOrder))
			Me._Orders.Assign(value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_Orders(ByVal entity As PgdOrder)
		Me.SendPropertyChanging()
		entity.PgdCustomer = Me
	End Sub

	Private Sub detach_Orders(ByVal entity As PgdOrder)
		Me.SendPropertyChanging()
		entity.PgdCustomer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Orders")> _
Partial Public Class PgdOrder
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _OID As Integer

	Private _SalesPerson? As Integer

	Private _Customer? As Integer

	Private _OrderDate? As System.DateTime

	Private _Sales As EntitySet(Of PgdSale)

	Private _Customer1 As EntityRef(Of PgdCustomer)

	Private _SalesPeople As EntityRef(Of PgdSalesPerson)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnOrderIDChanged()
	End Sub
	Partial Private Sub OnSalesPersonIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnSalesPersonIDChanged()
	End Sub
	Partial Private Sub OnCustomerIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnCustomerIDChanged()
	End Sub
	Partial Private Sub OnOrderDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnOrderDateChanged()
	End Sub
	#End Region

	Public Sub New()
		Me._Sales = New EntitySet(Of PgdSale)(New Action(Of PgdSale)(AddressOf Me.attach_Sales), New Action(Of PgdSale)(AddressOf Me.detach_Sales))
		Me._Customer1 = Nothing
		Me._SalesPeople = Nothing
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="OID", Storage:="_OID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
	Public Property OrderID() As Integer
		Get
			Return Me._OID
		End Get
		Set(ByVal value As Integer)
			If (Me._OID <> value) Then
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging()
				Me._OID = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="SalesPerson", Storage:="_SalesPerson", DbType:="Int")> _
	Public Property SalesPersonID() As Integer?
		Get
			Return Me._SalesPerson
		End Get
		Set(ByVal value? As Integer)
			If (Not Me._SalesPerson.Equals(value)) Then
				Me.OnSalesPersonIDChanging(value)
				Me.SendPropertyChanging()
				Me._SalesPerson = value
				Me.SendPropertyChanged("SalesPersonID")
				Me.OnSalesPersonIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Customer", Storage:="_Customer", DbType:="Int")> _
	Public Property CustomerID() As Integer?
		Get
			Return Me._Customer
		End Get
		Set(ByVal value? As Integer)
			If (Not Me._Customer.Equals(value)) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging()
				Me._Customer = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")> _
	Public Property OrderDate() As System.DateTime?
		Get
			Return Me._OrderDate
		End Get
		Set(ByVal value? As System.DateTime)
			If (Not Me._OrderDate.Equals(value)) Then
				Me.OnOrderDateChanging(value)
				Me.SendPropertyChanging()
				Me._OrderDate = value
				Me.SendPropertyChanged("OrderDate")
				Me.OnOrderDateChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PgdOrder_PgdSale", Storage:="_Sales", ThisKey:="OrderID", OtherKey:="OrderID")> _
	Public Property PgdSales() As EntitySet(Of PgdSale)
		Get
			Return Me._Sales
		End Get
		Set(ByVal value As EntitySet(Of PgdSale))
			Me._Sales.Assign(value)
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PgdCustomer_PgdOrder", Storage:="_Customer1", ThisKey:="CustomerID", OtherKey:="CustomerID", IsForeignKey:=True)> _
	Public Property PgdCustomer() As PgdCustomer
		Get
			Return Me._Customer1.Entity
		End Get
		Set(ByVal value As PgdCustomer)
			Dim previousValue As PgdCustomer = Me._Customer1.Entity
			If ((previousValue IsNot value) OrElse (Me._Customer1.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()
				If (previousValue IsNot Nothing) Then
					Me._Customer1.Entity = Nothing
					previousValue.PgdOrders.Remove(Me)
				End If
				Me._Customer1.Entity = value
				If (value IsNot Nothing) Then
					value.PgdOrders.Add(Me)
					Me._Customer = value.CustomerID
				Else
					Me._Customer = Nothing
				End If
				Me.SendPropertyChanged("PgdCustomer")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PgdSalesPerson_PgdOrder", Storage:="_SalesPeople", ThisKey:="SalesPersonID", OtherKey:="SalesPersonID", IsForeignKey:=True)> _
	Public Property PgdSalesPerson() As PgdSalesPerson
		Get
			Return Me._SalesPeople.Entity
		End Get
		Set(ByVal value As PgdSalesPerson)
			Dim previousValue As PgdSalesPerson = Me._SalesPeople.Entity
			If ((previousValue IsNot value) OrElse (Me._SalesPeople.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()
				If (previousValue IsNot Nothing) Then
					Me._SalesPeople.Entity = Nothing
					previousValue.PgdOrders.Remove(Me)
				End If
				Me._SalesPeople.Entity = value
				If (value IsNot Nothing) Then
					value.PgdOrders.Add(Me)
					Me._SalesPerson = value.SalesPersonID
				Else
					Me._SalesPerson = Nothing
				End If
				Me.SendPropertyChanged("PgdSalesPerson")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_Sales(ByVal entity As PgdSale)
		Me.SendPropertyChanging()
		entity.PgdOrder = Me
	End Sub

	Private Sub detach_Sales(ByVal entity As PgdSale)
		Me.SendPropertyChanging()
		entity.PgdOrder = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Products")> _
Partial Public Class PgdProduct
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _OID As Integer

	Private _ProductName As String

	Private _Category? As Integer

	Private _Sales As EntitySet(Of PgdSale)

	Private _Category1 As EntityRef(Of PgdCategory)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnProductNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductNameChanged()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	#End Region

	Public Sub New()
		Me._Sales = New EntitySet(Of PgdSale)(New Action(Of PgdSale)(AddressOf Me.attach_Sales), New Action(Of PgdSale)(AddressOf Me.detach_Sales))
		Me._Category1 = Nothing
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="OID", Storage:="_OID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
	Public Property ProductID() As Integer
		Get
			Return Me._OID
		End Get
		Set(ByVal value As Integer)
			If (Me._OID <> value) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging()
				Me._OID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(100)")> _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set(ByVal value As String)
			If (Me._ProductName <> value) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging()
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Category", Storage:="_Category", DbType:="Int")> _
	Public Property CategoryID() As Integer?
		Get
			Return Me._Category
		End Get
		Set(ByVal value? As Integer)
			If (Not Me._Category.Equals(value)) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging()
				Me._Category = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PgdProduct_PgdSale", Storage:="_Sales", ThisKey:="ProductID", OtherKey:="ProductID")> _
	Public Property PgdSales() As EntitySet(Of PgdSale)
		Get
			Return Me._Sales
		End Get
		Set(ByVal value As EntitySet(Of PgdSale))
			Me._Sales.Assign(value)
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PgdCategory_PgdProduct", Storage:="_Category1", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=True)> _
	Public Property PgdCategory() As PgdCategory
		Get
			Return Me._Category1.Entity
		End Get
		Set(ByVal value As PgdCategory)
			Dim previousValue As PgdCategory = Me._Category1.Entity
			If ((previousValue IsNot value) OrElse (Me._Category1.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()
				If (previousValue IsNot Nothing) Then
					Me._Category1.Entity = Nothing
					previousValue.PgdProducts.Remove(Me)
				End If
				Me._Category1.Entity = value
				If (value IsNot Nothing) Then
					value.PgdProducts.Add(Me)
					Me._Category = value.CategoryID
				Else
					Me._Category = Nothing
				End If
				Me.SendPropertyChanged("PgdCategory")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_Sales(ByVal entity As PgdSale)
		Me.SendPropertyChanging()
		entity.PgdProduct = Me
	End Sub

	Private Sub detach_Sales(ByVal entity As PgdSale)
		Me.SendPropertyChanging()
		entity.PgdProduct = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sales")> _
Partial Public Class PgdSale
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _OID As Integer

	Private _Order? As Integer

	Private _Product? As Integer

	Private _Quantity? As Integer

	Private _UnitPrice? As Decimal

	Private _Order1 As EntityRef(Of PgdOrder)

	Private _Product1 As EntityRef(Of PgdProduct)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnSaleIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnSaleIDChanged()
	End Sub
	Partial Private Sub OnOrderIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnOrderIDChanged()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnQuantityChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnQuantityChanged()
	End Sub
	Partial Private Sub OnUnitPriceChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnUnitPriceChanged()
	End Sub
	#End Region

	Public Sub New()
		Me._Order1 = Nothing
		Me._Product1 = Nothing
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="OID", Storage:="_OID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
	Public Property SaleID() As Integer
		Get
			Return Me._OID
		End Get
		Set(ByVal value As Integer)
			If (Me._OID <> value) Then
				Me.OnSaleIDChanging(value)
				Me.SendPropertyChanging()
				Me._OID = value
				Me.SendPropertyChanged("SaleID")
				Me.OnSaleIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Order]", Storage:="_Order", DbType:="Int")> _
	Public Property OrderID() As Integer?
		Get
			Return Me._Order
		End Get
		Set(ByVal value? As Integer)
			If (Not Me._Order.Equals(value)) Then
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging()
				Me._Order = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Product", Storage:="_Product", DbType:="Int")> _
	Public Property ProductID() As Integer?
		Get
			Return Me._Product
		End Get
		Set(ByVal value? As Integer)
			If (Not Me._Product.Equals(value)) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging()
				Me._Product = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int")> _
	Public Property Quantity() As Integer?
		Get
			Return Me._Quantity
		End Get
		Set(ByVal value? As Integer)
			If (Not Me._Quantity.Equals(value)) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging()
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money")> _
	Public Property UnitPrice() As Decimal?
		Get
			Return Me._UnitPrice
		End Get
		Set(ByVal value? As Decimal)
			If (Not Me._UnitPrice.Equals(value)) Then
				Me.OnUnitPriceChanging(value)
				Me.SendPropertyChanging()
				Me._UnitPrice = value
				Me.SendPropertyChanged("UnitPrice")
				Me.OnUnitPriceChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PgdOrder_PgdSale", Storage:="_Order1", ThisKey:="OrderID", OtherKey:="OrderID", IsForeignKey:=True)> _
	Public Property PgdOrder() As PgdOrder
		Get
			Return Me._Order1.Entity
		End Get
		Set(ByVal value As PgdOrder)
			Dim previousValue As PgdOrder = Me._Order1.Entity
			If ((previousValue IsNot value) OrElse (Me._Order1.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()
				If (previousValue IsNot Nothing) Then
					Me._Order1.Entity = Nothing
					previousValue.PgdSales.Remove(Me)
				End If
				Me._Order1.Entity = value
				If (value IsNot Nothing) Then
					value.PgdSales.Add(Me)
					Me._Order = value.OrderID
				Else
					Me._Order = Nothing
				End If
				Me.SendPropertyChanged("PgdOrder")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PgdProduct_PgdSale", Storage:="_Product1", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=True)> _
	Public Property PgdProduct() As PgdProduct
		Get
			Return Me._Product1.Entity
		End Get
		Set(ByVal value As PgdProduct)
			Dim previousValue As PgdProduct = Me._Product1.Entity
			If ((previousValue IsNot value) OrElse (Me._Product1.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()
				If (previousValue IsNot Nothing) Then
					Me._Product1.Entity = Nothing
					previousValue.PgdSales.Remove(Me)
				End If
				Me._Product1.Entity = value
				If (value IsNot Nothing) Then
					value.PgdSales.Add(Me)
					Me._Product = value.ProductID
				Else
					Me._Product = Nothing
				End If
				Me.SendPropertyChanged("PgdProduct")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
