'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection



<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="WebmailClient")> _
Partial Public Class WebmailClientDataContext
	Inherits System.Data.Linq.DataContext

	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertDBContact(ByVal instance As DBContact)
  End Sub
  Partial Private Sub UpdateDBContact(ByVal instance As DBContact)
  End Sub
  Partial Private Sub DeleteDBContact(ByVal instance As DBContact)
  End Sub
  Partial Private Sub InsertDBMessage(ByVal instance As DBMessage)
  End Sub
  Partial Private Sub UpdateDBMessage(ByVal instance As DBMessage)
  End Sub
  Partial Private Sub DeleteDBMessage(ByVal instance As DBMessage)
  End Sub
  #End Region

	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("WebmailClientConnectionString").ConnectionString, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public ReadOnly Property DBContacts() As System.Data.Linq.Table(Of DBContact)
		Get
			Return Me.GetTable(Of DBContact)()
		End Get
	End Property

	Public ReadOnly Property DBMessages() As System.Data.Linq.Table(Of DBMessage)
		Get
			Return Me.GetTable(Of DBMessage)()
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contacts")> _
Partial Public Class DBContact
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _ID As Integer

	Private _Name As String

	Private _Email As String

	Private _Address As String

	Private _Country As String

	Private _City As String

	Private _Phone As String

	Private _PhotoUrl As String

	Private _Collected As Boolean

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnIDChanged()
	End Sub
	Partial Private Sub OnNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnNameChanged()
	End Sub
	Partial Private Sub OnEmailChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnEmailChanged()
	End Sub
	Partial Private Sub OnAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnAddressChanged()
	End Sub
	Partial Private Sub OnCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCountryChanged()
	End Sub
	Partial Private Sub OnCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnPhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhoneChanged()
	End Sub
	Partial Private Sub OnPhotoUrlChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhotoUrlChanged()
	End Sub
	Partial Private Sub OnCollectedChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnCollectedChanged()
	End Sub
	#End Region

	Public Sub New()
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set(ByVal value As Integer)
			If (Me._ID <> value) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging()
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")> _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set(ByVal value As String)
			If (Me._Name <> value) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging()
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set(ByVal value As String)
			If (Me._Email <> value) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging()
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(50)")> _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set(ByVal value As String)
			If (Me._Address <> value) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging()
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(50)")> _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set(ByVal value As String)
			If (Me._Country <> value) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging()
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")> _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set(ByVal value As String)
			If (Me._City <> value) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging()
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(32)")> _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set(ByVal value As String)
			If (Me._Phone <> value) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging()
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoUrl", DbType:="NVarChar(128)")> _
	Public Property PhotoUrl() As String
		Get
			Return Me._PhotoUrl
		End Get
		Set(ByVal value As String)
			If (Me._PhotoUrl <> value) Then
				Me.OnPhotoUrlChanging(value)
				Me.SendPropertyChanging()
				Me._PhotoUrl = value
				Me.SendPropertyChanged("PhotoUrl")
				Me.OnPhotoUrlChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Collected", DbType:="Bit NOT NULL")> _
	Public Property Collected() As Boolean
		Get
			Return Me._Collected
		End Get
		Set(ByVal value As Boolean)
			If (Me._Collected <> value) Then
				Me.OnCollectedChanging(value)
				Me.SendPropertyChanging()
				Me._Collected = value
				Me.SendPropertyChanged("Collected")
				Me.OnCollectedChanged()
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Messages")> _
Partial Public Class DBMessage
	Implements INotifyPropertyChanging, INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

	Private _ID As Integer

	Private _Date As System.DateTime

	Private _Subject As String

	Private _From As String

	Private _To As String

	Private _Text As String

	Private _Folder As String

	Private _Unread As Boolean

	Private _HasAttachment As Boolean

	Private _IsReply As Boolean

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnIDChanged()
	End Sub
	Partial Private Sub OnDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnDateChanged()
	End Sub
	Partial Private Sub OnSubjectChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnSubjectChanged()
	End Sub
	Partial Private Sub OnFromChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFromChanged()
	End Sub
	Partial Private Sub OnToChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnToChanged()
	End Sub
	Partial Private Sub OnTextChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTextChanged()
	End Sub
	Partial Private Sub OnFolderChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFolderChanged()
	End Sub
	Partial Private Sub OnUnreadChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnUnreadChanged()
	End Sub
	Partial Private Sub OnHasAttachmentChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnHasAttachmentChanged()
	End Sub
	Partial Private Sub OnIsReplyChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnIsReplyChanged()
	End Sub
	#End Region

	Public Sub New()
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set(ByVal value As Integer)
			If (Me._ID <> value) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging()
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date", DbType:="DateTime NOT NULL")> _
	Public Property [Date]() As System.DateTime
		Get
			Return Me._Date
		End Get
		Set(ByVal value As System.DateTime)
			If (Me._Date <> value) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging()
				Me._Date = value
				Me.SendPropertyChanged("Date")
				Me.OnDateChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject", DbType:="NVarChar(128) NOT NULL", CanBeNull:=False)> _
	Public Property Subject() As String
		Get
			Return Me._Subject
		End Get
		Set(ByVal value As String)
			If (Me._Subject <> value) Then
				Me.OnSubjectChanging(value)
				Me.SendPropertyChanging()
				Me._Subject = value
				Me.SendPropertyChanged("Subject")
				Me.OnSubjectChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[From]", Storage:="_From", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
	Public Property [From]() As String
		Get
			Return Me._From
		End Get
		Set(ByVal value As String)
			If (Me._From <> value) Then
				Me.OnFromChanging(value)
				Me.SendPropertyChanging()
				Me._From = value
				Me.SendPropertyChanged("From")
				Me.OnFromChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[To]", Storage:="_To", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=False)> _
	Public Property [To]() As String
		Get
			Return Me._To
		End Get
		Set(ByVal value As String)
			If (Me._To <> value) Then
				Me.OnToChanging(value)
				Me.SendPropertyChanging()
				Me._To = value
				Me.SendPropertyChanged("To")
				Me.OnToChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="NVarChar(MAX)")> _
	Public Property Text() As String
		Get
			Return Me._Text
		End Get
		Set(ByVal value As String)
			If (Me._Text <> value) Then
				Me.OnTextChanging(value)
				Me.SendPropertyChanging()
				Me._Text = value
				Me.SendPropertyChanged("Text")
				Me.OnTextChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Folder", DbType:="NVarChar(32)")> _
	Public Property Folder() As String
		Get
			Return Me._Folder
		End Get
		Set(ByVal value As String)
			If (Me._Folder <> value) Then
				Me.OnFolderChanging(value)
				Me.SendPropertyChanging()
				Me._Folder = value
				Me.SendPropertyChanged("Folder")
				Me.OnFolderChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unread", DbType:="Bit NOT NULL")> _
	Public Property Unread() As Boolean
		Get
			Return Me._Unread
		End Get
		Set(ByVal value As Boolean)
			If (Me._Unread <> value) Then
				Me.OnUnreadChanging(value)
				Me.SendPropertyChanging()
				Me._Unread = value
				Me.SendPropertyChanged("Unread")
				Me.OnUnreadChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HasAttachment", DbType:="Bit NOT NULL")> _
	Public Property HasAttachment() As Boolean
		Get
			Return Me._HasAttachment
		End Get
		Set(ByVal value As Boolean)
			If (Me._HasAttachment <> value) Then
				Me.OnHasAttachmentChanging(value)
				Me.SendPropertyChanging()
				Me._HasAttachment = value
				Me.SendPropertyChanged("HasAttachment")
				Me.OnHasAttachmentChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsReply", DbType:="Bit NOT NULL")> _
	Public Property IsReply() As Boolean
		Get
			Return Me._IsReply
		End Get
		Set(ByVal value As Boolean)
			If (Me._IsReply <> value) Then
				Me.OnIsReplyChanging(value)
				Me.SendPropertyChanging()
				Me._IsReply = value
				Me.SendPropertyChanged("IsReply")
				Me.OnIsReplyChanged()
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If (Me.PropertyChangingEvent IsNot Nothing) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
		If (Me.PropertyChangedEvent IsNot Nothing) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
