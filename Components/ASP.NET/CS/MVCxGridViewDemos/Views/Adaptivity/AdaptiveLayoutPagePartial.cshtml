@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();

    var grid = Html.DevExpress().GridView(
        settings => {
            settings.Name = "GridView";
            settings.CallbackRouteValues = new { Controller = "Adaptivity", Action = "AdaptiveLayoutPagePartial" };
            settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Adaptivity", Action = "AdaptiveLayoutAddNewPartial" };
            settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Adaptivity", Action = "AdaptiveLayoutUpdatePartial" };
            settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Adaptivity", Action = "AdaptiveLayoutDeletePartial" };
            settings.Width = Unit.Percentage(100);
            settings.EnableRowsCache = false;

            settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
            settings.Settings.VerticalScrollableHeight = 500;

            settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 2;
            settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
            settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 800;
            settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
            settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
            settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;

            settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
            settings.CommandColumn.Visible = true;
            settings.CommandColumn.ShowNewButtonInHeader = true;
            settings.CommandColumn.ShowDeleteButton = true;
            settings.CommandColumn.ShowEditButton = true;
            settings.CommandColumn.Width = Unit.Pixel(100);

            settings.KeyFieldName = "ProductID";
            settings.Columns.Add("ProductName");
            settings.Columns.Add(column => {
                column.FieldName = "CategoryID";
                column.Caption = "Category Name";
                column.AdaptivePriority = 1;

                column.ColumnType = MVCxGridViewColumnType.ComboBox;
                var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
                comboBoxProperties.DataSource = NorthwindDataProvider.GetCategories();
                comboBoxProperties.TextField = "CategoryName";
                comboBoxProperties.ValueField = "CategoryID";
                comboBoxProperties.ValueType = typeof(int);
            });
            settings.Columns.Add(column => {
                column.FieldName = "QuantityPerUnit";
                column.AdaptivePriority = 1;
            });
            settings.Columns.Add(column => {
                column.FieldName = "UnitPrice";
                column.Width = 100;

                column.ColumnType = MVCxGridViewColumnType.SpinEdit;
                var spinEditProperties = column.PropertiesEdit as SpinEditProperties;
                spinEditProperties.DisplayFormatString = "c";
                spinEditProperties.DisplayFormatInEditMode = true;
                spinEditProperties.MinValue = 0;
                spinEditProperties.MaxValue = 60000;
            });
            settings.Columns.Add(column => {
                column.FieldName = "UnitsInStock";
                column.Width = 100;

                column.ColumnType = MVCxGridViewColumnType.SpinEdit;
                var spinEditProperties = column.PropertiesEdit as SpinEditProperties;
                spinEditProperties.NumberType = SpinEditNumberType.Integer;
                spinEditProperties.MinValue = 0;
                spinEditProperties.MaxValue = 10000;
            });
            settings.Columns.Add(column => {
                column.FieldName = "Discontinued";
                column.Width = 100;
                column.AdaptivePriority = 2;

                column.ColumnType = MVCxGridViewColumnType.CheckBox;
                var checkBoxProperties = column.PropertiesEdit as CheckBoxProperties;
                checkBoxProperties.AllowGrayed = true;
                checkBoxProperties.AllowGrayedByClick = false;
            });

            settings.SettingsPager.PageSize = 30;
            settings.SettingsPager.NumericButtonCount = 6;
            settings.Styles.Cell.Wrap = DefaultBoolean.False;
        });

    if(ViewData["EditError"] != null) {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
    grid.Bind(Model).GetHtml();
}