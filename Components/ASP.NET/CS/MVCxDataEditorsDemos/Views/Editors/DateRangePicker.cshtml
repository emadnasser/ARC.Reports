@model DateRangePickerModel

@section AdditionalResources {
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    <style type="text/css">
        .pickerGroupContainer,
        .pickerFormLayout > .dxflGroupSys
        {
            padding-left: 0!important;
        }
    </style>
}
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}
<script type="text/javascript">
    function UpdateInfo() {
        var daysTotal = End.GetRangeDayCount();
        Info.SetText(daysTotal !== -1 ? daysTotal + ' days' : '');
    }
    $(document).ready(function () {
        if (Boolean('@(ViewBag.SuccessValidation)'))
            alert('The form has been submitted successfully.');
    });
</script>
@using(Html.BeginForm("DateRangePicker", "Editors", FormMethod.Post)) {
    @Html.DevExpress().FormLayout(settings => {
        settings.Name = "Picker";
        settings.RequiredMarkDisplayMode = RequiredMarkMode.None;
        settings.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
        settings.ControlStyle.CssClass = "pickerFormLayout";

        var pickerGroup = settings.Items.AddGroupItem(itemSettings => {
            itemSettings.Caption = "Date Range Picker";
            itemSettings.ColCount = 3;
        });
        pickerGroup.ParentContainerStyle.CssClass = "pickerGroupContainer";
        pickerGroup.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        pickerGroup.Items.Add(item => Model.Start, itemSettings => ConfigureDateEditItem(itemSettings));
        pickerGroup.Items.Add(item => Model.End, itemSettings => ConfigureDateEditItem(itemSettings));
        pickerGroup.Items.Add(itemSettings => {
            itemSettings.Caption = "Duration";
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
            var tbSettings = (TextBoxSettings)itemSettings.NestedExtensionSettings;
            tbSettings.Name = "Info";
            tbSettings.ReadOnly = true;
            tbSettings.Properties.ClientSideEvents.Init = "UpdateInfo";
            tbSettings.Width = Unit.Pixel(100);
        });
        pickerGroup.Items.Add(itemSettings => {
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.ValidationSummary;
            itemSettings.ShowCaption = DefaultBoolean.False;
            itemSettings.ColSpan = 3;
            itemSettings.Height = Unit.Pixel(50);
        });
        pickerGroup.Items.Add(itemSettings => {
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
            itemSettings.ShowCaption = DefaultBoolean.False;
            var btnSettigns = (ButtonSettings)itemSettings.NestedExtensionSettings;
            btnSettigns.Name = "Submit";
            btnSettigns.UseSubmitBehavior = true;
            btnSettigns.Text = "Submit";
        });
    }).GetHtml()
}
<br />
<p>Validation settings for the Model's "End" property:<br />
    &nbsp;<b>DateRangeAttribute.MinDayCount = 1;</b><br />
    &nbsp;<b>DateRangeAttribute.MaxDayCount = 30</b>
</p>
@functions{
    Function<DateEditSettings, MVCxFormLayoutItem> ConfigureDateEditItem = itemSettings => {
        itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
        var dateEditSettings = (DateEditSettings)itemSettings.NestedExtensionSettings;
        dateEditSettings.ShowModelErrors = true;
        dateEditSettings.Properties.ClientSideEvents.DateChanged = "UpdateInfo";
        dateEditSettings.Properties.ValidationSettings.Display = Display.Dynamic;
        dateEditSettings.Properties.ValidationSettings.SetFocusOnError = true;
        dateEditSettings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
        dateEditSettings.Properties.ValidationSettings.CausesValidation = true;
        dateEditSettings.Properties.CalendarProperties.Columns = 2;
        return dateEditSettings;
    };
}