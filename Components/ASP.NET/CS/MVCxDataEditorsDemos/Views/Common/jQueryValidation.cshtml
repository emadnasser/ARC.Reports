@model JQueryValidationData

@section AdditionalResources {
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
}
<script type="text/javascript">
// <![CDATA[
    $().ready(function() {
        $("#jQueryValidationForm").validate({
            showErrors: function(errorMap, errorList){
            },
            rules: {
                Author: {
                    required: true
                },
                Publisher: {
                    maxlength: 10
                },
                ReleaseDate: {
                    required: true,
                    remote: '@(Url.Action("CheckReleaseDate", "Common"))'
                },
                Annotation: {
                    required: true
                }
            },
            messages: {
                Author: {
                    required: "Author is required"
                },
                Publisher: {
                    range: "Must be under 10 characters"
                },
                ReleaseDate: {
                    required: "Release date is required",
                    remote: "Release date can not be earlier than today"
                },
                Annotation: {
                    required: "Annotation is required"
                }
            }
        });
    });
// ]]>
</script>

@{
    Html.EnableClientValidation(false);
    Html.EnableUnobtrusiveJavaScript(false);
}
@using (Html.BeginForm("jQueryValidation", "Common", FormMethod.Post, new { id = "jQueryValidationForm", @class = "edit_form"})) {
    @Html.DevExpress().FormLayout(settings => {
        settings.Name = "jQueryValidationFormLayout";
        settings.Style.Add("float", "left");
        settings.Items.Add(model => model.Author, itemSettings => {
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
            CommonDemoHelper.FormLayoutItemSettingsMethod(itemSettings);
            TextBoxSettings textBoxSettings = (TextBoxSettings)itemSettings.NestedExtensionSettings;            
            textBoxSettings.Properties.ValidationSettings.Display = Display.None;
        });
        settings.Items.Add(model => model.Publisher, itemSettings => {
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;            
            itemSettings.HelpText = "Must be under 10 characters";
            CommonDemoHelper.FormLayoutItemSettingsMethod(itemSettings);
            TextBoxSettings textBoxSettings = (TextBoxSettings)itemSettings.NestedExtensionSettings;            
            textBoxSettings.Properties.ValidationSettings.Display = Display.None;
        });
        settings.Items.Add(model => model.ReleaseDate, itemSettings => {
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;            
            itemSettings.HelpText = "Cannot be earlier than today";
            CommonDemoHelper.FormLayoutItemSettingsMethod(itemSettings);
            DateEditSettings dateEditSettings = (DateEditSettings)itemSettings.NestedExtensionSettings;            
            dateEditSettings.Properties.ValidationSettings.Display = Display.None;
        });
        settings.Items.Add(model => model.Annotation, itemSettings => {
            itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.Memo;
            CommonDemoHelper.FormLayoutItemSettingsMethod(itemSettings);                                    
            MemoSettings memoSettings = (MemoSettings)itemSettings.NestedExtensionSettings;
            memoSettings.Properties.ValidationSettings.Display = Display.None;
        });
        settings.Items.Add(itemSettings => {
            itemSettings.Caption = string.Empty;
            itemSettings.SetNestedContent(() => {
                ViewContext.Writer.Write("<div class='line'>");
                Html.DevExpress().Button(btnSettings => {
                    btnSettings.Name = "btnUpdate";
                    btnSettings.Text = "Send";
                    btnSettings.ControlStyle.CssClass = "button";
                    btnSettings.UseSubmitBehavior = true;
                }).Render();
                Html.DevExpress().Button(btnSettings => {
                    btnSettings.Name = "btnClear";
                    btnSettings.Text = "Clear";
                    btnSettings.ControlStyle.CssClass = "button";
                    btnSettings.ClientSideEvents.Click = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(); }";
                }).Render();
                ViewContext.Writer.Write("</div>");
            });
        });
    }).GetHtml()
    Html.DevExpress().ValidationSummary().GetHtml();
}