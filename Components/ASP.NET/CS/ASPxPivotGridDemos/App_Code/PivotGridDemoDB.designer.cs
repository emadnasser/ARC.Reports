#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PivotGridDemoDB")]
public partial class PivotGridDemoDBDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertPgdCategory(PgdCategory instance);
  partial void UpdatePgdCategory(PgdCategory instance);
  partial void DeletePgdCategory(PgdCategory instance);
  partial void InsertPgdSalesPerson(PgdSalesPerson instance);
  partial void UpdatePgdSalesPerson(PgdSalesPerson instance);
  partial void DeletePgdSalesPerson(PgdSalesPerson instance);
  partial void InsertPgdCustomer(PgdCustomer instance);
  partial void UpdatePgdCustomer(PgdCustomer instance);
  partial void DeletePgdCustomer(PgdCustomer instance);
  partial void InsertPgdOrder(PgdOrder instance);
  partial void UpdatePgdOrder(PgdOrder instance);
  partial void DeletePgdOrder(PgdOrder instance);
  partial void InsertPgdProduct(PgdProduct instance);
  partial void UpdatePgdProduct(PgdProduct instance);
  partial void DeletePgdProduct(PgdProduct instance);
  partial void InsertPgdSale(PgdSale instance);
  partial void UpdatePgdSale(PgdSale instance);
  partial void DeletePgdSale(PgdSale instance);
  #endregion
	
	public PivotGridDemoDBDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PivotGridServerModeDemoConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public PivotGridDemoDBDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PivotGridDemoDBDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PivotGridDemoDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PivotGridDemoDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<PgdCategory> PgdCategories
	{
		get
		{
			return this.GetTable<PgdCategory>();
		}
	}
	
	public System.Data.Linq.Table<PgdSalesPerson> PgdSalesPersons
	{
		get
		{
			return this.GetTable<PgdSalesPerson>();
		}
	}
	
	public System.Data.Linq.Table<PgdCustomer> PgdCustomers
	{
		get
		{
			return this.GetTable<PgdCustomer>();
		}
	}
	
	public System.Data.Linq.Table<PgdOrder> PgdOrders
	{
		get
		{
			return this.GetTable<PgdOrder>();
		}
	}
	
	public System.Data.Linq.Table<PgdProduct> PgdProducts
	{
		get
		{
			return this.GetTable<PgdProduct>();
		}
	}
	
	public System.Data.Linq.Table<PgdSale> PgdSales
	{
		get
		{
			return this.GetTable<PgdSale>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
public partial class PgdCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OID;
	
	private string _CategoryName;
	
	private EntitySet<PgdProduct> _Products;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
	
	public PgdCategory()
	{
		this._Products = new EntitySet<PgdProduct>(new Action<PgdProduct>(this.attach_Products), new Action<PgdProduct>(this.detach_Products));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="OID", Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CategoryID
	{
		get
		{
			return this._OID;
		}
		set
		{
			if ((this._OID != value))
			{
				this.OnCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._OID = value;
				this.SendPropertyChanged("CategoryID");
				this.OnCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(100)")]
	public string CategoryName
	{
		get
		{
			return this._CategoryName;
		}
		set
		{
			if ((this._CategoryName != value))
			{
				this.OnCategoryNameChanging(value);
				this.SendPropertyChanging();
				this._CategoryName = value;
				this.SendPropertyChanged("CategoryName");
				this.OnCategoryNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PgdCategory_PgdProduct", Storage="_Products", ThisKey="CategoryID", OtherKey="CategoryID")]
	public EntitySet<PgdProduct> PgdProducts
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(PgdProduct entity)
	{
		this.SendPropertyChanging();
		entity.PgdCategory = this;
	}
	
	private void detach_Products(PgdProduct entity)
	{
		this.SendPropertyChanging();
		entity.PgdCategory = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesPeople")]
public partial class PgdSalesPerson : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OID;
	
	private string _SalesPersonName;
	
	private EntitySet<PgdOrder> _Orders;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalesPersonIDChanging(int value);
    partial void OnSalesPersonIDChanged();
    partial void OnSalesPersonNameChanging(string value);
    partial void OnSalesPersonNameChanged();
    #endregion
	
	public PgdSalesPerson()
	{
		this._Orders = new EntitySet<PgdOrder>(new Action<PgdOrder>(this.attach_Orders), new Action<PgdOrder>(this.detach_Orders));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="OID", Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SalesPersonID
	{
		get
		{
			return this._OID;
		}
		set
		{
			if ((this._OID != value))
			{
				this.OnSalesPersonIDChanging(value);
				this.SendPropertyChanging();
				this._OID = value;
				this.SendPropertyChanged("SalesPersonID");
				this.OnSalesPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesPersonName", DbType="NVarChar(100)")]
	public string SalesPersonName
	{
		get
		{
			return this._SalesPersonName;
		}
		set
		{
			if ((this._SalesPersonName != value))
			{
				this.OnSalesPersonNameChanging(value);
				this.SendPropertyChanging();
				this._SalesPersonName = value;
				this.SendPropertyChanged("SalesPersonName");
				this.OnSalesPersonNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PgdSalesPerson_PgdOrder", Storage="_Orders", ThisKey="SalesPersonID", OtherKey="SalesPersonID")]
	public EntitySet<PgdOrder> PgdOrders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Orders(PgdOrder entity)
	{
		this.SendPropertyChanging();
		entity.PgdSalesPerson = this;
	}
	
	private void detach_Orders(PgdOrder entity)
	{
		this.SendPropertyChanging();
		entity.PgdSalesPerson = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
public partial class PgdCustomer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OID;
	
	private string _CustomerName;
	
	private EntitySet<PgdOrder> _Orders;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    #endregion
	
	public PgdCustomer()
	{
		this._Orders = new EntitySet<PgdOrder>(new Action<PgdOrder>(this.attach_Orders), new Action<PgdOrder>(this.detach_Orders));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="OID", Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CustomerID
	{
		get
		{
			return this._OID;
		}
		set
		{
			if ((this._OID != value))
			{
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._OID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(100)")]
	public string CustomerName
	{
		get
		{
			return this._CustomerName;
		}
		set
		{
			if ((this._CustomerName != value))
			{
				this.OnCustomerNameChanging(value);
				this.SendPropertyChanging();
				this._CustomerName = value;
				this.SendPropertyChanged("CustomerName");
				this.OnCustomerNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PgdCustomer_PgdOrder", Storage="_Orders", ThisKey="CustomerID", OtherKey="CustomerID")]
	public EntitySet<PgdOrder> PgdOrders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Orders(PgdOrder entity)
	{
		this.SendPropertyChanging();
		entity.PgdCustomer = this;
	}
	
	private void detach_Orders(PgdOrder entity)
	{
		this.SendPropertyChanging();
		entity.PgdCustomer = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
public partial class PgdOrder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OID;
	
	private System.Nullable<int> _SalesPerson;
	
	private System.Nullable<int> _Customer;
	
	private System.Nullable<System.DateTime> _OrderDate;
	
	private EntitySet<PgdSale> _Sales;
	
	private EntityRef<PgdCustomer> _Customer1;
	
	private EntityRef<PgdSalesPerson> _SalesPeople;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnSalesPersonIDChanging(System.Nullable<int> value);
    partial void OnSalesPersonIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    #endregion
	
	public PgdOrder()
	{
		this._Sales = new EntitySet<PgdSale>(new Action<PgdSale>(this.attach_Sales), new Action<PgdSale>(this.detach_Sales));
		this._Customer1 = default(EntityRef<PgdCustomer>);
		this._SalesPeople = default(EntityRef<PgdSalesPerson>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="OID", Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OrderID
	{
		get
		{
			return this._OID;
		}
		set
		{
			if ((this._OID != value))
			{
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._OID = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SalesPerson", Storage="_SalesPerson", DbType="Int")]
	public System.Nullable<int> SalesPersonID
	{
		get
		{
			return this._SalesPerson;
		}
		set
		{
			if ((this._SalesPerson != value))
			{
				this.OnSalesPersonIDChanging(value);
				this.SendPropertyChanging();
				this._SalesPerson = value;
				this.SendPropertyChanged("SalesPersonID");
				this.OnSalesPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Customer", Storage="_Customer", DbType="Int")]
	public System.Nullable<int> CustomerID
	{
		get
		{
			return this._Customer;
		}
		set
		{
			if ((this._Customer != value))
			{
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._Customer = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PgdOrder_PgdSale", Storage="_Sales", ThisKey="OrderID", OtherKey="OrderID")]
	public EntitySet<PgdSale> PgdSales
	{
		get
		{
			return this._Sales;
		}
		set
		{
			this._Sales.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PgdCustomer_PgdOrder", Storage="_Customer1", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
	public PgdCustomer PgdCustomer
	{
		get
		{
			return this._Customer1.Entity;
		}
		set
		{
			PgdCustomer previousValue = this._Customer1.Entity;
			if (((previousValue != value) 
						|| (this._Customer1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer1.Entity = null;
					previousValue.PgdOrders.Remove(this);
				}
				this._Customer1.Entity = value;
				if ((value != null))
				{
					value.PgdOrders.Add(this);
					this._Customer = value.CustomerID;
				}
				else
				{
					this._Customer = default(Nullable<int>);
				}
				this.SendPropertyChanged("PgdCustomer");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PgdSalesPerson_PgdOrder", Storage="_SalesPeople", ThisKey="SalesPersonID", OtherKey="SalesPersonID", IsForeignKey=true)]
	public PgdSalesPerson PgdSalesPerson
	{
		get
		{
			return this._SalesPeople.Entity;
		}
		set
		{
			PgdSalesPerson previousValue = this._SalesPeople.Entity;
			if (((previousValue != value) 
						|| (this._SalesPeople.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SalesPeople.Entity = null;
					previousValue.PgdOrders.Remove(this);
				}
				this._SalesPeople.Entity = value;
				if ((value != null))
				{
					value.PgdOrders.Add(this);
					this._SalesPerson = value.SalesPersonID;
				}
				else
				{
					this._SalesPerson = default(Nullable<int>);
				}
				this.SendPropertyChanged("PgdSalesPerson");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Sales(PgdSale entity)
	{
		this.SendPropertyChanging();
		entity.PgdOrder = this;
	}
	
	private void detach_Sales(PgdSale entity)
	{
		this.SendPropertyChanging();
		entity.PgdOrder = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
public partial class PgdProduct : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OID;
	
	private string _ProductName;
	
	private System.Nullable<int> _Category;
	
	private EntitySet<PgdSale> _Sales;
	
	private EntityRef<PgdCategory> _Category1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    #endregion
	
	public PgdProduct()
	{
		this._Sales = new EntitySet<PgdSale>(new Action<PgdSale>(this.attach_Sales), new Action<PgdSale>(this.detach_Sales));
		this._Category1 = default(EntityRef<PgdCategory>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="OID", Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ProductID
	{
		get
		{
			return this._OID;
		}
		set
		{
			if ((this._OID != value))
			{
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._OID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(100)")]
	public string ProductName
	{
		get
		{
			return this._ProductName;
		}
		set
		{
			if ((this._ProductName != value))
			{
				this.OnProductNameChanging(value);
				this.SendPropertyChanging();
				this._ProductName = value;
				this.SendPropertyChanged("ProductName");
				this.OnProductNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Category", Storage="_Category", DbType="Int")]
	public System.Nullable<int> CategoryID
	{
		get
		{
			return this._Category;
		}
		set
		{
			if ((this._Category != value))
			{
				this.OnCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._Category = value;
				this.SendPropertyChanged("CategoryID");
				this.OnCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PgdProduct_PgdSale", Storage="_Sales", ThisKey="ProductID", OtherKey="ProductID")]
	public EntitySet<PgdSale> PgdSales
	{
		get
		{
			return this._Sales;
		}
		set
		{
			this._Sales.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PgdCategory_PgdProduct", Storage="_Category1", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
	public PgdCategory PgdCategory
	{
		get
		{
			return this._Category1.Entity;
		}
		set
		{
			PgdCategory previousValue = this._Category1.Entity;
			if (((previousValue != value) 
						|| (this._Category1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category1.Entity = null;
					previousValue.PgdProducts.Remove(this);
				}
				this._Category1.Entity = value;
				if ((value != null))
				{
					value.PgdProducts.Add(this);
					this._Category = value.CategoryID;
				}
				else
				{
					this._Category = default(Nullable<int>);
				}
				this.SendPropertyChanged("PgdCategory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Sales(PgdSale entity)
	{
		this.SendPropertyChanging();
		entity.PgdProduct = this;
	}
	
	private void detach_Sales(PgdSale entity)
	{
		this.SendPropertyChanging();
		entity.PgdProduct = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sales")]
public partial class PgdSale : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OID;
	
	private System.Nullable<int> _Order;
	
	private System.Nullable<int> _Product;
	
	private System.Nullable<int> _Quantity;
	
	private System.Nullable<decimal> _UnitPrice;
	
	private EntityRef<PgdOrder> _Order1;
	
	private EntityRef<PgdProduct> _Product1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaleIDChanging(int value);
    partial void OnSaleIDChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    #endregion
	
	public PgdSale()
	{
		this._Order1 = default(EntityRef<PgdOrder>);
		this._Product1 = default(EntityRef<PgdProduct>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="OID", Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SaleID
	{
		get
		{
			return this._OID;
		}
		set
		{
			if ((this._OID != value))
			{
				this.OnSaleIDChanging(value);
				this.SendPropertyChanging();
				this._OID = value;
				this.SendPropertyChanged("SaleID");
				this.OnSaleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
	public System.Nullable<int> OrderID
	{
		get
		{
			return this._Order;
		}
		set
		{
			if ((this._Order != value))
			{
				this.OnOrderIDChanging(value);
				this.SendPropertyChanging();
				this._Order = value;
				this.SendPropertyChanged("OrderID");
				this.OnOrderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Product", Storage="_Product", DbType="Int")]
	public System.Nullable<int> ProductID
	{
		get
		{
			return this._Product;
		}
		set
		{
			if ((this._Product != value))
			{
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._Product = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
	public System.Nullable<int> Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Money")]
	public System.Nullable<decimal> UnitPrice
	{
		get
		{
			return this._UnitPrice;
		}
		set
		{
			if ((this._UnitPrice != value))
			{
				this.OnUnitPriceChanging(value);
				this.SendPropertyChanging();
				this._UnitPrice = value;
				this.SendPropertyChanged("UnitPrice");
				this.OnUnitPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PgdOrder_PgdSale", Storage="_Order1", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
	public PgdOrder PgdOrder
	{
		get
		{
			return this._Order1.Entity;
		}
		set
		{
			PgdOrder previousValue = this._Order1.Entity;
			if (((previousValue != value) 
						|| (this._Order1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order1.Entity = null;
					previousValue.PgdSales.Remove(this);
				}
				this._Order1.Entity = value;
				if ((value != null))
				{
					value.PgdSales.Add(this);
					this._Order = value.OrderID;
				}
				else
				{
					this._Order = default(Nullable<int>);
				}
				this.SendPropertyChanged("PgdOrder");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PgdProduct_PgdSale", Storage="_Product1", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
	public PgdProduct PgdProduct
	{
		get
		{
			return this._Product1.Entity;
		}
		set
		{
			PgdProduct previousValue = this._Product1.Entity;
			if (((previousValue != value) 
						|| (this._Product1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product1.Entity = null;
					previousValue.PgdSales.Remove(this);
				}
				this._Product1.Entity = value;
				if ((value != null))
				{
					value.PgdSales.Add(this);
					this._Product = value.ProductID;
				}
				else
				{
					this._Product = default(Nullable<int>);
				}
				this.SendPropertyChanged("PgdProduct");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
