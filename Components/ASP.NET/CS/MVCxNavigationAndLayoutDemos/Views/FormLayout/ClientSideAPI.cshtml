@model RegistrationFormClientSideAPIModel

@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}
@section AdditionalResources {
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
}
@functions{
    Action<MVCxFormLayoutItem> AssignTextBoxItemSettingsMethod = item => {
        item.NestedExtension().TextBox(s => {
            s.ShowModelErrors = true;
            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
            s.Properties.Password = item.Name.Contains("Password");
        });
    };
    Action<MVCxFormLayoutItem, string> AssignButtonItemSettingsMethod = (item, buttonText) => {
        item.Caption = " ";
        item.NestedExtension().Button(s => {
            s.Name = buttonText.Replace(" ", "");
            s.Text = buttonText;
            s.UseSubmitBehavior = true;
            s.Width = 100;
        });
    };
}
<script type="text/javascript">
    function OnInit(s, e) {
        UpdateItemsVisibility(s);
    }
    function OnUserTypeChanged(s, e) {
        UpdateItemsVisibility(s);
    }
    function UpdateItemsVisibility(radioButtonList) {
        var isNewUser = radioButtonList.GetValue() == "NewUser";
        formLayout.GetItemByName("loginModelGroup").SetVisible(!isNewUser);
        formLayout.GetItemByName("registerGroup").SetVisible(isNewUser);
        formLayout.AdjustControl();
    }
</script>

@using (Html.BeginForm()){
    @Html.DevExpress().FormLayout(settings => {
        settings.Name = "formLayout";

        settings.Items.Add(i => {
            i.ShowCaption = DefaultBoolean.False;
            i.NestedExtension().RadioButtonList(s => {
                s.Name = "IsNewUser";
                s.Properties.Items.Add("I am a new user", "NewUser").Selected = Model.IsNewUser;
                s.Properties.Items.Add("I am a registered user", "RegisteredUser").Selected = !Model.IsNewUser;
                s.Properties.ClientSideEvents.Init = "OnInit";
                s.Properties.ClientSideEvents.ValueChanged = "OnUserTypeChanged";
                s.ControlStyle.Border.BorderWidth = 0;
            });
        });
    
        settings.Items.AddGroupItem(g => {
            g.Name = "loginModelGroup";
            g.ClientVisible = !Model.IsNewUser;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.Items.Add(m => m.LoginModel.UserName, AssignTextBoxItemSettingsMethod);
            g.Items.Add(m => m.LoginModel.Password, AssignTextBoxItemSettingsMethod);
            g.Items.Add(m => m.LoginModel.RememberMe);
            g.Items.Add(i => AssignButtonItemSettingsMethod(i, "Sign In"));
        });

        settings.Items.AddGroupItem(g => {
            g.Name = "registerGroup";
            g.ClientVisible = !Model.IsNewUser;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.Items.Add(i => i.RegisterModel.UserName, AssignTextBoxItemSettingsMethod);
            g.Items.Add(i => i.RegisterModel.Email, AssignTextBoxItemSettingsMethod);
            g.Items.Add(i => i.RegisterModel.Password, AssignTextBoxItemSettingsMethod);
            g.Items.Add(i => i.RegisterModel.ConfirmPassword, AssignTextBoxItemSettingsMethod);
            g.Items.Add(i => AssignButtonItemSettingsMethod(i, "Sign Up"));
        });
    }).GetHtml()
}