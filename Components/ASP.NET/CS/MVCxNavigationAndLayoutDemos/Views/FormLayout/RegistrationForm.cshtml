@model RegistrationForm

@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    
    Action<MVCxFormLayoutItem> AuthorizationDataTextBoxSettingsMethod = (item) => {
        item.NestedExtension().TextBox(s => {
            s.Properties.Password = s.Name.Contains("Password");
            s.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom;
            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.Text;
            s.Properties.ValidationSettings.Display = Display.Dynamic;
            s.ShowModelErrors = true;
        });
    };
}

@section AdditionalResources {
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
}

<script type="text/javascript">
$(document).ready(function () {
    if(Boolean('@(ViewBag.SuccessValidation)'))
        alert('You have successfully registered');
});
</script>


@using (Html.BeginForm()){
    @Html.DevExpress().FormLayout(settings => {
        settings.Name = "registrationForm";
        settings.AlignItemCaptionsInAllGroups = true;
    
        settings.Items.AddGroupItem(m => m.RegistrationData, g => {
            g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Right;
            
            g.Items
                .Add(m => {
                    m.Caption = "Name";
                    m.CaptionSettings.AssociatedNestedExtensionName = "RegistrationData.FirstName";
                })
                .SetNestedContent(() => {
                    ViewContext.Writer.Write("<table><tr><td style=\"padding-right:5px;\">");
                
                    Html.DevExpress().TextBoxFor(i => i.RegistrationData.FirstName, s => { 
                        s.Width = 170;
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.Text;
                        s.Properties.ValidationSettings.Display = Display.Dynamic;
                        s.Properties.ValidationSettings.ErrorText = "*";
                    }).Render();
                
                    ViewContext.Writer.Write("</td><td>");
                
                    Html.DevExpress().TextBoxFor(i => i.RegistrationData.LastName, s => { 
                        s.Width = 170;
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.Text;
                        s.Properties.ValidationSettings.Display = Display.Dynamic;
                    }).Render();
                
                    ViewContext.Writer.Write("</td></tr></table>");
                });
            g.Items.Add(m => m.RegistrationData.Gender, i => {
                i.NestedExtension().RadioButtonList(s => {
                    s.Properties.RepeatDirection = RepeatDirection.Horizontal;
                    s.Properties.Items.Add("Male", 0);
                    s.Properties.Items.Add("Female", 1);
                    s.ControlStyle.Border.BorderStyle = BorderStyle.None;
                });
            });
            g.Items.Add(m => m.RegistrationData.Country, i => {
                i.NestedExtension().ComboBox(s => {
                    s.Properties.DropDownStyle = DropDownStyle.DropDownList;
                    s.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                    s.Properties.DataSource = RegistrationData.GetPossibleCountries();
                });
            });
        });
        
    
        settings.Items.AddGroupItem(i => i.AuthorizationData, g => {
            g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Right;

            g.Items.Add(i => i.AuthorizationData.Email, AuthorizationDataTextBoxSettingsMethod);
            g.Items.Add(i => i.AuthorizationData.Password, AuthorizationDataTextBoxSettingsMethod);
            g.Items.Add(i => i.AuthorizationData.ConfirmPassword, AuthorizationDataTextBoxSettingsMethod);
        });
        

        settings.Items.AddGroupItem(g => {
            g.ShowCaption = DefaultBoolean.False;
            g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Right;
            g.Items.Add(itemSettings => itemSettings.Caption = " ").SetNestedContent(() => {
                Html.DevExpress().Captcha(captchaSettings => {
                    captchaSettings.Name = "captcha";
                    captchaSettings.TextBox.Position = DevExpress.Web.Captcha.ControlPosition.Bottom;
                    captchaSettings.TextBox.ShowLabel = false;
                    captchaSettings.RefreshButton.Visible = false;
                }).Render();
            });
            g.Items
                .Add(i => i.Caption = " ")
                .SetNestedContent("<span>By clicking \"Sign Up\", you agree to the <a href=\"javascript:;\">privacy policy</a> and the <a href=\"javascript:;\">terms of use</a></span>");
            g.Items.AddEmptyItem().Height = 20;
            g.Items.Add(i => {
                i.Caption = " ";
                i.NestedExtension().Button(s => {
                    s.Name = "signUp";
                    s.Text = "Sign Up";
                    s.UseSubmitBehavior = true;
                    s.Width = Unit.Pixel(100);
                });
            });
        });
    }).GetHtml()
}