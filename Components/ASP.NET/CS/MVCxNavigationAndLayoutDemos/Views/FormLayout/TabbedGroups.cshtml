@model FormLayoutContactInfo

@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}
@functions{
    void ApplyDefaultTextBoxSettings(MVCxFormLayoutItem item){
        item.NestedExtension().TextBox(s => {
            s.ShowModelErrors = true;
            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.Text;
            s.Properties.ValidationSettings.ErrorText = "*";
        });
    }
}
@section AdditionalResources {
    <style type="text/css">
        .container {
            width: 400px;
            margin: auto;
        }
        .parentContainer {
            width: 100%;
        }
        .tabbedGroupPageControlCell {
            padding-left: 0px;
            padding-right: 0px;
        }
        .tabbedGroupPageControlCell {
            padding: 0 5px 10px;
            border-top: 1px Solid #A8A8A8;
        }
        .selectedElement,
        .tabbedGroupPageControlCell {
            background-color: #FDFBBA;
        }
        .radioButtonList .dxe {
            padding:0px!important; 
        }
    </style>
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
}

<script type="text/javascript">
    function OnContactMethodChanged(s, e) {
        var selectedIndex = s.GetSelectedIndex();
        UpdateRadioButtonListDecoration(s);
        tabbedGroup.SetActiveTabIndex(selectedIndex);
    }
    function UpdateRadioButtonListDecoration(radioButtonList) {
        var selectedIndex = radioButtonList.GetSelectedIndex();
        for (var i = 0; i < radioButtonList.GetItemCount(); i++)
            radioButtonList.GetItemElement(i).parentNode.className = i === selectedIndex ? "selectedElement" : "";
    }
    function OnTabbedGroupPageControlInit(s, e) {
        s.SetActiveTabIndex(radioButtonList.GetSelectedIndex());
    }
    function OnSubmitChanges(s, e){
	    if($("form").valid())
            alert('Thank you!');
    }
</script>

@using (Html.BeginForm()){
    <div class="container">
        @Html.DevExpress().FormLayout(settings => {
            settings.Name = "typeOfContact";
            settings.AlignItemCaptions = false;
            settings.ShowItemCaptionColon = false;
            settings.Width = Unit.Percentage(100);
            settings.EncodeHtml = false;

            settings.Items.Add(m => m.Type, i => {
                i.Caption = "<b>Contact me through:</b>";
                i.CaptionSettings.Location = LayoutItemCaptionLocation.Top;
                i.NestedExtension().RadioButtonList(s => {
                    s.Name = "radioButtonList";
                    s.Properties.ClientSideEvents.Init = "UpdateRadioButtonListDecoration";
                    s.Properties.ClientSideEvents.SelectedIndexChanged = "OnContactMethodChanged";
                    s.ControlStyle.Border.BorderWidth = 0;
                    s.ControlStyle.CssClass = "radioButtonList";
                    s.Width = Unit.Percentage(100);
                    foreach(string item in Enum.GetNames(typeof(FormLayoutContactInfo.ContactType))) {
                        s.Properties.Items.Add(Regex.Replace(item, "((?<=[a-z])(?=[A-Z]))|((?<=[A-Z])(?=[A-Z][a-z]))", " $1"), item);
                    }
                });
            });

            settings.Items.AddTabbedGroupItem(t => {
                t.Name = "tabbedGroup";
                t.Caption = "TabbedGroup";
                t.ShowGroupDecoration = false;
                t.ParentContainerStyle.CssClass = "tabbedGroupPageControlCell";
                t.ClientSideEvents.Init = "OnTabbedGroupPageControlInit";
                t.Width = Unit.Percentage(100);

                t.Items.AddGroupItem(m => m.Email, g => {
                    g.GroupBoxDecoration = GroupBoxDecoration.None;
                    g.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
                    g.Items.Add(m => m.Email.Email, i => {
                        ApplyDefaultTextBoxSettings(i);
                        i.NestedExtensionSettings.Width = 170;
                    });
                    g.Items.Add(m => m.Email.RetypeEmail, i => {
                        ApplyDefaultTextBoxSettings(i);
                        i.NestedExtensionSettings.Width = 170;
                    });
                });

                t.Items.AddGroupItem(m => m.Phone, g => {
                    g.ColCount = 2;
                    g.GroupBoxDecoration = GroupBoxDecoration.None;
                    g.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
                    g.Items.Add(m => m.Phone.Phone, i => {
                        ApplyDefaultTextBoxSettings(i);
                        TextBoxSettings textBoxSettings = (TextBoxSettings)i.NestedExtensionSettings;
                        textBoxSettings.Properties.ValidationSettings.ErrorText = "*";
                        textBoxSettings.Width = 170;
                    });
                    g.Items.Add(m => m.Phone.Extension, s => {
                        ApplyDefaultTextBoxSettings(s);
                        s.ParentContainerStyle.CssClass = "parentContainer";
                        s.NestedExtensionSettings.Width = 40;
                    });
                    g.Items
                        .Add(i => {
                            i.ColSpan = 2;
                            i.ShowCaption = DefaultBoolean.False;
                            i.ParentContainerStyle.Paddings.PaddingTop = 10;
                        })
                        .SetNestedContent("<span>Best Time to Call</span>");
                    g.Items.Add(m => m.Phone.StartTimeToCall, i => {
                        i.CaptionSettings.Location = LayoutItemCaptionLocation.Left;
                        i.NestedExtensionType = FormLayoutNestedExtensionItemType.TimeEdit;
                        i.NestedExtensionSettings.Width = 92;
                    });
                    g.Items.Add(m => m.Phone.EndTimeToCall, i => {
                        i.CaptionSettings.Location = LayoutItemCaptionLocation.Left;
                        i.NestedExtensionType = FormLayoutNestedExtensionItemType.TimeEdit;
                        i.NestedExtensionSettings.Width = 92;
                    });
                });

                t.Items.AddGroupItem(m => m.SMS, g => {
                    g.GroupBoxDecoration = GroupBoxDecoration.None;
                    g.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
                    g.Items.Add(m => m.SMS.Provider, i => {
                        i.NestedExtension().ComboBox(s => {
                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.Text;
                            s.Properties.Items.Add("Verizon Wireless");
                            s.Properties.Items.Add("Sprint");
                            s.Properties.Items.Add("AT&T");
                            s.Properties.Items.Add("T-Mobile");
                        });
                    });
                    g.Items.Add(m => m.SMS.Phone, i => ApplyDefaultTextBoxSettings(i));
                });

                t.Items.AddGroupItem(m => m.InstantMessenger, g => {
                    g.GroupBoxDecoration = GroupBoxDecoration.None;
                    g.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
                    g.Items.Add(m => m.InstantMessenger.ServiceName, i => {
                        i.NestedExtension().ComboBox(s => {
                            s.ShowModelErrors = true;
                            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.Text;
                            s.Properties.Items.Add("MSN");
                            s.Properties.Items.Add("Skype");
                            s.Properties.Items.Add("Jabber");
                            s.Properties.Items.Add("ICQ");
                        });
                    });
                    g.Items.Add(m => m.InstantMessenger.MessengerID, i => ApplyDefaultTextBoxSettings(i) );
                });

                t.Items.AddGroupItem(m => m.PostalService, g => {
                    g.ColCount = 2;
                    g.GroupBoxDecoration = GroupBoxDecoration.None;
                    g.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
                    g.Items.Add(m => m.PostalService.Address, i => {
                        ApplyDefaultTextBoxSettings(i);
                        i.ColSpan = 2;
                        i.NestedExtensionSettings.Width = Unit.Percentage(100);
                    });
                    g.Items.Add(m => m.PostalService.City, i => { 
                        ApplyDefaultTextBoxSettings(i);
                        i.ColSpan = 2;
                        i.NestedExtensionSettings.Width = Unit.Percentage(100);
                    });
                    g.Items.Add(m => m.PostalService.PostCode, i => { 
                        ApplyDefaultTextBoxSettings(i);
                        i.NestedExtensionSettings.Width = 100;
                    });
                    g.Items.Add(m => m.PostalService.Country, i => ApplyDefaultTextBoxSettings(i));
                });
            });
    
            settings.Items.Add(i => {
                i.ShowCaption = DefaultBoolean.False;
                i.HorizontalAlign = FormLayoutHorizontalAlign.Right;
                i.ParentContainerStyle.Paddings.PaddingTop = 5;
                i.ParentContainerStyle.Paddings.PaddingRight = 0;
                i.Width = 70;

                i.NestedExtension().Button(s => {
                    s.Name = "btnSubmit";
                    s.Text = "Submit";
                    s.ClientSideEvents.Click = "OnSubmitChanges";
                });
            });
        }).GetHtml()
    </div>
}