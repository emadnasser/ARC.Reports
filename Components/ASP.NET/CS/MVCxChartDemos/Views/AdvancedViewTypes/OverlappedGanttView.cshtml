@model List<Task>

    <script type="text/javascript">
        var x = 0;
        var y = 0;
        var coords = null;
        var canDrag = false;
        var dragging = false;
        var draggingIndex = -1;
        var constLine = null;
        var series = null;
        var seriesPoint = null;
        var completedDate = null;

        $(window).load(function () {
            $("#chart").mousedown(MouseDown);
            $("#chart").mouseup(MouseUp);
            $("#chart").mousemove(MouseMove);
            ASPx.Evt.PreventElementDragAndSelect(chart.GetMainDOMElement(), false);
        });

        function MouseDown() {
            dragging = canDrag;
            if (dragging && !coords.IsEmpty()) {
                DraggingToolTip.ShowAtPos(x + 5, y + 10);
                UpdateDraggingText();
            }
            if (!ASPxClientUtils.ie)
                return false;
        }
        function MouseUp() {
            if (dragging) {
                dragging = false;
                if (draggingIndex >= 0)
                    chart.PerformCallback({
                        "SeriesName": series.name,
                        "Argument": seriesPoint.argument,
                        "ValueIndex": draggingIndex,
                        "Date": GetDateString(seriesPoint.values[draggingIndex])
                    });
                else {
                    completedDate = GetDateString(constLine.value);
                    chart.PerformCallback();
                }
                DraggingToolTip.Hide();
            }
        }
        function MouseMove(e) {
            x = e.pageX;
            y = e.pageY;
            var relativeX = x - $("#chart").offset().left;
            var relativeY = y - $("#chart").offset().top;

            var diagram = chart.GetChart().diagram;
            coords = diagram.PointToDiagram(relativeX, relativeY);
            if (!dragging) {
                if (diagram.axisY.constantLines.length != 0)
                    canDrag = BeginDragConstantLine(relativeX, relativeY);
                else
                    canDrag = BeginDragSeriesPoints(relativeX, relativeY);
            }

            if (canDrag || dragging)
                chart.SetCursor('e-resize');
            else
                chart.SetCursor('default');

            if (dragging && !coords.IsEmpty()) {
                if (diagram.axisY.constantLines.length != 0)
                    constLine.value = coords.dateTimeValue;
                else
                    seriesPoint.values[draggingIndex] = coords.dateTimeValue;
                UpdateDraggingText();
            }
        }
        function BeginDragConstantLine(x, y) {
            constLine = null;

            var hitinfo = chart.HitTest(x, y)
            for (var i = 0; i < hitinfo.length; i++) {
                if (hitinfo[i].object instanceof ASPxClientConstantLine) {
                    constLine = hitinfo[i].object;
                    return true;
                }
            }
            return false;
        }
        function BeginDragSeriesPoints(x, y) {
            series = null;
            seriesPoint = null;
            var hitInfo = chart.HitTest(x, y);
            for (var i = 0; i < hitInfo.length; i++) {
                if ((hitInfo[i].object instanceof ASPxClientSeries) && (hitInfo[i].additionalObject instanceof ASPxClientSeriesPoint)) {
                    series = hitInfo[i].object;
                    seriesPoint = hitInfo[i].additionalObject;
                    if (series.name.indexOf('Current Plan') != -1) {
                        draggingIndex = GetDraggingIndex();
                        return draggingIndex != -1;
                    }
                }
            }
            return false;
        }
        function GetDraggingIndex() {
            if (coords.dateTimeValue.getUTCFullYear() == seriesPoint.values[0].getUTCFullYear() && coords.dateTimeValue.getUTCMonth() == seriesPoint.values[0].getUTCMonth() && coords.dateTimeValue.getUTCDate() == seriesPoint.values[0].getUTCDate()) return 0;
            if (coords.dateTimeValue.getUTCFullYear() == seriesPoint.values[0].getUTCFullYear() && coords.dateTimeValue.getUTCMonth() == seriesPoint.values[1].getUTCMonth() && coords.dateTimeValue.getUTCDate() == seriesPoint.values[1].getUTCDate()) return 1;
            return -1;
        }
        function UpdateDraggingText() {
            DraggingToolTip.SetContentHTML("<span style=\"white-space:nowrap\">" + GetDateString(coords.dateTimeValue) + "</span>");
        }
        function GetDateString(date) {
            return (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
        }
    </script>

@using (Html.BeginForm()) {
    ChartDemoOptions options = (ChartDemoOptions)Session[ChartDemoHelper.OptionsKey];
    @Html.Partial("GanttViewsPartial", Model)
    @Html.DevExpress().PopupControl(new PopupControlSettings() {
        Name = "DraggingToolTip",
        Height = 1,
        Width = 1,
        ShowHeader = false,
        ShowShadow = false,
        EnableClientSideAPI = true,
        PopupAction = PopupAction.None,
        CloseAction = CloseAction.None
    }).GetHtml()
}
