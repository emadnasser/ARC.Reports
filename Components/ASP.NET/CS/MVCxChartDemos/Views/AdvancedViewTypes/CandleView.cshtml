<script type="text/javascript">
    $(window).load(UpdateLabelOptionDisabled);

    function SetLabelOptionEnabled() {
        $("#labelLevel")[0].disabled = false;
    }
    function UpdateLabelOptionDisabled() {
        $("#labelLevel")[0].disabled = !($("#showLabels")[0].checked);
    }
</script>

@using (Html.BeginForm()) {
    ChartFinacialDemoOptions options = (ChartFinacialDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table class="OptionsTable" style="width: 100%;">
            <tr>
                <td>@Html.CheckBox("workDaysOnly", options.WorkDaysOnly)</td>
                <td class="NoWrap"><label>Work Day Only</label></td>
                <td><div class="Spacer" style="width: 512px;"></div></td>
                <td class="NoWrap"><label for="reductionLevel">Reduction Level:</label></td>
                <td>@Html.DropDownList("reductionLevel", typeof(StockLevel), options.ReductionLevel, new { style = "width:70px" })</td>
                <td></td>
            </tr>
            <tr>
                <td>@Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionDisabled()" })</td>
                <td class="NoWrap"><label for="showLabels" style="width:auto">Show Labels</label></td>
                <td><div class="Spacer" style="width: 512px;"></div></td>
                <td class="NoWrap"><label for="labelLevel">Label Level:</label></td>
                <td>@Html.DropDownList("labelLevel", ChartDemoHelper.GetFinancialLabelLevels(), new { style = "width:70px" })</td>
                <td><input style="margin-left:6px" type="submit" value="Apply" onclick="SetLabelOptionEnabled()" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.Height = 500;
        settings.Width = 920;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Right;
        });
    
        settings.Series.Add(s => { 
            s.Name = "Google Inc.";
            s.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            s.Views().CandleStickSeriesView(v => {
                v.ReductionOptions.Level = options.ReductionLevel;
                v.SeriesLabel(l => {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.HideOverlapped;
                    switch (options.LabelLevel) {
                        case StockLevel.Low:
                            l.TextPattern = "{LV}";
                            break;
                        case StockLevel.High:
                            l.TextPattern = "{HV}";
                            break;
                        case StockLevel.Open:
                            l.TextPattern = "{OV}";
                            break;
                        default: l.TextPattern = "{CV}";
                            break;
                    }
                });
            });
            s.ArgumentScaleType = ScaleType.DateTime;
            s.SetFinancialDataMembers("Date", "LowValue", "HighValue", "OpenValue", "CloseValue");
        });
    
        settings.XYDiagram(d => {
            d.AxisX.Label.Staggered = true;
            d.AxisX.GridLines.Visible = true;
            d.AxisX.WholeRange.AutoSideMargins = true;
            d.AxisX.Interlaced = true;
            d.AxisX.DateTimeScaleOptions.WorkdaysOnly = options.WorkDaysOnly;
            d.AxisY.Title.Text = "US Dollars";
            d.AxisY.Title.Visibility = DefaultBoolean.True;
            d.AxisY.WholeRange.Auto = false;
            d.AxisY.WholeRange.SetMinMaxValues(655, 855);
            d.AxisY.WholeRange.AutoSideMargins = false;
            d.AxisY.WholeRange.SideMarginsValue = 0;
            d.AxisY.GridLines.MinorVisible = true;
        });
    
        settings.Titles.Add(new ChartTitle() {
            Font = new Font("Tahoma", 18),
            Text = "Stock Prices"
        });
    
        settings.Titles.Add(new ChartTitle() {
            Alignment = StringAlignment.Far,
            Dock = ChartTitleDockStyle.Bottom,
            Font = new Font("Tahoma", 8),
            TextColor = Color.Gray,
            Text = "From www.quandl.com"
        });
    }).Bind(Model).GetHtml();
}