@model IEnumerable

@using (Html.BeginForm()) {
    ChartToolTipDemoOptions options = (ChartToolTipDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table>
            <tr style="height: 25px;">
                <td class="NoWrap"><label for="openMode">Open Mode:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("openMode", ChartDemoHelper.GetToolTipOpenModes(), new { style = "width: 80px" })
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label for="position">ToolTip Position:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("position", ChartDemoHelper.GetToolTipPositions(), new { style = "width: 80px" })
                </td>
                <td><div class="Spacer" style="width: 477px;"></div></td>
                <td><input style="float: right;" type="submit" value="Apply" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.Height = 500;
        settings.Width = 920;
    
        settings.Titles.Add(new ChartTitle() {
            Font = new Font("Tahoma", 18),
            Text = "Sales Volume by Year"
        });

        settings.Series.Template(t => {
            t.Views().SideBySideBarSeriesView(v => {
                v.SeriesLabel(l => {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                    l.TextPattern = "{VP:P0}";
                });
            });
            t.ToolTipEnabled = DefaultBoolean.True;
            t.CrosshairEnabled = DefaultBoolean.False;
            t.ToolTipHintDataMember = "FirstName";
            t.ToolTipPointPattern = "Name: {HINT} {S}\nYear: {A:yyyy}\nTotal sales: {V}";
            t.SummaryFunction = "SUM([Freight])";
            t.ArgumentScaleType = DevExpress.XtraCharts.ScaleType.DateTime;
            t.ArgumentDataMember = "OrderDate";
        });

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.Border.Visibility = DefaultBoolean.False;
        });
    
        settings.XYDiagram(d => {
            d.AxisY.Interlaced = true;
            d.AxisY.Title.Text = "Thousands of Dollars";
            d.AxisY.Title.Visibility = DefaultBoolean.True;
            d.AxisX.DateTimeScaleOptions.MeasureUnit = DevExpress.XtraCharts.DateTimeMeasureUnit.Year;
            d.AxisX.DateTimeScaleOptions.GridAlignment = DevExpress.XtraCharts.DateTimeGridAlignment.Year;
        });
    
        settings.BoundDataChanged = (s, e) => {
            DevExpress.XtraCharts.Web.WebChartControl chart = (DevExpress.XtraCharts.Web.WebChartControl)s;
            foreach (Series series in chart.Series)
                series.ToolTipImage.ImageUrl = Url.Action("showImage", "miscellaneous", new { id = options.ToolTipImages[series.Name] });
            switch (options.Position) {
                case ToolTipPositions.Free:
                    chart.ToolTipOptions.ToolTipPosition = new ToolTipFreePosition();
                    break;
                case ToolTipPositions.Relative:
                    chart.ToolTipOptions.ToolTipPosition = new ToolTipRelativePosition();
                    break;
                case ToolTipPositions.Mouse:
                    chart.ToolTipOptions.ToolTipPosition = new ToolTipMousePosition();
                    break;
            }
            chart.ToolTipController.OpenMode = options.OpenMode;
        };
    }).Bind(Model, seriesDataMember: "LastName").GetHtml()
}

