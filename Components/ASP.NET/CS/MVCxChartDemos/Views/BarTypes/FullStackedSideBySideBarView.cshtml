@model IList
<script type="text/javascript">
    $(window).load(UpdateLabelOptionsDisabled);

    function SetLabelOptionsEnabled() {
        $("#valueAsPercent")[0].disabled = false;
    }
    function UpdateLabelOptionsDisabled() {
        $("#valueAsPercent")[0].disabled = !($("#showLabels")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartSideBySideBarDemoOptions options = (ChartSideBySideBarDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionsDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td>
                    @Html.CheckBox("valueAsPercent", options.ValueAsPercent)
                </td>
                <td class="NoWrap" style="width: 120px;">
                    <label for="valueAsPercent" style="width:auto">Value As Percent</label>
                </td>
                <td><div class="Spacer" style="width: 460px;"></div></td>
                <td class="NoWrap"><label>Group By</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("group", ChartDemoHelper.GetGroupByValues())
                </td>
                <td><div class="Spacer" style="width: 14px;"></div></td>
                <td>
                    <input style="float: initial;" type="submit" value="Apply" onclick="UpdateLabelOptionsDisabled()" />
                </td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.Height = 500;
        settings.Width = 920;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.Border.Visibility = DefaultBoolean.False;
            l.Margins.Left = 40;
        });

        settings.Series.Template(t => {
            t.Views().SideBySideFullStackedBarSeriesView(v => {
                v.SeriesLabel(l => {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                    l.TextPattern = options.ValueAsPercent ? "{VP:P0}" : "{V:0,,.00}";
                });
            });
            t.SetDataMembers("Country", "Population");
            t.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            t.CrosshairLabelPattern = "{S}<br/>{V:0,,.00} million";
        });

        settings.BoundDataChanged = (s, e) => {
            MVCxChartControl chart = (MVCxChartControl)s;
            foreach (Series series in chart.Series) {
                series.Views().SideBySideFullStackedBarSeriesView(v => {
                    if (options.Group == GroupBy.Sex)
                        v.StackedGroup = series.Name.Contains("Female") ? "Female" : "Male";
                    else {
                        if (series.Name.Contains("0-14"))
                            v.StackedGroup = "0-14 years";
                        else if (series.Name.Contains("15-64"))
                            v.StackedGroup = "15-64 years";
                        else
                            v.StackedGroup = "65 years and older";
                    }
                });
            };
        };

        settings.XYDiagram(d => {
            d.AxisY.Interlaced = true;
            d.AxisY.Title.Visibility = DefaultBoolean.False;
            d.AxisY.WholeRange.SetMinMaxValues(0, 1);
            d.AxisY.WholeRange.SideMarginsValue = 0;
            d.AxisY.Label.TextPattern = "{VP:P0}";
        });
    
        settings.Titles.Add(new ChartTitle() {
            Font = new Font("Tahoma", 18),
            Text = "Population: Age Structure"
        });
        settings.Titles.Add(new ChartTitle() {
            Font = new Font("Tahoma", 12),
            Text = "Data estimate for end-2016"
        });
        settings.Titles.Add(new ChartTitle() {
            Alignment = StringAlignment.Far,
            Dock = ChartTitleDockStyle.Bottom,
            Font = new Font("Tahoma", 8),
            TextColor = Color.Gray,
            Text = "From www.cia.gov"
        });
    }).Bind(Model, seriesDataMember: "GenderAge").GetHtml()
}
