@model IList
<script type="text/javascript">
    $(window).load(UpdateLabelOptionsDisabled);

    function SetLabelOptionsEnabled() {
        $("#labelPositionString")[0].disabled = false;
        $("#textOrientationString")[0].disabled = false;
        $("#labelIndent")[0].disabled = false;
    }
    function UpdateLabelOptionsDisabled() {
        $("#labelPositionString")[0].disabled = !($("#showLabels")[0].checked);
        $("#textOrientationString")[0].disabled = !($("#showLabels")[0].checked);
        OnLabelPositionSelectedIndexChanged();
        if ($("#labelPositionString")[0].value == "TopInside" || $("#labelPositionString")[0].value == "BottomInside")
            labelIndent.SetEnabled($("#showLabels")[0].checked);
    }
    function OnLabelPositionSelectedIndexChanged() {
        if (($("#labelPositionString")[0].value != "TopInside" && $("#labelPositionString")[0].value != "BottomInside") || !($("#showLabels")[0].checked))
            labelIndent.SetEnabled(false);
        else
            labelIndent.SetEnabled(true);
    }
</script>
@using (Html.BeginForm()) {
    ChartBarDemoOptions options = (ChartBarDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionsDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 210px;"></div></td>
                <td class="NoWrap">
                    <label>Label Position</label>
                </td>
                <td>
                    @Html.DropDownList("labelPositionString", ChartDemoHelper.GetBarLabelPositions(true), new { style = "width: 108px", onchange = "OnLabelPositionSelectedIndexChanged()" })
                </td>
                <td class="NoWrap">
                    <label>Text Orientation</label>
                </td>
                <td>
                    @Html.DropDownList("textOrientationString", ChartDemoHelper.GetTextOrientations(), new { style = "width: 108px" })
                </td>
            </tr>
            <tr>
                <td><div class="Spacer" style="width: 100%;height: 5px"></div></td>
            </tr>
            <tr>
                <td></td>
                <td class="NoWrap" style="width: 120px;"></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="NoWrap">
                    <label>Label Indent</label>
                </td>
                <td>
                    @Html.DevExpress().SpinEdit(set => {
                        set.Name = "labelIndent";
                        set.Properties.MinValue = 1;
                        set.Properties.MaxValue = 10000;
                        set.Number = options.LabelIndent;
                        set.Width = 108;
                        set.Height = 21;
                    }).GetHtml()
                </td>
                <td>
                    <input type="submit" value="Apply" onclick="UpdateLabelOptionsDisabled()" />
                </td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Width = 920;
        settings.Height = 500;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Right;
        });

        settings.Series.Template(t => {
            t.Views().StackedBarSeriesView(v => {
                v.SeriesLabel(l => {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                    l.TextPattern = "{V:0,,.0}";
                    l.Font = new Font("Tahoma", 8, FontStyle.Bold);
                    l.Position = (BarSeriesLabelPosition)Enum.Parse(typeof(BarSeriesLabelPosition), options.LabelPositionString);
                    l.TextOrientation = (TextOrientation)Enum.Parse(typeof(TextOrientation), options.TextOrientationString);
                    l.Indent = options.LabelIndent;
                });
            });
            t.SetDataMembers("Country", "Population");
            t.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
        });

        settings.XYDiagram(d => {
            d.Rotated = true;
            d.AxisY.Interlaced = true;
            d.AxisY.Title.Text = "Millions";
            d.AxisY.GridLines.MinorVisible = true;
            d.AxisY.Title.Visibility = DefaultBoolean.True;
            d.AxisY.Label.TextPattern = "{V:0,,}";
        });

        settings.Titles.Add(new ChartTitle() {
            Font = new Font("Tahoma", 18),
            Text = "Male Age Structure"
        });
        settings.Titles.Add(new ChartTitle() {
            Alignment = StringAlignment.Far,
            Dock = ChartTitleDockStyle.Bottom,
            Font = new Font("Tahoma", 8),
            TextColor = Color.Gray,
            Text = "From www.cia.gov"
        });
    }).Bind(Model, seriesDataMember: "Age").GetHtml();
}
