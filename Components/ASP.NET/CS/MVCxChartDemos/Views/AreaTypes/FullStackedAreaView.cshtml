@model IList
<script type="text/javascript">
    $(window).load(UpdateLabelOptionDisabled);

    function SetLabelOptionsEnabled() {
        $("#valueAsPercent")[0].disabled = false;
    }
    function UpdateLabelOptionDisabled() {
        $("#valueAsPercent")[0].disabled = !($("#showLabels")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartAreaFullStckedDemoOptions options = (ChartAreaFullStckedDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    <div class="chartOptionsPanel" style="height: auto; font-size: 12px">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionDisabled()" })
                </td>
                <td class="NoWrap" style="width: 100%;">
                    <label for="showLabels" style="width: auto">Show Labels</label>
                </td>
                <td>
                    @Html.CheckBox("valueAsPercent", options.ValueAsPercent)
                </td>
                <td class="NoWrap" style="width: 120px;">
                    <label for="valueAsPercent" style="width: auto">Value As Percent</label>
                </td>
                <td>
                    <div class="Spacer" style="width: 15px;"></div>
                </td>
                <td>
                    <input style="float: right;" type="submit" value="Apply" onclick="SetLabelOptionsEnabled()" />
                </td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Width = 920;
        settings.Height = 500;
        settings.BorderOptions.Visibility = DefaultBoolean.False;   
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.RightToLeft;
            l.Border.Visibility = DefaultBoolean.False;
        });
    
        settings.Titles.Add(new ChartTitle() {
            Text = "Market Share Over Time"
        });

        settings.Series.Template(t => {
            t.Views().FullStackedAreaSeriesView(v => {
                v.SeriesLabel(l => {
                    l.TextPattern = options.ValueAsPercent ? "{VP:P0}" : "${V}M";
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                });
            });
            t.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            t.SetDataMembers("Year", "Sales");
        });
           
        settings.XYDiagram(d => {
            d.AxisX.Title.Text = "Country";
            d.AxisX.WholeRange.AutoSideMargins = false;
            d.AxisX.WholeRange.SideMarginsValue = 0;

            d.AxisY.Label.TextPattern = "{V:P0}";
            d.AxisY.Title.Text = "Percent";
            d.AxisY.VisualRange.Auto = false;
            d.AxisY.VisualRange.AutoSideMargins = false;
            d.AxisY.VisualRange.MaxValue = 1;
            d.AxisY.VisualRange.MinValue = 0;
            d.AxisY.VisualRange.SideMarginsValue = 0;
            d.AxisY.WholeRange.Auto = false;
            d.AxisY.WholeRange.AutoSideMargins = false;
            d.AxisY.WholeRange.MaxValue = 1;
            d.AxisY.WholeRange.MinValue = 0;
            d.AxisY.WholeRange.SideMarginsValue = 0;
        });
    }).Bind(Model, seriesDataMember: "Company").GetHtml()
}
