@model IList
<script type="text/javascript">
    $(window).load(UpdateLabelOptionDisabled);

    function SetLabelOptionsEnabled() {
        $("#labelAngle")[0].disabled = false;
    }
    function UpdateLabelOptionDisabled() {
        $("#labelAngle")[0].disabled = !($("#showLabels")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartAreaDemoOptions options = (ChartAreaDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    <div class="chartOptionsPanel" style="height: auto; font-size: 12px">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width: auto">Show Labels</label>
                </td>
                <td>
                    <div class="Spacer" style="width: 15px;"></div>
                </td>
                <td class="NoWrap">
                    <label>Label Angle</label></td>
                <td>
                    <div class="Spacer" style="width: 5px;"></div>
                </td>
                <td>
                    @Html.DropDownList("labelAngle", ChartDemoHelper.GetLabelAngle("45"), new { style = "width: 50px;" })
                </td>
                <td>
                    <div class="Spacer" style="width: 15px;"></div>
                </td>
                <td class="NoWrap">
                    <label>Marker Kind</label></td>
                <td>
                    <div class="Spacer" style="width: 5px;"></div>
                </td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerKindString", ChartDemoHelper.GetMarkerKinds(), new { style = "width: 130px;" })
                </td>
                <td class="NoWrap">
                    <label>Transparency</label></td>
                <td>
                    <div class="Spacer" style="width: 5px;"></div>
                </td>
                <td>
                    @Html.DropDownList("transparency", ChartDemoHelper.GetTransparency("135"), new { style = "width: 130px;" })
                </td>
            </tr>
            <tr>
                <td>
                    <div class="Spacer" style="width: 100%; height: 5px"></div>
                </td>
            </tr>
            <tr>
                <td>
                    <div class="Spacer"></div>
                </td>
                <td>
                    <div class="Spacer"></div>
                </td>
                <td>
                    <div class="Spacer"></div>
                </td>
                <td>
                    <div class="Spacer"></div>
                </td>
                <td>
                    <div class="Spacer"></div>
                </td>
                <td>
                    <div class="Spacer"></div>
                </td>
                <td>
                    <div class="Spacer" style="width: 10px;"></div>
                </td>
                <td class="NoWrap">
                    <label>Marker Size</label></td>
                <td>
                    <div class="Spacer" style="width: 5px;"></div>
                </td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerSize", ChartDemoHelper.GetMarkerSize("10"), new { style = "width: 130px;" })
                </td>
                <td style="width: 100%;">
                    <input type="submit" value="Apply" onclick="SetLabelOptionsEnabled()" />
                </td>
            </tr>
        </table>
    </div>
    
    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Width = 920;
        settings.Height = 500;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;
        settings.CrosshairOptions.GroupHeaderPattern = "Year: {A:yyyy}";
    
        settings.Titles.Add(new ChartTitle() {
            Text = "Outside Vendor Costs"
        });

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.Border.Visibility = DefaultBoolean.False;
        });

        settings.Series.Template(t => {
            t.Views().AreaSeriesView(v => {
                v.PointMarkerOptions.Size = options.MarkerSize;
                v.Transparency = options.Transparency;
                v.PointMarkerOptions.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.MarkerKindString);
                if (options.MarkerKindString == MarkerKind.Star.ToString()) {
                    v.PointMarkerOptions.StarPointCount = options.StarPointCount;
                }
                v.SeriesLabel(l => {
                    l.Angle = options.LabelAngle;
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                });
            });
            t.SetDataMembers("Year", "Costs");
            t.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            t.CrosshairLabelPattern = "{S}: ${V:0.0}K";
        });
    
        settings.XYDiagram(d => {
            d.AxisX.Label.MaxWidth = 70;
            d.AxisX.Title.Text = "Corporation";
            d.AxisY.Interlaced = true;
            d.AxisY.Title.Text = "Thousands US$";
            d.AxisY.Title.Visibility = DefaultBoolean.True;
            d.AxisY.WholeRange.SetMinMaxValues(100, 390);
        });
    }).Bind(Model, seriesDataMember: "Company").GetHtml()
}
