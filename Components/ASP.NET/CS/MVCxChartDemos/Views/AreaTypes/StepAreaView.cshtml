@model IList
<script type="text/javascript">
    $(window).load(UpdateLabelOptionDisabled);

    function SetLabelOptionsEnabled() {
        $("#labelAngle")[0].disabled = false;
    }
    function UpdateLabelOptionDisabled() {
        $("#labelAngle")[0].disabled = !($("#showLabels")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartStepAreaDemoOptions options = (ChartStepAreaDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    <div class="chartOptionsPanel" style="height:auto; font-size:12px">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.CheckBox("inverted", options.Inverted)
                </td>
                <td class="NoWrap">
                    <label class="checkBox" for="inverted">Inverted</label>
                </td>
                <td><div class="Spacer" style="width: 110px;"></div></td>
                <td class="NoWrap"><label>Label Angle</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("labelAngle", ChartDemoHelper.GetLabelAngle("45"), new { style = "width: 50px;" })
                </td>
                <td><div class="Spacer" style="width: 15px;"></div></td>
                <td class="NoWrap"><label>Marker Kind</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerKindString", ChartDemoHelper.GetMarkerKinds(), new { style = "width: 130px;" })
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Marker Size</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerSize", ChartDemoHelper.GetMarkerSize("10"), new { style = "width: 130px;" })
                </td>
                <td><div class="Spacer" style="width: 14px;"></div></td>
                <td style="width: 100%;">
                    <input type="submit" value="Apply" onclick="SetLabelOptionsEnabled()" />
                </td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Width = 920;
        settings.Height = 500;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.Visibility = DefaultBoolean.False;
        });

        settings.Series.Add(s => {
            s.Name = "Fuel Oil Price";
            s.ArgumentDataMember = "Date";
            s.ValueDataMembers[0] = "Price";
            s.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            s.CrosshairLabelPattern = "{A:d}: {V:0.00}";
            s.Views().StepAreaSeriesView(v => {
                v.MarkerOptions.Kind = MarkerKind.Square;
                v.MarkerOptions.Size = 20;
                v.PointMarkerOptions.Size = options.MarkerSize;
                v.Transparency = options.Transparency;
                v.InvertedStep = options.Inverted;
                v.PointMarkerOptions.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.MarkerKindString); ;

                v.PointMarkerOptions.StarPointCount = options.StarPointCount;
                v.SeriesLabel(l => {
                    l.Angle = options.LabelAngle;
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                });
            });
        });     
    
        settings.XYDiagram(d => {
            d.AxisY.Interlaced = true;
            d.AxisY.MinorCount = 4;
            d.AxisY.Title.Text = "Euros Per Liter";
            d.AxisY.Title.Visibility = DefaultBoolean.True;
            d.AxisY.WholeRange.AlwaysShowZeroLevel = false;
            d.AxisX.WholeRange.SideMarginsValue = 0;
            d.AxisX.GridLines.Visible = true;
            d.AxisX.Label.TextPattern = "{A:y}";
        });

        settings.Titles.Add(new ChartTitle() {
            Text = "Fuel Prices"
        });
    }).Bind(Model).GetHtml()
}