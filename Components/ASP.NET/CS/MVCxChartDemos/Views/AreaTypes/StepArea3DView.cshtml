@model IList

@using (Html.BeginForm()) {
    ChartStepArea3DDemoOptions options = (ChartStepArea3DDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels)
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.CheckBox("inverted", options.Inverted)
                </td>
                <td class="NoWrap">
                    <label class="checkBox" for="inverted">Inverted</label>
                </td>
                <td><div class="Spacer" style="width: 360px;"></div></td>
                <td class="NoWrap"><label for="perspectiveAngle">Perspective Angle</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("perspectiveAngle", ChartDemoHelper.GetPerspectiveAngle())
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label for="zoomPercent">Zoom Percent</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("zoomPercent", ChartDemoHelper.GetZoomPercent())
                </td>
                <td><div class="Spacer" style="width:13px;"></div></td>
                <td><input style="float: right;" type="submit" value="Apply" /></td>
            </tr>
        </table>
    </div>
    
    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Width = 920;
        settings.Height = 500;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;
    
        settings.Legends.Default(l => {
            l.Visibility = DefaultBoolean.False;
        });
    
        settings.Titles.Add(new ChartTitle() {
            Text = "US Gasoline Prices in 2015"
        });
        settings.Titles.Add(new ChartTitle() {
            Font = new Font("Tahoma", 12),
            Text = "Dollars per Gallon"
        });
        settings.Titles.Add(new ChartTitle() {
            Alignment = StringAlignment.Far,
            Dock = ChartTitleDockStyle.Bottom,
            Font = new Font("Tahoma", 8),
            TextColor = Color.Gray,
            Text = "From www.eia.gov"
        });

        settings.Series.Add(s => {
            s.ArgumentDataMember = "Date";
            s.ValueDataMembers[0] = "Price";
            s.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;

            s.Views().StepArea3DSeriesView(v => {
                v.Transparency = options.Transparency;
                v.InvertedStep = options.Inverted;
                v.SeriesLabel(l => {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                });
            });
        });
        
        settings.XYDiagram3D(d => {
            d.AxisX.DateTimeScaleOptions.MeasureUnit = DevExpress.XtraCharts.DateTimeMeasureUnit.Month;
            d.AxisX.Label.TextPattern = "{A:MMMM}";
            d.AxisY.Label.TextPattern = "{V:N1}";
            d.AxisY.WholeRange.AlwaysShowZeroLevel = false;
            d.AxisY.Interlaced = true;
            
            d.RotationType = RotationType.UseAngles;
            d.RotationOrder = RotationOrder.XYZ;
            d.VerticalScrollPercent = 10;
            d.PerspectiveAngle = options.PerspectiveAngle;
            d.ZoomPercent = options.ZoomPercent;
        });
    }).Bind(Model).GetHtml()
}