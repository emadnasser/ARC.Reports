@using (Html.BeginForm()) {
    ChartNestedDoughnutDemoOptions options = (ChartNestedDoughnutDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto">
        <table style="width: 100%">
            <tr>
                <td class="NoWrap">
                    <label for="showAgeStruct">Group Series By:</label>
                </td>
                <td>
                    <div class="Spacer" style="width: 5px"></div>
                </td>
                <td>
                    @Html.DropDownList("showAgeStruct", ChartDemoHelper.GetAgeStructureModes(), new { style = "width:72px" })
                </td>
                <td>
                    <div class="Spacer" style="width: 10px"></div>
                </td>
                <td class="NoWrap">
                    <label for="innerIndent">Inner indent:</label>
                </td>
                <td>
                    <div class="Spacer" style="width: 5px"></div>
                </td>
                <td>
                    @Html.DropDownList("innerIndent", ChartDemoHelper.GetPredefinedInnerIndents(), new { style = "width:72px" })
                </td>
            </tr>
            <tr><td><div class="Spacer" style="height: 5px"></div></td></tr>
            <tr>
                <td class="NoWrap">
                    <label for="holeRadiusPercent">Hole radius, %:</label>
                </td>
                <td>
                    <div class="Spacer" style="width: 5px"></div>
                </td>
                <td>
                    @Html.DropDownList("holeRadiusPercent", ChartDemoHelper.GetPredefinedHoleRadiuses(), new { style = "width:72px" })
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td style="width: 100%">
                    <input style="float: right" type="submit" value="Apply" />
                </td>
            </tr>
        </table>
    </div>
    <br />

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.Height = 500;
        settings.Width = 920;
        settings.ToolTipEnabled = DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.Border.Visibility = DefaultBoolean.False;
        });

        string argumentDataMember = options.ShowAgeStruct ? "Gender" : "Age";

        settings.Series.Template(t => {
            t.ArgumentDataMember = argumentDataMember;
            t.ValueDataMembers.AddRange("Population");
            t.LabelsVisibility = DefaultBoolean.False;
            t.ShowInLegend = false;
            t.ToolTipPointPattern = "{S}\n{HINT} : {VP:##.##%}";
            t.ToolTipHintDataMember = options.ShowAgeStruct ? "Gender" : "Age";
            t.LegendTextPattern = "{A}";
            t.DataFilters.Add(new DataFilter("Name", "System.String", DataFilterCondition.Equal, "United States"));
            t.DataFilters.Add(new DataFilter("Name", "System.String", DataFilterCondition.Equal, "Brazil"));
            t.DataFilters.Add(new DataFilter("Name", "System.String", DataFilterCondition.Equal, "Russia"));
            t.DataFiltersConjunctionMode = ConjunctionTypes.Or;
            t.Views().NestedDoughnutSeriesView(v => {
                v.HoleRadiusPercent = options.HoleRadiusPercent;
                v.InnerIndent = options.InnerIndent;
            });
        });    
    
        settings.BoundDataChanged = (s, e) => {
            MVCxChartControl chart = (MVCxChartControl)s;
            chart.Series[0].ShowInLegend = true;
            foreach (Series series in chart.Series) {
                series.Views().NestedDoughnutSeriesView(v => {
                    AgePopulation population = series.Points[0].Tag as AgePopulation;
                    if (population != null) {
                        string name = population.Name;
                        v.Group = name;
                        v.Titles.Clear();
                        v.Titles.Add(new SeriesTitle() { Text = name });
                    }
                });
            }
        };

        settings.Titles.Add(new ChartTitle() {
            Text = "Population: " + argumentDataMember + " Structure"
        });
        settings.Titles.Add(new ChartTitle() {
            Text = "Data estimate for mid-2016",
            Font = new Font("Tahoma", 12.0f),
        });
        settings.Titles.Add(new ChartTitle() {
            Text = "From www.cia.gov",
            Font = new Font("Tahoma", 8.0f),
            TextColor = Color.Gray,
            Dock = ChartTitleDockStyle.Bottom,
            Alignment = StringAlignment.Far
        });
    }).Bind(Model, options.ShowAgeStruct ? "CountryAgeKey" : "CountryGenderKey").GetHtml()
}
