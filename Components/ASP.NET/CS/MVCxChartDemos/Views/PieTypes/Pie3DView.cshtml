<script type="text/javascript">
    $(window).load(UpdateLabelOptionsDisabled);

    function SetLabelOptionsEnabled() {
        $("#valueAsPercent")[0].disabled = false;
    }
    function UpdateLabelOptionsDisabled() {
        $("#valueAsPercent")[0].disabled = !($("#showLabels")[0].checked);
    }
</script>

@using (Html.BeginForm()) {
    ChartPieDoughnutDemoOptions options = (ChartPieDoughnutDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionsDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 275px;"></div></td>
                <td></td>
                <td></td>
                <td></td>
                <td>
                    <div class="Spacer" style="width: 10px;"></div>
                </td>
                <td class="NoWrap"><label>Label Position:</label></td>
                <td><div class="Spacer" style="width: 7px;"></div></td>
                <td>
                    @Html.DropDownList("labelPosition", ChartDemoHelper.GetPieLabelPositions())
                </td>
            </tr>
            <tr>
                <td><div class="Spacer" style="width: 100%;height: 5px"></div></td>
            </tr>
            <tr>
                <td>
                    @Html.CheckBox("valueAsPercent", options.ValueAsPercent)
                </td>
                <td class="NoWrap" style="width: 120px;">
                    <label for="valueAsPercent" style="width:auto">Value As Percent</label>
                </td>
                <td>
                    <div class="Spacer" style="width: 10px;"></div>
                </td>
                <td class="NoWrap">
                    <label>Exploded Distance:</label>
                </td>
                <td>
                    <div class="Spacer" style="width: 10px;"></div>
                </td>
                <td>
                    @Html.DevExpress().SpinEdit(set => {
                        set.Name = "eplodeDistance";
                        set.Properties.MinValue = 10;
                        set.Properties.MaxValue = 100;
                        set.Width = 60;
                        set.Number = options.EplodeDistance;
                    }).GetHtml()
                </td>
                <td>
                    <div class="Spacer" style="width: 15px;"></div>
                </td>
                <td class="NoWrap">
                    <label>Exploded Points:</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td>
                    @Html.DropDownList("explodedPoints", ChartDemoHelper.GetPieExplodePoints(), new { style = "width:105px;" })
                </td>
                <td>
                    <div class="Spacer" style="width: 14px;"></div>
                </td>
                <td>
                    <input type="submit" value="Apply" onclick="UpdateLabelOptionsDisabled()" />
                </td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.Height = 500;
        settings.Width = 920;
    
        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.MaxHorizontalPercentage = 50;
            l.Border.Visibility = DefaultBoolean.False;
        });

        settings.Series.Add(s => {
            s.Name = "Counties";
            s.ArgumentDataMember = "Name";
            s.ValueDataMembers[0] = "Area";
            s.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            s.Views().Pie3DSeriesView(v => {
                v.ExplodedDistancePercentage = options.EplodeDistance;
                v.SeriesLabel(l => {
                    l.Position = options.LabelPosition;
                    l.TextPattern = options.ValueAsPercent ? "{A}: {VP:P0}" : "{A}: {V:G}";
                });
            });
        });    
    
        settings.BoundDataChanged = (s, e) => {
            MVCxChartControl chart = (MVCxChartControl)s;
            chart.Series[0].Views().Pie3DSeriesView(v => {
                if (options.ExplodePoint != null) {
                    SeriesPoint explodedPoint = null;
                    foreach (SeriesPoint point in chart.Series[0].Points) {
                        if (point.Argument == options.ExplodePoint) {
                            explodedPoint = point;
                            break;
                        }
                    }
                    if (explodedPoint != null)
                        v.ExplodedPoints.Add(explodedPoint);
                }
                else
                    v.ExplodeMode = options.ExplodeMode;
            });
        };
    
        settings.SimpleDiagram3D(d => {
            d.RotationType = RotationType.UseAngles;
            d.RotationOrder = RotationOrder.ZXY;
            d.RotationAngleX = -35;
            d.RotationAngleZ = 15;
        });
    
        settings.Titles.Add(new ChartTitle() {
            Font = new Font("Tahoma", 18),
            Text = "Area of Countries"
        });
        settings.Titles.Add(new ChartTitle() {
            Alignment = StringAlignment.Far,
            Dock = ChartTitleDockStyle.Bottom,
            Font = new Font("Tahoma", 8),
            TextColor = Color.Gray,
            Text = "From www.nationmaster.com"
        });
    }).Bind(Model).GetHtml()
}