@model IList
<script type="text/javascript">
    $(window).load(UpdateOptionsDisabled);

    function SetOptionsEnabled() {
        $("#labelKind")[0].disabled = false;
        $("#marker2KindString")[0].disabled = false;
        $("#marker2Size")[0].disabled = false;
        $("#markerKindString")[0].disabled = false;
        $("#markerSize")[0].disabled = false;
    }
    function UpdateOptionsDisabled() {
        $("#labelKind")[0].disabled = !($("#showLabels")[0].checked);
        $("#marker2KindString")[0].disabled = !($("#showMarker2")[0].checked);
        $("#marker2Size")[0].disabled = !($("#showMarker2")[0].checked);
        $("#markerKindString")[0].disabled = !($("#showMarkers")[0].checked);
        $("#markerSize")[0].disabled = !($("#showMarkers")[0].checked);
    }
    function UpdateLabelKindDisabled() {
        $("#labelKind")[0].disabled = !($("#showLabels")[0].checked);
    }
    function UpdateMarker2OptionsDisabled() {
        $("#marker2KindString")[0].disabled = !($("#showMarker2")[0].checked);
        $("#marker2Size")[0].disabled = !($("#showMarker2")[0].checked);
    }
    function UpdateMarker1OptionsDisabled() {
        $("#markerKindString")[0].disabled = !($("#showMarkers")[0].checked);
        $("#markerSize")[0].disabled = !($("#showMarkers")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartRangeDemoOptions options = (ChartRangeDemoOptions)ViewData[ChartDemoHelper.OptionsKey];

    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelKindDisabled()" })
                </td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td class="NoWrap">
                    @Html.CheckBox("showMarker2", options.ShowMarkers2, new { onclick = "UpdateMarker2OptionsDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showMarker2" style="width:auto">Show Value2 Marker</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Kind</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("marker2KindString", ChartDemoHelper.GetMarkerKinds(), new { style = "width:130px" })
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Size</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("marker2Size", ChartDemoHelper.GetMarkerSize("10"), new { style = "width:50px" })
                </td>
            </tr>
            <tr>
                <td><div class="Spacer" style="width: 100%;height: 5px"></div></td>
            </tr>
            <tr>
                <td class="NoWrap">
                    <label>Label Kind</label>
                </td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("labelKind", ChartDemoHelper.GetLabelKinds(), new { style = "width:120px" })
                </td>
                <td class="NoWrap">
                    @Html.CheckBox("showMarkers", options.ShowMarkers, new { onclick = "UpdateMarker1OptionsDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showMarkers" style="width:auto">Show Value1 Marker</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Kind</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("markerKindString", ChartDemoHelper.GetMarkerKinds(), new { style = "width:130px" })
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Size</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerSize", ChartDemoHelper.GetMarkerSize("10"), new { style = "width:50px" })
                </td>
                <td><div class="Spacer" style="width: 14px;"></div></td>
                <td><input style="float: right;" type="submit" value="Apply" onclick="SetOptionsEnabled()" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.Height = 500;
        settings.Width = 920;
        settings.CrosshairEnabled = DefaultBoolean.True;
        settings.ToolTipEnabled = DefaultBoolean.False;
        
        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Right;
            l.AlignmentVertical = LegendAlignmentVertical.Top;
            l.Direction = LegendDirection.LeftToRight;
        });    

        settings.Series.Add(s => {
            s.Name = SourceOfEnergy.EuropeBrent;
            s.ArgumentScaleType = ScaleType.DateTime;
            s.SetRangeDataMembers("Date", "Min", "Max");
            s.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            s.Views().RangeAreaSeriesView(v => {
                v.Transparency = 140;
                v.Border1.Color = System.Drawing.ColorTranslator.FromHtml("#1BAE49");
                v.Border1.Thickness = 2;
                v.Border2.Color = System.Drawing.ColorTranslator.FromHtml("#D80079");
                v.Border2.Thickness = 2;

                v.Marker1Visibility = options.ShowMarkers ? DefaultBoolean.True : DefaultBoolean.False;
                v.Marker1.Size = options.MarkerSize;
                v.Marker1.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.MarkerKindString);
                if (v.Marker1.Kind == MarkerKind.Star)
                    v.Marker1.StarPointCount = options.StarPointCount;

                v.Marker2Visibility = options.ShowMarkers2 ? DefaultBoolean.True : DefaultBoolean.False;
                v.Marker2.Size = options.Marker2Size;
                v.Marker2.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.Marker2KindString);
                if (v.Marker2.Kind == MarkerKind.Star)
                    v.Marker2.StarPointCount = options.StarPoint2Count;
                
                v.SeriesLabel(l => {
                    l.Kind = options.LabelKind;
                });
            });
        });

        settings.XYDiagram(d => {
            d.AxisY.Title.Text = "$ per barrel";
            d.AxisY.Title.Visibility = DefaultBoolean.True;
            d.AxisY.GridLines.MinorVisible = true;
            d.AxisX.DateTimeScaleOptions.MeasureUnit = DateTimeMeasureUnit.Month;
            d.AxisX.DateTimeScaleOptions.GridAlignment = DateTimeGridAlignment.Month;
            d.AxisX.DateTimeScaleOptions.AutoGrid = true;
            d.AxisX.WholeRange.AutoSideMargins = false;
            d.AxisX.Label.TextPattern = "{A:MMMM}";
            d.AxisY.WholeRange.AlwaysShowZeroLevel = false;
            d.AxisY.WholeRange.AutoSideMargins = true;
            d.AxisY.Interlaced = true;
            d.AxisY.Label.TextPattern = "{V:N0}";
        });

        settings.Titles.Add(new ChartTitle() {
            Text = "Crude Oil Prices in 2015"
        });
        settings.Titles.Add(new ChartTitle() {
            Alignment = StringAlignment.Far,
            Dock = ChartTitleDockStyle.Bottom,
            Font = new Font("Tahoma", 8),
            TextColor = Color.Gray,
            Text = "From www.eia.gov"
        });
    }).Bind(Model).GetHtml()
}
