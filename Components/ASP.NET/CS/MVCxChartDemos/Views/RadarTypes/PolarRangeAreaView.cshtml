@model IList
<script type="text/javascript">
    $(window).load(UpdateOptionsDisabled);

    function SetOptionsEnabled() {
        $("#labelKind")[0].disabled = false;
        $("#marker2KindString")[0].disabled = false;
        $("#marker2Size")[0].disabled = false;
        $("#markerKindString")[0].disabled = false;
        $("#markerSize")[0].disabled = false;
    }
    function UpdateOptionsDisabled() {
        $("#labelKind")[0].disabled = !($("#showLabels")[0].checked);
        $("#marker2KindString")[0].disabled = !($("#showMarkers2")[0].checked);
        $("#marker2Size")[0].disabled = !($("#showMarkers2")[0].checked);
        $("#markerKindString")[0].disabled = !($("#showMarkers")[0].checked);
        $("#markerSize")[0].disabled = !($("#showMarkers")[0].checked);
    }
    function UpdateLabelKindDisabled() {
        $("#labelKind")[0].disabled = !($("#showLabels")[0].checked);
    }
    function UpdateMarker2OptionsDisabled() {
        $("#marker2KindString")[0].disabled = !($("#showMarkers2")[0].checked);
        $("#marker2Size")[0].disabled = !($("#showMarkers2")[0].checked);
    }
    function UpdateMarker1OptionsDisabled() {
        $("#markerKindString")[0].disabled = !($("#showMarkers")[0].checked);
        $("#markerSize")[0].disabled = !($("#showMarkers")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartRadarRangeDemoOptions options = (ChartRadarRangeDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelKindDisabled()" })
                </td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 15px;"></div></td>
                <td class="NoWrap">
                    @Html.CheckBox("showMarkers2", options.ShowMarkers2, new { onclick = "UpdateMarker2OptionsDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showMarkers2" style="width:auto">Show Value2 Marker</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Kind</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("marker2KindString", ChartDemoHelper.GetMarkerKinds(), new { style = "width:130px" })
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Size</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("marker2Size", ChartDemoHelper.GetMarkerSize("8"), new { style = "width:50px" })
                </td>
                <td><div class="Spacer" style="width: 17px;"></div></td>
                <td class="NoWrap"><label for="diagramStyle">Diagram Type:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("diagramStyle", ChartDemoHelper.GetRadarDiagramTypes(), new { style = "width:100px;" })
                </td>
            </tr>
            <tr>
                <td><div class="Spacer" style="width: 100%;height: 5px"></div></td>
            </tr>
            <tr>
                <td class="NoWrap">
                    <label>Label Kind</label>
                </td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("labelKind", ChartDemoHelper.GetLabelKinds(), new { style = "width:120px" })
                </td>
                <td><div class="Spacer" style="width: 15px;"></div></td>
                <td class="NoWrap">
                    @Html.CheckBox("showMarkers", options.ShowMarkers, new { onclick = "UpdateMarker1OptionsDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showMarkers" style="width:auto">Show Value1 Marker</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Kind</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("markerKindString", ChartDemoHelper.GetMarkerKinds(), new { style = "width:130px" })
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Size</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("markerSize", ChartDemoHelper.GetMarkerSize("8"), new { style = "width:50px" })
                </td>
                <td><div class="Spacer" style="width: 17px;"></div></td>
                <td class="NoWrap"><label for="polarFunction">Function Type:</label></td>
                <td><div class="Spacer" style="width: 7px;"></div></td>
                <td>
                    @Html.DropDownList("polarFunction", ChartDemoHelper.GetPolarFunctionsForRadarCharts(), new { style = "width:100px" })
                </td>
                <td><input style="float: right;" type="submit" value="Apply" onclick="SetOptionsEnabled()" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.Height = 500;
        settings.Width = 920;
    
        settings.Legends.Default(l => {
            l.Visibility = DefaultBoolean.False;
        });

        settings.Series.Add(s => {
            s.Name = options.PolarFunction.ToString();
            s.ArgumentScaleType = ScaleType.Numerical;
            s.SetRangeDataMembers("Argument", "Value1", "Value2");
            s.ToolTipEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;
            s.ToolTipPointPattern = "{A}: {V1:G2} - {V2:G2}";
            s.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            s.Views().PolarRangeAreaSeriesView(v => {
                v.Transparency = 140;
                v.Marker1Visibility = options.ShowMarkers ? DefaultBoolean.True : DefaultBoolean.False;
                v.Marker1.Size = options.MarkerSize;
                v.Marker1.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.MarkerKindString);
                if (v.Marker1.Kind == MarkerKind.Star)
                    v.Marker1.StarPointCount = options.StarPointCount;
                v.Marker2Visibility = options.ShowMarkers2 ? DefaultBoolean.True : DefaultBoolean.False;
                v.Marker2.Size = options.Marker2Size;
                v.Marker2.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.Marker2KindString);
                if (v.Marker2.Kind == MarkerKind.Star)
                    v.Marker2.StarPointCount = options.StarPoint2Count;                
                v.SeriesLabel(l => {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.HideOverlapped;
                    l.Kind = options.LabelKind;
                    l.TextPattern = options.LabelKind == RangeAreaLabelKind.OneLabel ? "{VD:G2}" : "{V:G2}";
                });
            });
        });

        settings.PolarDiagram(d => {
            d.DrawingStyle = options.DiagramStyle;
        });
    }).Bind(Model).GetHtml()
}
