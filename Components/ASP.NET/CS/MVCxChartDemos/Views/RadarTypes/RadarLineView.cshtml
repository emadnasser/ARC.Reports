@model IList
<script type="text/javascript">
    $(window).load(UpdateMarkersDisabled);

    function SetShowMarkersEnabled() {
        $("#showMarkers")[0].disabled = false;
    }
    function UpdateMarkersDisabled() {
        $("#markerKindString")[0].disabled = !($("#showMarkers")[0].checked);
        $("#markerSize")[0].disabled = !($("#showMarkers")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartRadarDemoOptions options = (ChartRadarDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels)
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label for="markerKindString">Marker Kind:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerKindString", ChartDemoHelper.GetMarkerKinds(), new { style = "width:130px" })
                </td>
                <td class="NoWrap"><label for="diagramStyle">Diagram Type:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("diagramStyle", ChartDemoHelper.GetRadarDiagramTypes(), new { style = "width:100px;" })
                </td>
            </tr>
            <tr>
                <td><div class="Spacer" style="width: 100%; height: 5px;"></div></td>
            </tr>
            <tr>
                <td>
                    @Html.CheckBox("showMarkers", options.ShowMarkers, new { onclick = "UpdateMarkersDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showMarkers" style="width:auto">Show Markers</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label for="markerSize">Marker Size:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerSize", ChartDemoHelper.GetMarkerSize("8"), new { style = "width:130px;" })
                </td>
                <td class="NoWrap"><label>Text Directions:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("textDirection", ChartDemoHelper.GetTextDirections(), new { style = "width:100px" })
                </td>
                <td><div class="Spacer" style="width: 14px;"></div></td>
                <td><input style="float: right;" type="submit" value="Apply" onclick="SetShowMarkersEnabled()" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.Height = 500;
        settings.Width = 920;
        settings.ToolTipEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.Border.Visibility = DefaultBoolean.False;
            l.HorizontalIndent = 12;
        });
    
        settings.Series.Template(t => {
            t.ArgumentScaleType = ScaleType.DateTime;
            t.ArgumentDataMember = "Date";
            t.ValueDataMembers[0] = "Temperature";
            t.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            t.Views().RadarLineSeriesView(v => {
                v.MarkerVisibility = options.ShowMarkers ? DefaultBoolean.True : DefaultBoolean.False;
                v.PointMarkerOptions.Size = options.MarkerSize;
                v.PointMarkerOptions.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.MarkerKindString);
                if (v.PointMarkerOptions.Kind == MarkerKind.Star)
                    v.PointMarkerOptions.StarPointCount = options.StarPointCount;
            });
        });    
    
        settings.RadarDiagram(d => {
            d.AxisX.DateTimeScaleOptions.MeasureUnit = DateTimeMeasureUnit.Month;
            d.AxisX.DateTimeScaleOptions.GridAlignment = DateTimeGridAlignment.Month;
            d.AxisX.Label.TextPattern = "{A:MMMM}";
            d.AxisX.Label.TextDirection = options.TextDirection;
            d.DrawingStyle = options.DiagramStyle;
        });
    
        settings.Titles.Add(new ChartTitle() {
            Font = new Font("Tahoma", 18),
            Text = "Average temperature in London"
        });
        settings.Titles.Add(new ChartTitle() {
            Alignment = StringAlignment.Far,
            Dock = ChartTitleDockStyle.Bottom,
            Font = new Font("Tahoma", 8),
            TextColor = Color.Gray,
            Text = "From www.weather.com"
        });
    }).Bind(Model, "DayPart").GetHtml()
}
