@model IList
<script type="text/javascript">
    $(window).load(UpdateMarkersDisabled);

    function SetLabelPositionEnabled() {
        $("#showLabels")[0].disabled = false;
        $("#showMarkers")[0].disabled = false;
    }
    function UpdateMarkersDisabled() {
        $("#markerKindString")[0].disabled = !($("#showMarkers")[0].checked);
        $("#markerSize")[0].disabled = !($("#showMarkers")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartScatterDemoOptions options = (ChartScatterDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels)
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Marker Kind</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerKindString", ChartDemoHelper.GetMarkerKinds(), new { style = "width:130px" })
                </td>
                <td class="NoWrap"><label>Function Type</label></td>
                <td style="width: 6px"><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("function", ChartDemoHelper.GetScatterFunctions(), new { style = "width:140px" })
                </td>
            </tr>
            <tr>
                <td><div class="Spacer" style="width: 100%; height: 5px;"></div></td>
            </tr>
            <tr>
                <td>
                    @Html.CheckBox("showMarkers", options.ShowMarkers, new { onclick = "UpdateMarkersDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showMarkers" style="width:auto">Show Markers</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Marker Size</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerSize", ChartDemoHelper.GetMarkerSize("8"), new { style = "width:130px" })
                </td>
                <td><input type="submit" value="Apply" onclick="SetLabelPositionEnabled()" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Height = 500;
        settings.Width = 920;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = DefaultBoolean.False;
        settings.ToolTipEnabled = DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.Visibility = DefaultBoolean.False;
        });
    
        settings.Series.Add(s => {
            s.Name = "Archimedean Spiral";
            s.ArgumentScaleType = ScaleType.Numerical;
            s.ArgumentDataMember = "X";
            s.ValueDataMembers[0] = "Y";
            s.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            s.Views().ScatterLineSeriesView(v => {
                v.MarkerVisibility = options.ShowMarkers ? DefaultBoolean.True : DefaultBoolean.False;
                v.PointMarkerOptions.Size = options.MarkerSize;
                if (options.ShowMarkers) {
                    v.PointMarkerOptions.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.MarkerKindString);
                    if (v.PointMarkerOptions.Kind == MarkerKind.Star) {
                        v.PointMarkerOptions.StarPointCount = options.StarPointCount;
                    }
                }
                v.SeriesLabel(l => {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.HideOverlapped;
                    l.TextPattern = "{V:F1}";
                });
            });
        });

        settings.XYDiagram(d => {
            d.AxisX.GridLines.Visible = true;
            d.AxisX.Alignment = AxisAlignment.Zero;
            d.AxisX.Tickmarks.CrossAxis = true;
            d.AxisY.Interlaced = true;
            d.AxisY.Alignment = AxisAlignment.Zero;
            d.AxisY.Tickmarks.CrossAxis = true;
        });

        settings.Titles.Add(new ChartTitle() {
            Font = new Font("Tahoma", 18),
            Text = "Function in Cartesian Coordinates"
        });
    }).Bind(Model).GetHtml()
}
