@model IList
<script type="text/javascript">
    $(window).load(UpdateLabelOptionDisabled);

    function UpdateLabelOptionDisabled() {
        var optionsDisabled = !($("#showLabels")[0].checked);
        var labelPositionComboBox = $("#labelPosition")[0];
        $("#labelAngle")[0].disabled = optionsDisabled || labelPositionComboBox.value == "Center";
        labelPositionComboBox.disabled = optionsDisabled;
    }
</script>
@using (Html.BeginForm()) {
    ChartMarkerDemoOptions options = (ChartMarkerDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label for="labelAngle">Label Angle:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("labelAngle", ChartDemoHelper.GetLabelAngle("45"), new { style = "width: 80px;" })
                </td>
                <td><div class="Spacer" style="width: 15px;"></div></td>
                <td class="NoWrap"><label for="markerKindString">Marker Kind:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerKindString", ChartDemoHelper.GetMarkerKinds(), new { style = "width:130px" })
                </td>
                <td class="NoWrap"></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td></td>
            </tr>
            <tr>
                <td><div class="Spacer" style="width: 100%; height: 5px;"></div></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label for="labelPosition">Label Position:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("labelPosition", ChartDemoHelper.GetPointLabelPositions(true), new { style = "width: 80px;", onchange = "UpdateLabelOptionDisabled()" })
                </td>
                <td><div class="Spacer" style="width: 15px;"></div></td>
                <td class="NoWrap"><label for="markerSize">Marker Size:</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td style="width: 100%;">
                    @Html.DropDownList("markerSize", ChartDemoHelper.GetMarkerSize("8"), new { style = "width:130px;" })
                </td>
                <td class="NoWrap"></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td></td>
                <td><div class="Spacer" style="width: 14px;"></div></td>
                <td><input style="float: right;" type="submit" value="Apply" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Height = 500;
        settings.Width = 920;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Right;
        });

        settings.Series.Template(t => {
            t.ArgumentDataMember = "X";
            t.ValueDataMembers[0] = "Y";
            t.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            t.Views().PointSeriesView(v => {
                v.PointMarkerOptions.Size = 20;
                v.PointMarkerOptions.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.MarkerKindString);
                v.PointMarkerOptions.Size = options.MarkerSize;
                if (v.PointMarkerOptions.Kind == MarkerKind.Star)
                    v.PointMarkerOptions.StarPointCount = options.StarPointCount;
                v.SeriesLabel(l => {
                    l.Angle = options.LabelAngle;
                    l.Position = options.LabelPosition;
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                });
            });
        });

        settings.XYDiagram(d => {
            d.AxisY.Interlaced = true;
        });

        settings.Titles.Add(new ChartTitle() {
            Font = new Font("Tahoma", 18),
            Text = "Random Points Generator"
        });
    }).Bind(Model, "Z").GetHtml()
}