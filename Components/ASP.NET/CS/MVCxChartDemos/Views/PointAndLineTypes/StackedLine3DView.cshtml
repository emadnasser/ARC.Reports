@model IList

@using (Html.BeginForm()) {
    Chart3DDemoOptions options = (Chart3DDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels)
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 400px;"></div></td>
                <td class="NoWrap"><label for="perspectiveAngle">Perspective Angle</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("perspectiveAngle", ChartDemoHelper.GetPerspectiveAngle())
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label for="zoomPercent">Zoom Percent</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("zoomPercent", ChartDemoHelper.GetZoomPercent())
                </td>
                <td><div class="Spacer" style="width:9px;"></div></td>
                <td><input style="float: right;" type="submit" value="Apply" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Height = 500;
        settings.Width = 920;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.Border.Visibility = DefaultBoolean.False;
            l.HorizontalIndent = 12;
        });
    
        settings.Series.Template(t => {
            t.ArgumentDataMember = "Year";
            t.ValueDataMembers[0] = "Sales";
            t.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            t.Views().StackedLine3DSeriesView(v => {
                v.LineWidth = 1.2;
                v.SeriesLabel(l => {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                });
            });
        });
    
        settings.XYDiagram3D(d => {
            d.AxisY.Interlaced = true;
            d.AxisY.Label.TextPattern = "${V:0,,.0}M";
            d.AxisX.NumericScaleOptions.AutoGrid = false;
            d.AxisX.NumericScaleOptions.GridSpacing = 2;
            d.RotationType = RotationType.UseAngles;
            d.RotationOrder = RotationOrder.XYZ;
            d.VerticalScrollPercent = 4;
            d.PerspectiveAngle = options.PerspectiveAngle;
            d.ZoomPercent = options.ZoomPercent;
        });
    
        settings.Titles.Add(new ChartTitle() {
            Text = "DevAV Sales"
        });
    }).Bind(Model, "Region").GetHtml()
}
