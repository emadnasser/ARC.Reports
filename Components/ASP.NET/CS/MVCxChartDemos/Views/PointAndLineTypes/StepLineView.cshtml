@model IList
<script type="text/javascript">
    $(window).load(UpdateLabelOptionsDisabled);

    function SetLabelPositionEnabled() {
        $("#labelAngle")[0].disabled = false;
    }
    function UpdateLabelOptionsDisabled() {
        $("#labelAngle")[0].disabled = !($("#showLabels")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartStepLineDemoOptions options = (ChartStepLineDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionsDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.CheckBox("inverted", options.Inverted)
                </td>
                <td class="NoWrap">
                    <label class="checkBox" for="inverted">Inverted</label>
                </td>
                <td><div class="Spacer" style="width: 182px;"></div></td>
                <td class="NoWrap"><label>Label Angle</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("labelAngle", ChartDemoHelper.GetLabelAngle("45"), new { style = "width:50px" })
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label for="markerKindString">Marker Kind</label></td>
                <td><div class="Spacer" style="width: 6px;"></div></td>
                <td>
                    @Html.DropDownList("markerKindString", ChartDemoHelper.GetMarkerKindsForStepLine())
                </td>
                <td><div class="Spacer" style="width: 9px;"></div></td>
                <td class="NoWrap"><label for="markerSize">Marker Size</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("markerSize", ChartDemoHelper.GetMarkerSize("20"))
                </td>
                <td><div class="Spacer" style="width:10px;"></div></td>
                <td><input style="float: right;" type="submit" value="Apply" onclick="SetLabelPositionEnabled()" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Height = 500;
        settings.Width = 920;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.Visibility = DefaultBoolean.False;
        });

        settings.Series.Add(s => {
            s.Name = "Fuel Oil Price";
            s.ArgumentDataMember = "Date";
            s.ValueDataMembers[0] = "Price";
            s.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            s.CrosshairLabelPattern = "{A:d}: {V:0.00}";
            s.Views().StepLineSeriesView(v => {
                v.ColorEach = true;
                v.InvertedStep = options.Inverted;
                v.PointMarkerOptions.Size = options.MarkerSize;
                v.PointMarkerOptions.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.MarkerKindString);
                if (v.PointMarkerOptions.Kind == MarkerKind.Star) 
                    v.PointMarkerOptions.StarPointCount = options.StarPointCount;
                v.SeriesLabel(l => {
                    l.Angle = options.LabelAngle;
                });
            });
        });    
    
        settings.XYDiagram(d => {
            d.AxisY.Interlaced = true;
            d.AxisY.MinorCount = 4;
            d.AxisY.Title.Text = "Euros Per Liter";
            d.AxisY.Title.Visibility = DefaultBoolean.True;
            d.AxisY.WholeRange.AlwaysShowZeroLevel = false;
            d.AxisX.WholeRange.SideMarginsValue = 5;
            d.AxisX.GridLines.Visible = true;
            d.AxisX.Label.TextPattern = "{A:y}";
        });

        settings.Titles.Add(new ChartTitle() {
            Text = "Fuel Prices "
        });
    }).Bind(Model).GetHtml()
}
