@model IList
<script type="text/javascript">
    $(window).load(UpdateLabelOptionsDisabled);

    function SetLabelAngleEnabled() {
        $("#labelAngle")[0].disabled = false;
    }
    function UpdateLabelOptionsDisabled() {
        $("#labelAngle")[0].disabled = !($("#showLabels")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartSplineDemoOptions options = (ChartSplineDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table>
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionsDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 96px;"></div></td>
                <td class="NoWrap"><label>Line Tension Percent</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("tension", ChartDemoHelper.GetLineTensions(), new { style = "width:50px" })
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Label Angle</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("labelAngle", ChartDemoHelper.GetLabelAngle("45"), new { style = "width:50px" })
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Marker Kind</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("markerKindString", ChartDemoHelper.GetMarkerKinds(), new { style = "width:130px" })
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label>Marker Size</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("markerSize", ChartDemoHelper.GetMarkerSize("10"))
                </td>
                <td><div class="Spacer" style="width: 15px;"></div></td>
                <td><input type="submit" value="Apply" onclick="SetLabelAngleEnabled()" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Height = 500;
        settings.Width = 920;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.Border.Visibility = DefaultBoolean.False;
            l.HorizontalIndent = 12;
        });
    
        settings.Series.Template(t => {
            t.ArgumentDataMember = "Time";
            t.ValueDataMembers[0] = "Power";
            t.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            t.Views().SplineSeriesView(v => {
                v.PointMarkerOptions.Size = options.MarkerSize;
                v.LineTensionPercent = options.Tension;
                v.PointMarkerOptions.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.MarkerKindString);
                if (v.PointMarkerOptions.Kind == MarkerKind.Star)
                    v.PointMarkerOptions.StarPointCount = options.StarPointCount;
                v.SeriesLabel(l => {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                    l.Angle = options.LabelAngle;
                });
            });
        });
    
        settings.XYDiagram(d => {
            d.AxisY.Interlaced = true;
            d.AxisY.Title.Text = "Market value (billion US$)";
            d.AxisY.Title.Visibility = DefaultBoolean.True;
            d.AxisX.DateTimeScaleOptions.ScaleMode = ScaleMode.Continuous;
        });

        settings.Titles.Add(new ChartTitle() {
            Text = "Power Consumption per Working Day"
        });
}).Bind(Model, "Branch").GetHtml()
}
