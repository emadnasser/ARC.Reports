@model IList
<script type="text/javascript">
    $(window).load(UpdateLabelOptionsDisabled);

    function SetLabelPositionEnabled() {
        $("#valueAsPercent")[0].disabled = false;
    }
    function UpdateLabelOptionsDisabled() {
        $("#valueAsPercent")[0].disabled = !($("#showLabels")[0].checked);
    }
</script>
@using (Html.BeginForm()) {
    ChartBarFullStacked3DDemoOptions options = (ChartBarFullStacked3DDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels, new { onclick = "UpdateLabelOptionsDisabled()" })
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td>
                    @Html.CheckBox("valueAsPercent", options.ShowLabels)
                </td>
                <td class="NoWrap">
                    <label for="valueAsPercent" style="width:auto">Value As Percent</label>
                </td>
                <td><div class="Spacer" style="width: 296px;"></div></td>
                <td class="NoWrap"><label for="perspectiveAngle">Perspective Angle</label></td>
                <td><div class="Spacer" style="width: 6px;"></div></td>
                <td>
                    @Html.DropDownList("perspectiveAngle", ChartDemoHelper.GetPerspectiveAngle())
                </td>
                <td><div class="Spacer" style="width: 11px;"></div></td>
                <td class="NoWrap"><label for="zoomPercent">Zoom Percent</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("zoomPercent", ChartDemoHelper.GetZoomPercent())
                </td>
                <td><div class="Spacer" style="width:10px;"></div></td>
                <td><input style="float: right;" type="submit" value="Apply" onclick="SetLabelPositionEnabled()" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.Height = 500;
        settings.Width = 920;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.Border.Visibility = DefaultBoolean.False;
            l.HorizontalIndent = 12;
        });
    
        settings.Series.Template(t => {
            t.ArgumentDataMember = "Year";
            t.ValueDataMembers[0] = "Sales"; 
            t.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            t.Views().FullStackedLine3DSeriesView(v => {
                v.SeriesLabel(l => {
                    l.TextPattern = options.ValueAsPercent ? "{VP:P0}" : "{V}";
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                });
            });
        });
    
        settings.XYDiagram3D(d => {
            d.RotationType = RotationType.UseAngles;
            d.RotationOrder = RotationOrder.XYZ;
            d.RotationAngleY = -20;
            d.VerticalScrollPercent = 4;
            d.PerspectiveAngle = options.PerspectiveAngle;
            d.ZoomPercent = options.ZoomPercent;
            d.AxisX.WholeRange.SideMarginsValue = 0;
            d.AxisY.Label.TextPattern = "{V:P0}";
            d.AxisY.WholeRange.AlwaysShowZeroLevel = false;
            d.AxisY.WholeRange.AutoSideMargins = false;
            d.AxisY.WholeRange.SideMarginsValue = 0;
          });

        settings.Titles.Add(new ChartTitle() {
            Text = "Market Share Over Time"
        });
}).Bind(Model, "Company").GetHtml()
}