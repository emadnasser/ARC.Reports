@model IList

@using (Html.BeginForm()) {
    ChartMarkerDemoOptions options = (ChartMarkerDemoOptions)ViewData[ChartDemoHelper.OptionsKey];
    
    <div class="chartOptionsPanel" style="height:auto; font-size:12px;">
        <table style="width: 100%;">
            <tr>
                <td>
                    @Html.CheckBox("showLabels", options.ShowLabels)
                </td>
                <td class="NoWrap">
                    <label for="showLabels" style="width:auto">Show Labels</label>
                </td>
                <td><div class="Spacer" style="width: 400px;"></div></td>
                <td class="NoWrap"><label for="markerKindString">Marker Kind</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("markerKindString", ChartDemoHelper.GetMarkerKinds())
                </td>
                <td><div class="Spacer" style="width: 10px;"></div></td>
                <td class="NoWrap"><label for="markerSize">Marker Size</label></td>
                <td><div class="Spacer" style="width: 5px;"></div></td>
                <td>
                    @Html.DropDownList("markerSize", ChartDemoHelper.GetMarkerSize("10"))
                </td>
                <td><div class="Spacer" style="width:13px;"></div></td>
                <td><input style="float: right;" type="submit" value="Apply" /></td>
            </tr>
        </table>
    </div>

    @Html.DevExpress().Chart(settings => {
        settings.Name = "chart";
        settings.Height = 500;
        settings.Width = 920;
        settings.BorderOptions.Visibility = DefaultBoolean.False;
        settings.CrosshairEnabled = options.ShowLabels ? DefaultBoolean.False : DefaultBoolean.True;

        settings.Legends.Default(l => {
            l.AlignmentHorizontal = LegendAlignmentHorizontal.Center;
            l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
            l.Direction = LegendDirection.LeftToRight;
            l.Border.Visibility = DefaultBoolean.False;
            l.HorizontalIndent = 12;
        });

        settings.Series.Template(t => {
            t.ArgumentDataMember = "Year";
            t.ValueDataMembers[0] = "Sales";
            t.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
            t.Views().StackedLineSeriesView(v => {
                v.PointMarkerOptions.Size = options.MarkerSize;
                v.PointMarkerOptions.Kind = (MarkerKind)Enum.Parse(typeof(MarkerKind), options.MarkerKindString);
                if (v.PointMarkerOptions.Kind == MarkerKind.Star)
                    v.PointMarkerOptions.StarPointCount = options.StarPointCount;
                v.SeriesLabel(l => {
                    l.ResolveOverlappingMode = ResolveOverlappingMode.Default;
                    l.TextPattern = "{V:0,,.0}";
                });
            });
        });

        settings.XYDiagram(d => {
            d.AxisY.Interlaced = true;
            d.AxisY.Title.Text = "Years";
            d.AxisY.Label.TextPattern = "{V:0,,.0}";
            d.AxisY.Title.Visibility = DefaultBoolean.True;
            d.AxisY.Title.Text = "Millions of Dollars";
        });
    
        settings.Titles.Add(new ChartTitle() {
            Text = "DevAV Sales"
        });
    }).Bind(Model, "Region").GetHtml()
}
