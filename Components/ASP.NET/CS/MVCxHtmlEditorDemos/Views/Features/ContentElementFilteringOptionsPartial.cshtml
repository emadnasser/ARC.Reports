@model HtmlEditorContentElementFilteringOptions

@Html.DevExpress().FormLayout(settings => {
    settings.Name = "demoOptions";
    settings.ShowItemCaptionColon = false;
    settings.RequiredMarkDisplayMode = RequiredMarkMode.None;
    settings.ColCount = 4;
    settings.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Left;
    
    settings.Items.AddGroupItem(g => {
        g.Caption = "Tag Filter Settings";
        g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;

        g.Items.Add(m => m.Tags.FilterMode, i => i.CaptionSettings.Location = LayoutItemCaptionLocation.Top);
        g.Items.Add(i => {
            i.Caption = "Tags";
            i.CaptionSettings.Location = LayoutItemCaptionLocation.Top;
            i.NestedExtension().TokenBox(s => {
                s.Name = "tagTokenBox";
                s.Properties.DataSource = Model.Tags.List;
                s.PreRender = (c, e) => {
                    ASPxTokenBox tokenBox = (c as ASPxTokenBox);
                    tokenBox.Tokens.AddRange(Model.Tags.FilteringList);
                };
            });
        });
    });
    
    settings.Items.AddGroupItem(g => {
        g.Caption = "Attribute Filter Settings";
        g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;

        g.Items.Add(m => m.Attributes.FilterMode, i => i.CaptionSettings.Location = LayoutItemCaptionLocation.Top);
        g.Items.Add(i => {
            i.Caption = "Attributes";
            i.CaptionSettings.Location = LayoutItemCaptionLocation.Top;
            i.NestedExtension().TokenBox(s => {
                s.Name = "attributeTokenBox";
                s.Properties.DataSource = Model.Attributes.List;
                s.PreRender = (c, e) => {
                    ASPxTokenBox tokenBox = (c as ASPxTokenBox);
                    tokenBox.Tokens.AddRange(Model.Attributes.FilteringList);
                };
            });
        });
    });

    settings.Items.AddGroupItem(g => {
        g.Caption = "Style Attribute Filter Settings";
        g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;

        g.Items.Add(m => m.StyleAttributes.FilterMode, i => i.CaptionSettings.Location = LayoutItemCaptionLocation.Top);
        g.Items.Add(i => {
            i.Caption = "StyleAttributes";
            i.CaptionSettings.Location = LayoutItemCaptionLocation.Top;
            i.NestedExtension().TokenBox(s => {
                s.Name = "styleAttributeTokenBox";
                s.Properties.DataSource = Model.StyleAttributes.List;
                s.PreRender = (c, e) => {
                    ASPxTokenBox tokenBox = (c as ASPxTokenBox);
                    tokenBox.Tokens.AddRange(Model.StyleAttributes.FilteringList);
                };
            });
        });
    });

    settings.Items.AddGroupItem(g => {
        g.ShowCaption = DefaultBoolean.False;
        g.GroupBoxDecoration = GroupBoxDecoration.None;

        g.Items.Add(i => {
            i.ShowCaption = DefaultBoolean.False;
            i.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
            i.ParentContainerStyle.Paddings.PaddingLeft = Unit.Pixel(18);
            i.ParentContainerStyle.Paddings.PaddingTop = Unit.Pixel(14);
            i.VerticalAlign = FormLayoutVerticalAlign.Top;
            i.NestedExtension().Button(s => {
                s.Name = "applySettings";
                s.Text = "Apply Settings";
                s.UseSubmitBehavior = true;
                s.Width = Unit.Pixel(140);
            });
        });

        g.Items.Add(i => {
            i.ShowCaption = DefaultBoolean.False;
            i.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
            i.ParentContainerStyle.Paddings.PaddingLeft = Unit.Pixel(18);
            i.ParentContainerStyle.Paddings.PaddingTop = Unit.Pixel(12);
            i.VerticalAlign = FormLayoutVerticalAlign.Top;
            i.NestedExtension().Button(s => {
                s.Name = "resetHtmlDocument";
                s.Text = "Reset Html Document";
                s.Width = Unit.Pixel(140);
                s.ClientSideEvents.Click = "onResetHtmlDocumentButtonClick";
            });
        });
    });
}).Bind(Model).GetHtml()