@model FileManagerFeaturesDemoOptions
<script type="text/javascript">
    function OnInit(s,e) {
        UpdateEditingSettingsAvailability();
    }
    function OnCheckedChanged(s,e) {
        UpdateEditingSettingsAvailability();
    }
    function UpdateEditingSettingsAvailability() {
        var isChecked = GetControlByName('SettingsFolders.Visible').GetChecked();
        GetControlByName('SettingsEditing.AllowMove').SetEnabled(isChecked);
        GetControlByName('SettingsEditing.AllowCreate').SetEnabled(isChecked);
        GetControlByName('SettingsEditing.AllowCopy').SetEnabled(isChecked);
    }
    function GetControlByName(name) {
        return ASPxClientControl.GetControlCollection().GetByName(name);
    }
</script>
@Html.DevExpress().FormLayout(settings => {
    settings.Name = "FormLayoutSettings";
    settings.ColCount = 5;
    settings.ShowItemCaptionColon = false;
    settings.RequiredMarkDisplayMode = RequiredMarkMode.None;
    settings.Items.AddGroupItem(m => m.SettingsEditing, g => {
        g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        g.RowSpan = 2;
        g.SettingsItems.ShowCaption = DefaultBoolean.False;
        g.Items.Add(m => m.SettingsEditing.AllowMove, i => { i.NestedExtension().CheckBox(c => { c.Text = "AllowMove"; });});
        g.Items.Add(m => m.SettingsEditing.AllowDelete, i => { i.NestedExtension().CheckBox(c => { c.Text = "AllowDelete"; });});
        g.Items.Add(m => m.SettingsEditing.AllowRename, i => { i.NestedExtension().CheckBox(c => { c.Text = "AllowRename"; });});
        g.Items.Add(m => m.SettingsEditing.AllowCreate, i => { i.NestedExtension().CheckBox(c => { c.Text = "AllowCreate"; });});
        g.Items.Add(m => m.SettingsEditing.AllowCopy, i => { i.NestedExtension().CheckBox(c => { c.Text = "AllowCopy"; });});
        g.Items.Add(m => m.SettingsEditing.AllowDownload, i => { i.NestedExtension().CheckBox(c => { c.Text = "AllowDownload"; });});
    });
    settings.Items.AddGroupItem(m => m.SettingsToolbar, g => {
        g.SettingsItems.ShowCaption = DefaultBoolean.False;
        g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        g.Items.Add(m => m.SettingsToolbar.ShowPath, i => { i.NestedExtension().CheckBox(c => { c.Text = "ShowPath"; });});
        g.Items.Add(m => m.SettingsToolbar.ShowFilterBox, i => { i.NestedExtension().CheckBox(c => { c.Text = "ShowFilterBox"; });});
    });
    settings.Items.AddGroupItem(m => m.SettingsFolders, g => {
        g.SettingsItems.ShowCaption = DefaultBoolean.False;
        g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        g.RowSpan = 2;
        g.Items.Add(m => m.SettingsFolders.Visible, i => {
            i.NestedExtension().CheckBox(s => {
                s.Properties.ClientSideEvents.Init = "OnInit";
                s.Properties.ClientSideEvents.CheckedChanged = "OnCheckedChanged";
                s.Text = "Visible";
            });
            i.ShowCaption = DefaultBoolean.False;
        });
        g.Items.Add(m => m.SettingsFolders.EnableCallBacks, i => { i.NestedExtension().CheckBox(c => { c.Text = "EnableCallBacks"; });});
        g.Items.Add(m => m.SettingsFolders.ShowFolderIcons, i => { i.NestedExtension().CheckBox(c => { c.Text = "ShowFolderIcons"; });});
        g.Items.Add(m => m.SettingsFolders.ShowLockedFolderIcons, i => { i.NestedExtension().CheckBox(c => { c.Text = "ShowLockedFolderIcons"; });});
    });
    settings.Items.AddGroupItem(m => m.SettingsFileList, g => {
        g.SettingsItems.ShowCaption = DefaultBoolean.False;
        g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        g.Items.Add(m => m.SettingsFileList.ShowFolders, i => { i.NestedExtension().CheckBox(c => { c.Text = "ShowFolders"; });});
        g.Items.Add(m => m.SettingsFileList.ShowParentFolder, i => { i.NestedExtension().CheckBox(c => { c.Text = "ShowParentFolder"; });});
    });
    settings.Items.AddGroupItem(g => {
        
        g.Caption = "";
        g.RowSpan = 2;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItems.ShowCaption = DefaultBoolean.False;
        g.ParentContainerStyle.Paddings.PaddingTop = Unit.Pixel(15);
        g.Items.Add(i => {
            i.ShowCaption = DefaultBoolean.False;
            i.NestedExtension().Button(s => {
                s.Name = "Apply";
                s.Text = "Apply";
                s.Width = 80;
                s.UseSubmitBehavior = true;
            });
        });
    });    
    settings.Items.AddGroupItem(m => m.SettingsUpload, g => {
        g.SettingsItems.ShowCaption = DefaultBoolean.False;
        g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        g.Items.Add(m => m.SettingsUpload.Enabled, i => { i.NestedExtension().CheckBox(c => { c.Text = "Enabled"; });});
        g.Items.Add(m => m.SettingsUpload.AdvancedModeSettings.EnableMultiSelect, i => { i.NestedExtension().CheckBox(c => { c.Text = "EnableMultiSelect"; });});
    });    
    settings.Items.AddGroupItem(m => m.SettingsBreadcrumbs, g => {
        g.SettingsItems.ShowCaption = DefaultBoolean.False;
        g.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        g.Items.Add(m => m.SettingsBreadcrumbs.Visible, i => { i.NestedExtension().CheckBox(c => { c.Text = "Visible"; });});
        g.Items.Add(m => m.SettingsBreadcrumbs.ShowParentFolderButton, i => { i.NestedExtension().CheckBox(c => { c.Text = "ShowParentFolderButton"; });});
        g.Items.Add(m => m.SettingsBreadcrumbs.Position, i => {
            i.NestedExtension().ComboBox(s => {
                s.Width = Unit.Pixel(100);
            });
            i.ShowCaption = DefaultBoolean.True;
            i.CaptionSettings.Location = LayoutItemCaptionLocation.Top;
        });
    });
}).GetHtml()