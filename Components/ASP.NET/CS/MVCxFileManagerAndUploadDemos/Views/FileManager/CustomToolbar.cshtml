@model string

@section AdditionalResources{
<style type="text/css">
    .dxpc-mainDiv.DetailsPopup
    {
        border-width: 4px;  
    }
    .dxpc-mainDiv.DetailsPopup .dxpc-content
    {
        padding: 0;
    }
    .dxpc-mainDiv.DetailsPopup .dxpc-content > div
    {
        margin: auto;
    }
    .dxpc-mainDiv.DetailsPopup .dxflGroupSys
    {
        padding-top: 12px;
        padding-bottom: 12px;
    }    
    .dxpc-mainDiv.DetailsPopup .dxflCaptionCellSys label
    {
        color: #929292;
    }
</style>
}
<script>
    function OnCustomCommand(s, e) {
        var args = e.commandName.split("-");
        switch(args[0]) {
            case "ChangeView":
                fileManager.PerformCallback({ viewType : args[1] });
                break;
            case "Properties":
                var isFileSelected = fileManager.GetActiveAreaName() == "Files";
                var relativePath = isFileSelected ? fileManager.GetSelectedFile().GetFullName() : fileManager.GetCurrentPath();
                popupControl.PerformCallback({ relativePath: relativePath });
                break;
        }
    }
    function OnToolbarUpdating(s, e) {
        var enabled = (e.activeAreaName == "Folders" || fileManager.GetSelectedItems().length > 0) && e.activeAreaName != "None";
        fileManager.GetToolbarItemByCommandName("Properties").SetEnabled(enabled);
        fileManager.GetContextMenuItemByCommandName("Properties").SetEnabled(enabled);
    }
    function OnPopupEndCallback(s, e) {
        UpdatePopupHeaderText();
        popupControl.ShowAtElement(fileManager.GetMainElement());
    }
    function UpdatePopupHeaderText() {
        var headerText = Name.GetText() + " Properties";
        popupControl.SetHeaderText(headerText);
    }
</script>


@using(Html.BeginForm()) { 
    @Html.Partial("CustomToolbarPartial", Model)
    @Html.Action("CustomToolbarPopupPartial")
}